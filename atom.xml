<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2013-12-16T17:01:09-08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convert utf8 literals in Java]]></title>
    <link href="http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java/"/>
    <updated>2013-10-03T20:37:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java</id>
    <content type="html"><![CDATA[<p>I thought this problem is already been solved, but it’s not: consider a string like <code>\xe6\x84\x8f\xe6\xb3\x95\xe5\x8d\x8a\xe5\xaf\xbc hello world</code>, how can you transform it to an utf8 encoded string <code>意法半导 hello world</code>? Note that the string you get is encoded in ascii encoding, not utf8; the original utf8 is transfered into hex literals. I thought that I can use whatever library I found on the first result returned by google, but actually there’s no trivial solution out there on the web.</p>

<!--more-->

<h2 id="icu4j">ICU4J</h2>

<p>The only library that you can use for handling utf8 on java platform, is <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a>. THE Unicode processing library devloped by IBM. If you know any other library that can process the literal string, please tell me, I’ll be really appreciated.</p>

<p>With <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a> you can use <code>com.ibm.icu.impl.Utility.unescape(String s)</code> to convert the literal string to utf8 string. However, java string internally doesn’t use utf8 encoding, instead it uses UTF-16 (Big Endian) to present unicode characters. To fully convert the string from utf8 literal to java unicode representation, you need to decode it with <strong>ISO-8859-1</strong> then read the bytes back to string using encoding <strong>UTF-8</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">com.ibm.icu.impl.Utility</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf_literals</span> <span class="o">=</span> <span class="s">&quot;\\xe6\\x84\\x8f\\xe6\\xb3\\x95\\xe5\\x8d\\x8a\\xe5\\xaf\\xbc hello world&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf8_str</span> <span class="o">=</span> <span class="n">Utility</span><span class="o">.</span><span class="na">unescape</span><span class="o">(</span><span class="n">utf_literals</span><span class="o">);</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">utf8_str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">java_utf_str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java_utf_str</span><span class="o">);</span>
</span><span class="line"><span class="c1">// ==&gt;  意法半导 hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One more thing. In order to print the utf string in Eclipse, you have to set the encoding of the output to utf8, else you’ll see a bunch of question marks.</p>

<p>I’m quite surprised that no one ever write a post of how do you solved this task. I know the solution is short yet not that trivial, but it still took me several hours to dig in and out on different libraries and solutions on the web to reach the final answer. Hope this post can save your time if you encountered the same problem!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java fast IO using java.nio API]]></title>
    <link href="http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api/"/>
    <updated>2013-09-28T17:18:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api</id>
    <content type="html"><![CDATA[<p>For modern computing, IO is always a big bottleneck to solve. I recently encounter a problem is to read a 355MB index file to memory, and do a run-time lookup base the index. This process will be repeated by thousands of Hadoop job instances, so a fast IO is a must. By using the <code>java.nio</code> API I sped the process from 194.054 seconds to 0.16 sec! Here’s how I did it.</p>

<!--more-->

<h2 id="the-data-to-process">The Data to Process</h2>

<p>This performance tuning practice is very specific to the data I’m working on, so it’s better to explain the context. We have a long ip list (26 millions in total) that we want to put in the memory. The ip is in text form, and we’ll transform it into signed integer and put it into a java array. (We use signed integer because java doesn’t support unsigned primitive types…) The transformation is pretty straight forward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">ip2integer</span> <span class="o">(</span><span class="n">String</span> <span class="n">ip_str</span><span class="o">){</span>
</span><span class="line">  <span class="n">String</span> <span class="o">[]</span> <span class="n">numStrs</span> <span class="o">=</span> <span class="n">ip_str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\.&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">numStrs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">4</span><span class="o">){</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span>
</span><span class="line">        <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">2</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
</span><span class="line">    <span class="n">num</span> <span class="o">+=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;IP is wrong: &quot;</span><span class="o">+</span> <span class="n">ip_str</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, reading ip in text form line by line is really slow.</p>

<h2 id="strategy-1-line-by-line-text-processing">Strategy 1: Line-by-line text processing</h2>

<p>This approach is straight forward. Just a standard readline program in java.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ipArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26123456</span><span class="o">];</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsText</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;ip.tsv&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataOutputStream</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class="line">  <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ip_num</span> <span class="o">=</span> <span class="n">ip2integer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">    <span class="n">ipArray</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">ip_num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result time was <code>194.054</code> seconds.</p>

<h2 id="strategy-2-encode-ip-in-binary-format">Strategy 2: Encode ip in binary format</h2>

<p>The file size of the <code>ip.tsv</code> is 355MB, which is inefficient to store or to read. Since I’m only reading it to an array, why not store it as a big chunk of binary array, and read it back while I need it? This can be done by <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html">DataInputStream</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataOutputStream.html">DataOutputStream</a>. After shrinking the file, the file size became 102MB.</p>

<p>Here’s the code to read ip in binary format:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsDataStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class="line">      <span class="n">ipArr</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">e</span><span class="o">){</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;EOF&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The resulting time was <code>72</code> seconds. Much slower than I expected.</p>

<h2 id="strategy-3-read-the-file-using-javanio-api">Strategy 3: Read the file using java.nio API</h2>

<p>The <code>java.nio</code> is a new IO API that maps to low level system calls. With these system calls we can perform libc operations like <code>fseek</code>, <code>rewind</code>, <code>ftell</code>, <code>fread</code>, and bulk copy from disk to memory. For the C API you can view it from <a href="http://www.gnu.org/software/libc/manual/html_node/Low_002dLevel-I_002fO.html">GNU C library reference</a>.</p>

<p>The terminology in C and Java is a little bit different. In C, you control the file IO by <a href="http://www.gnu.org/software/libc/manual/html_node/Opening-and-Closing-Files.html#Opening-and-Closing-Files">file descriptors</a>; while in <code>java.nio</code> you use a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html">FileChannel</a> for reading, writing, or manipulate the position in the file. Another difference is you can bulk copy directly using the <code>fread</code> call, but in Java you need an additional <code>ByteBuffer</code> layer to map the data. To understand how it work, it’s better to read it from code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPFromNIO</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">  <span class="n">ByteBuffer</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocateDirect</span><span class="o">(</span><span class="mi">64</span><span class="o">*</span><span class="mi">1024</span><span class="o">);</span>
</span><span class="line">  <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="n">ipArr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">];</span>
</span><span class="line">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;File size: &quot;</span><span class="o">+</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bb</span><span class="o">))!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class="line">    <span class="c1">//System.out.println(&quot;Offset: &quot;+offset+&quot;\tlen: &quot;+len+&quot;\tremaining:&quot;+bb.hasRemaining());</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">asIntBuffer</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">ipArr</span><span class="o">,</span><span class="n">offset</span><span class="o">,(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">    <span class="n">offset</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">;</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code should be quite self-documented. The only thing to note is the byte-buffer’s <code>flip()</code> method. This call convert the buffer from writing data to buffer from disk to reading mode, so that we can read the data to int array via method <code>get()</code>. Another thing worth to mention is java use big-endian to read and write data by default. You can use <code>ByteBuffer.order(ByteOrder.LITTLE_ENDIAN)</code> to set the endian if you need it. For more about <code>ByteBuffer</code> here’s a <a href="http://mindprod.com/jgloss/bytebuffer.html">good blog post</a> that explains it in detail.</p>

<p>With this implementation, the result performance is <code>0.16</code> sec! Glory to the <code>java.nio</code>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (2)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2/"/>
    <updated>2013-09-22T18:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2</id>
    <content type="html"><![CDATA[<p>Followed the previous article, in this post I ran several benchmarks and tuned the performance from 3 hours 34 minutes to 6 minutes 8 seconds!</p>

<!--more-->

<h2 id="original-job-without-any-tuning">Original job without any tuning</h2>

<ul>
  <li><code>job_201308111005_0317</code></li>
  <li>NumTasks: 9790</li>
  <li>Reuse JVM: false</li>
  <li>mean complete time: 9-Sep-2013 10:08:47 (17sec)</li>
  <li>Finished in: 3hrs, 34mins, 26sec</li>
</ul>

<p>We had 9790 files to process, and the total size of the files is 53 GB. Note that for every task it still took 17 seconds to process the file.</p>

<h2 id="using-combinefileinputformat-without-setting-the-maxsplitsize">Using CombineFileInputFormat without setting the MaxSplitSize</h2>

<ul>
  <li><code>job_201308111005_0330</code></li>
  <li>NumTasks: 1</li>
  <li>Reuse JVM: false</li>
</ul>

<p>In this benchmark I didn’t set the <code>MaxSplitSize</code> in <code>CFInputFormat.java</code>, and thus Hadoop merge all the files into one super big task.
After running this task for 15 minutes, hadoop killed it. Maybe its a timeout issue, I didn’t dig into this.
The start and the end of the task logs look like this:</p>

<pre><code>13/09/09 16:17:29 INFO mapred.JobClient:  map 0% reduce 0%
13/09/09 16:32:45 INFO mapred.JobClient:  map 40% reduce 0%
 
13/09/09 16:33:02 INFO mapred.JobClient: Task Id : attempt_201308111005_0330_m_000000_0, Status : FAILED
java.lang.Throwable: Child Error
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:271)
    Caused by: java.io.IOException: Task process exit with nonzero status of 255.
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:258)
</code></pre>

<h2 id="using-combinefileinputformat-with-block-size-64-mb">Using CombineFileInputFormat with block size 64 MB</h2>

<ul>
  <li><code>job_201308111005_0332</code></li>
  <li>Reuse JVM = false</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 16:55:02 (24sec)</li>
  <li>Finished in: 23mins, 6sec</li>
</ul>

<p>After modifying <code>MaxSplitSize</code> the total runtime has reduced to 23 minutes! The total tasks drops from 9790 to 760, about 12 times smaller. The time difference is 9.3 times faster, pretty nice! However, the mean complete time doesn’t scale like other factors. The reason was it’s a big overhead to start JVM over and over again.</p>

<h2 id="using-combinefileinputformat-with-block-size-64mb-and-reuse-jvm">Using CombineFileInputFormat with block size 64MB and reuse JVM</h2>

<p>To reuse the JVM, just set <code>mapred.job.reuse.jvm.tasks</code> to <code>-1</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class="line">    <span class="n">conf</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="s">&quot;mapred.job.reuse.jvm.num.tasks&quot;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">HadoopMain</span><span class="o">(),</span> <span class="n">argv</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is awesome! <strong>6 minutes and 8 seconds</strong>, wow!</p>

<ul>
  <li><code>job_201308111005_0333</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 17:30:23 (5sec)</li>
  <li>Finished in: 6mins, 8sec</li>
</ul>

<h2 id="use-fileinputformat-and-reuse-jvm">Use FileInputFormat and reuse JVM</h2>

<p>Just curious the performance difference if we only change the JVM parameter:</p>

<ul>
  <li><code>job_201308111005_0343 </code></li>
  <li>NumTasks: 9790</li>
  <li>mean complete time: 10-Sep-2013 17:04:18 (3sec)</li>
  <li>Reuse JVM = true</li>
  <li>Finished in: 24mins, 49sec</li>
</ul>

<h2 id="tuning-performance-over-block-size">Tuning performance over block size</h2>

<p>Let’s jump to the conclusion first: changing the block size doesn’t affect the performance that much, and I found 64 MB is the best size to use. Here are the benchmarks:</p>

<h3 id="mb">512 MB</h3>

<ul>
  <li><code>job_201308111005_0339</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 512MB</li>
  <li>NumTasks: 99</li>
  <li>mean complete time: 10-Sep-2013 11:55:26 (24sec)</li>
  <li>Finished in: 7min 13sec</li>
</ul>

<h3 id="mb-1">128 MB</h3>

<ul>
  <li><code>job_201308111005_0340</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 128 MB</li>
  <li>NumTasks: 341</li>
  <li>mean complete time: 10-Sep-2013 13:13:20 (9sec)</li>
  <li>Finished in: 6mins, 41sec</li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>So far the best practice I learned from these benchmarks are:</p>

<ol>
  <li>Setup the <code>mapred.job.reuse.jvm.num.tasks</code> flag in configuration. This is the easiest tuning to do, and it makes nearly 10 times performance improvement.</li>
  <li>Write your own <code>CombineFileInputFormat</code> implementation.</li>
  <li>The block size can be 64 MB or 128 MB, but doesn’t make big difference between the two.</li>
</ol>

<p>Still, try to model your problems into sequence file or map file in hadoop. HDFS should handle localities with these files automatically.
What about <code>CFInputFormat</code>? Does it handle locality in HDFS system too?
I can’t confirm it but I guess sorting the keys based on line offset first then file name also guarantees the locality of assigning data to mapper. When I have time to dig more from HDFS API, I’ll look back to this benchmark and see what can I further tune the program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (1)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1/"/>
    <updated>2013-09-22T14:39:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1</id>
    <content type="html"><![CDATA[<p>Processing small files is an old typical problem in hadoop; On <a href="http://stackoverflow.com/questions/14541759/how-can-i-work-with-large-number-of-small-files-in-hadoop">Stack Overflow</a> it suggested people to use <a href="http://hadoop.apache.org/docs/r1.1.1/api/org/apache/hadoop/mapred/lib/CombineFileInputFormat.html">CombineFileInputFormat</a>,  but I haven’t found a good step-to-step article that teach you how to use it. So, I decided to write one myself.</p>

<!--more-->

<p>From <a href="http://blog.cloudera.com/blog/2009/02/the-small-files-problem/">Cloudera’s blog</a>:</p>

<blockquote>
  <p>A small file is one which is significantly smaller than the HDFS block size (default 64MB).
If you’re storing small files, then you probably have lots of them (otherwise you wouldn’t turn to Hadoop),
and the problem is that HDFS can’t handle lots of files.</p>
</blockquote>

<p>In my benchmark, just using a custom <code>CombineFileInputFormat</code> can speedup the program from 3 hours to 23 minutes, and after some further tuning, the same task can be run in 6 minutes!</p>

<h2 id="benchmark-setup">Benchmark Setup</h2>

<p>To test the raw performance of different approaches to solve small problems, I setup a map only hadoop job that basically just do grep and perform a small binary search. The binary search part is to generate the reduce side keys that I’ll use in further data processing; it took only a little resource (8MB index) to run, so it does not affect the result of the benchmark.</p>

<p>The data to process is some server log data, 53.1 GB in total. The hadoop clusters consist 6 nodes, using hadoop version 1.1.2. In this benchmark I implemented <code>CombineFileInputFormat</code> to shrink the map jobs; I also tested the difference of reusing JVM or not, and different number of block sizes to combine files.</p>

<h2 id="combinefileinputformat">CombineFileInputFormat</h2>

<p>The code listed here is modified from <a href="https://svn.apache.org/repos/asf/hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/MultiFileWordCount.java">Hadoop example code</a>. To use <code>CombineFileInputFormat</code> you need to implement three classes. The class <code>CombineFileInputFormat</code> is an abstract class with no implementation, so you must create a subclass to support it; we’ll name the subclass <code>CFInputFormat</code>. The subclass will initiate a delegate <code>CFRecordReader</code> that extends <code>RecordReader</code>; this is the code that does the file processing logic. We’ll also need a class for <code>FileLineWritable</code>, which replaces <code>LongWritable</code> normally used as a key to file lines.</p>

<h3 id="cfinputformatjava">CFInputFormat.java</h3>

<p>The <code>CFInputFormat.java</code> doesn’t do much. You implement <code>createRecordReader</code> to pass in the record reader that does the combine file logic, that’s all. Note that you can call <code>setMaxSplitSize</code> in the initializer to control the size of each chunk of files; if you don’t want to split files into half, remember to return <code>false</code> in <code>isSplitable</code> method, which defaults to <code>true</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.JobContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileInputFormat</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.CFRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFInputFormat</span> <span class="kd">extends</span> <span class="n">CombineFileInputFormat</span><span class="o">&lt;</span><span class="n">CFInputFormat</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">public</span> <span class="nf">CFInputFormat</span><span class="o">(){</span>
</span><span class="line">    <span class="kd">super</span><span class="o">();</span>
</span><span class="line">    <span class="n">setMaxSplitSize</span><span class="o">(</span><span class="mi">67108864</span><span class="o">);</span> <span class="c1">// 64 MB, default block size on hadoop</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="n">createRecordReader</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="n">CombineFileRecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;((</span><span class="n">CombineFileSplit</span><span class="o">)</span><span class="n">split</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">CFRecordReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSplitable</span><span class="o">(</span><span class="n">JobContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Path</span> <span class="n">file</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cfrecordreaderjava">CFRecordReader.java</h3>

<p><code>CFRecordReader</code> is a delegate class of <code>CombineFileRecordReader</code>, a built in class that pass each split (typically a whole file in this case) to our class <code>CFRecordReader</code>. When the hadoop job starts, <code>CombineFileRecordReader</code> reads all the file sizes in HDFS that we want it to process, and decides how many splits base on the <code>MaxSplitSize</code> we defined in <code>CFInputFormat</code>. For every split (must be a file, because we set <code>isSplitabe</code> to false), <code>CombineFileRecordReader</code> creates a <code>CFRecrodReader</code> instance via a custom constructor, and pass in <code>CombineFileSplit</code>, context, and index for <code>CFRecordReader</code> to locate the file to process with.</p>

<p>When processing the file, the <code>CFRecordReader</code> creates a <code>FileLineWritable</code> as the key for hadoop mapper class. With each line a <code>FileLineWritable</code> consists the file name and the offset length of that line. The difference between <code>FileLineWritable</code> and the normally used <code>LongWritable</code> in mapper is <code>LongWritable</code> only denote the offset of a line in a file, while <code>FileLineWritable</code> adds the file information into the key.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FSDataInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FileSystem</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.LineReader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFRecordReader</span> <span class="kd">extends</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">end</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileSystem</span> <span class="n">fs</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileLineWritable</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Text</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">FSDataInputStream</span> <span class="n">fileIn</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">LineReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="nf">CFRecordReader</span><span class="o">(</span><span class="n">CombineFileSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="n">fs</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">getFileSystem</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">());</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">startOffset</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">startOffset</span> <span class="o">+</span> <span class="n">split</span><span class="o">.</span><span class="na">getLength</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">fileIn</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">  <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LineReader</span><span class="o">(</span><span class="n">fileIn</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">pos</span> <span class="o">=</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">arg1</span><span class="o">)</span>
</span><span class="line">    <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// Won&#39;t be called, use custom Constructor</span>
</span><span class="line">  <span class="c1">// `CFRecordReader(CombineFileSplit split, TaskAttemptContext context, Integer index)`</span>
</span><span class="line">  <span class="c1">// instead</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">float</span> <span class="nf">getProgress</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">startOffset</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">1.0f</span><span class="o">,</span> <span class="o">(</span><span class="n">pos</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">FileLineWritable</span> <span class="nf">getCurrentKey</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">Text</span> <span class="nf">getCurrentValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextKeyValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileLineWritable</span><span class="o">();</span>
</span><span class="line">    <span class="n">key</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">key</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">newSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">newSize</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="n">pos</span> <span class="o">+=</span> <span class="n">newSize</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">newSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reason to use a custom constructor
is not documented anywhere in hadoop api nor document. You can only find it in <a href="http://grepcode.com/file/repo1.maven.org/maven2/com.ning/metrics.collector/1.2.1/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java#40">hadoop source code</a>, line 40:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">   <span class="kd">static</span> <span class="kd">final</span> <span class="n">Class</span> <span class="o">[]</span> <span class="n">constructorSignature</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span> <span class="o">[]</span>
</span><span class="line">                                          <span class="o">{</span><span class="n">CombineFileSplit</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">TaskAttemptContext</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="filelinewritablejava">FileLineWritable.java</h3>

<p>This file is very simple: store the file name and offset, and override the <code>compareTo</code> method to compare the file name first, then compare the offset.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.WritableComparable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileLineWritable</span> <span class="kd">implements</span> <span class="n">WritableComparable</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLong</span><span class="o">();</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">Text</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">out</span><span class="o">.</span><span class="na">writeLong</span><span class="o">(</span><span class="n">offset</span><span class="o">);</span>
</span><span class="line">    <span class="n">Text</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">FileLineWritable</span> <span class="n">that</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">fileName</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="na">fileName</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">signum</span><span class="o">((</span><span class="kt">double</span><span class="o">)(</span><span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">-</span> <span class="n">that</span><span class="o">.</span><span class="na">offset</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>               <span class="c1">// generated hashCode()</span>
</span><span class="line">    <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">fileName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">offset</span> <span class="o">^</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">));</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// generated equals()</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="n">CFInputFormat</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">CFInputFormat</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">fileName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span><span class="o">))</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">offset</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="job-setup">job setup</h2>

<p>Finally is the job setup for hadoop cluster to run. We just need to assign the classes to job:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class="line"><span class="c1">// standard hadoop conf</span>
</span><span class="line"><span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">getConf</span><span class="o">());</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">CFInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">MyMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// map only</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The benchmark result is in the next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my emacs setting on servers]]></title>
    <link href="http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers/"/>
    <updated>2013-08-29T10:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers</id>
    <content type="html"><![CDATA[<p>My desktop emacs config is complecated, however I need a minimal config for emacs installed on ubuntu servers. This is my note of how to configure emacs on servers that works for me.</p>

<!--more-->

<h2 id="emacs24">Emacs24</h2>

<p>First, I need to get Emacs24 installed on ubuntu, which is not by default. This link <a href="http://www.mikeyboldt.com/2011/11/30/install-emacs-24-in-ubuntu/">Install Emacs 24 in Ubuntu</a> is a great guide of how to install emacs 24. Here are the commands you need to type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo add-apt-repository ppa:cassou/emacs
</span><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install emacs24</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configure-packges-archives">Configure Packges Archives</h2>

<p>With Emacs 24, you can use the package managing system easily. Open your <code>~/.emacs</code> file and enter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span><span class="o">.</span><span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span><span class="o">.</span><span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the file, and <code>M-x eval-buffer</code>, then <code>M-x package-refresh-contents</code>. Now you’re ready to install most of the emacs plugins.</p>

<h2 id="plugins-i-installed">Plugins I installed</h2>

<ol>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/ParEdit">Paredit.el</a>: a mode for editing structured s-expressions, very useful for lisp based programs including emacs-lisp and clojure.</p>
  </li>
  <li>
    <p><a href="https://github.com/clojure-emacs/clojure-mode">clojure mode</a>: mode for editing clojure files </p>
  </li>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a>: Move your cursor to where you eyes are looking at.</p>
  </li>
</ol>

<h2 id="some-other-configs">Some other configs</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">global-visual-line-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">tool-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">show-paren-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">menu-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">inhibit-startup-message</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq-default</span> <span class="nv">indent-tabs-mode</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; it&#39;s dangerous to keep backup files in the same directory on the server</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">backup-directory-alist</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.&quot;</span> <span class="o">.</span> <span class="s">&quot;~/.backup_emacs&quot;</span><span class="p">))</span>
</span><span class="line">      <span class="nv">auto-save-file-name-transforms</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.*&quot;</span> <span class="s">&quot;~/.backup_emacs&quot;</span> <span class="nv">t</span><span class="p">))</span>
</span><span class="line">      <span class="nv">backup-by-copying</span> <span class="nv">t</span>    <span class="c1">; Don&#39;t delink hardlinks</span>
</span><span class="line">      <span class="nv">version-control</span> <span class="nv">t</span>      <span class="c1">; Use version numbers on backups</span>
</span><span class="line">      <span class="nv">delete-old-versions</span> <span class="nv">t</span>  <span class="c1">; Automatically delete excess backups</span>
</span><span class="line">      <span class="nv">kept-new-versions</span> <span class="mi">20</span>   <span class="c1">; how many of the newest versions to keep</span>
</span><span class="line">      <span class="nv">kept-old-versions</span> <span class="mi">5</span>    <span class="c1">; and how many of the old</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; configure paredit</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;clojure-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; auto complete for emacs lisp</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">tab-always-indent</span> <span class="ss">&#39;complete</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;completion-styles</span> <span class="ss">&#39;initials</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">global-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;RET&quot;</span><span class="p">)</span> <span class="ss">&#39;newline-and-indent</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; ace jump mode</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;&lt;ESC&gt;&lt;ESC&gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;ace-jump-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope these helps :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimal NodeJS router]]></title>
    <link href="http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router/"/>
    <updated>2013-08-16T15:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router</id>
    <content type="html"><![CDATA[<p>Here comes the problem, you’re prototyping a website that has powerful front-end like <a href="http://emberjs.com">EmberJS</a> or <a href="http://angularjs.org">AngularJS</a>, and sync JSON data with your NodeJS back-end, but you want your nodejs code to be lite and clean.</p>

<p>You can use some nodeJS framework like restify, expressJS, director or whatever, but is there a way to write a minimal router using regex and switch statements? Yes.</p>

<!--more-->

<p>The solution is pretty simple. JS switch statement can accept expressions as comparison keys, so simply do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./rest_route.js&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">Http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class="line">  <span class="k">switch</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers$&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">servers</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers/\\d&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">server</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/nodes&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/url/&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">urlapi</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>
</span><span class="line">      <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This may not as consistent as other heavy routers, but it’s really suitable for prototyping a new web app. Have fun and use it to hack your new weekend project!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing java programs on a remote server]]></title>
    <link href="http://www.idryman.org/blog/2013/07/14/writing-java-programs-on-a-remote-server/"/>
    <updated>2013-07-14T16:52:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/07/14/writing-java-programs-on-a-remote-server</id>
    <content type="html"><![CDATA[<p>Recently I started to work on hadoop and big data processing, but I was frustrated on eclipse and the development environment. We run hadoop on a remote cluster, but develop map-reduce programs on laptop. The development cycle was pretty slow because we need to upload the jar for every release. Another thing is Eclipse is too inefficient for a Vim and Emacs hacker like me. Thankfully I’m not the only one who think this way; Eric Van Dewoestine developed <a href="http://eclim.org/">Eclim</a> which can let you work on java programs on headless eclipse and vim/emacs! Here comes the installation steps:</p>

<!--more-->

<h3 id="install-eclipse">Install Eclipse</h3>

<p>I thought it wasn’t that difficult to install the Eclim on remote server, but actually it’s not that trivial to do. The key is to use local eclipse in your home directory instead of using package manager to install eclipse. I tried a whole afternoon, but still couldn’t make Eclim work with Ubuntu pre-packaged eclipse (using apt-get, of course).</p>

<p>To install eclipse, follow the links on it’s official website, and click linux download link to get the actual url. After it starts to download, stop the download process and copy the url. I couldn’t find direct download link on Eclipse website, maybe this shadowed link would help:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://carroll.aset.psu.edu/pub/eclipse/technology/epp/downloads/release/kepler/R/eclipse-standard-kepler-R-linux-gtk-x86_64.tar.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Extract the tar-ball somewhere in your home directory. The rest of the steps are as same as Eclim official installation guild.</p>

<h3 id="other-dependencies">Other dependencies</h3>

<p>Although we want to run Eclim in CLI environment, we still need X11 to run Eclipse daemon. To do so we need to install <code>xvfb</code> and other build tools.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get install xvfb build-essential
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="install-eclim">Install Eclim</h3>

<p>The rest of the steps are pretty easy. Note that I put eclipse at home directory; you may need to modify this parameter to your eclipse location.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://sourceforge.net/projects/eclim/files/eclim/2.2.7/eclim_2.2.7.jar/download
</span><span class="line">mv download eclim_2.2.7.jar
</span><span class="line">java -Dvim.files<span class="o">=</span><span class="nv">$HOME</span>/.vim -Declipse.home<span class="o">=</span><span class="nv">$HOME</span>/eclipse <span class="se">\</span>
</span><span class="line">     -jar eclim_2.2.7.jar install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="starting-eclim">Starting Eclim</h3>

<p>To start Eclim, first start a headless X11 display, then start the Eclim daemon.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Xvfb :1 -screen 0 1024x768x24 &amp;
</span><span class="line"><span class="nv">DISPLAY</span><span class="o">=</span>:1 ~/eclipse/eclimd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default it will create a <code>workspace</code> in your home directory, you should put all your java projects there. When creating new projects, use <code>:ProjectCreate</code> in Vim (do not create yourself by <code>mkdir</code>, Eclim don’t know what that is). If you want to delete or rename a project, use <code>:ProjectDelete</code> and <code>:PorjectRename</code>.</p>

<p>Now you can reach whole eclipse ecosystem directly from vim! Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laziness and memoization in Clojure]]></title>
    <link href="http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure/"/>
    <updated>2013-06-27T20:01:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure</id>
    <content type="html"><![CDATA[<p>I’m now having a job at supplyframe Inc., and luckily I can use Clojure for work! Clojure is a young language created by Rich Hickey on 2007. It uses Lisp syntax, immutable data structures by default, and supports both strict and lazy evaluations. As Christ Okasaki suggested:</p>

<blockquote>
  <p>Strict evaluation is useful in implementing worst-case data structures and lazy evaluation is useful in implementing amortized data structures.</p>
</blockquote>

<p>It’s really cheap to define lazy or strict data structures in Clojure that has low amortized cost even in a persistent manner. Let’s dig into the source code and see how does Clojure implement it.</p>

<!--more-->

<p>Before we go into Clojure’s java source code, we can first look at the <code>memoize</code> function.</p>

<h2 id="memoize">Memoize</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clj"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">memoize</span>
</span><span class="line">  <span class="s">&quot;Returns a memoized version of a referentially transparent function. The</span>
</span><span class="line"><span class="s">  memoized version of the function keeps a cache of the mapping from arguments</span>
</span><span class="line"><span class="s">  to results and, when calls with the same arguments are repeated often, has</span>
</span><span class="line"><span class="s">  higher performance at the expense of higher memory use.&quot;</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span>
</span><span class="line">   <span class="ss">:static</span> <span class="nv">true</span><span class="p">}</span>
</span><span class="line">  <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mem</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{})]</span>
</span><span class="line">    <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class="line">      <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">e</span> <span class="p">(</span><span class="nb">find </span><span class="err">@</span><span class="nv">mem</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class="line">        <span class="p">(</span><span class="nb">val </span><span class="nv">e</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">ret</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="nf">swap!</span> <span class="nv">mem</span> <span class="nb">assoc </span><span class="nv">args</span> <span class="nv">ret</span><span class="p">)</span>
</span><span class="line">          <span class="nv">ret</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The function is elegant; it captures whatever arguments that pass in the function, and pairs the arguments and the returned value to a persistent map. In order to make it thread safe, the persistent map is cast into an <code>atom</code> and can be modified via <code>swap!</code>.</p>

<p>This is nice. And since Clojure uses $\log_{32}(N)$ hash map, it is also fast enough to do a memoized lookup. For the implementation of Clojure’s persistent hash map, you can check out <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">this post</a>.</p>

<h2 id="lazy-seq">lazy-seq</h2>

<p>In contrast to <code>memoize</code>, which is implemented in Clojure, <code>lazy-seq</code> is implemented in java. It contains three fields:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LazySeq</span> <span class="kd">extends</span> <span class="n">Obj</span> <span class="kd">implements</span> <span class="n">ISeq</span><span class="o">,</span> <span class="n">Sequential</span><span class="o">,</span> <span class="n">List</span><span class="o">,</span> <span class="n">IPending</span><span class="o">,</span> <span class="n">IHashEq</span><span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="n">IFn</span> <span class="n">fn</span><span class="o">;</span>
</span><span class="line"><span class="kd">private</span> <span class="n">Object</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line"><span class="kd">private</span> <span class="n">ISeq</span> <span class="n">s</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>fn</code> is an un-evaluated thunk (function without arguments), and <code>sv</code> is the captured value after executing the thunk. The <code>ISeq s</code> is the realized version of the sequence.</p>

<p>When the program tries to realize the lazy sequence, it calls <code>seq()</code> and <code>sval()</code> functions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">final</span> <span class="kd">synchronized</span> <span class="n">Object</span> <span class="nf">sval</span><span class="o">(){</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">fn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">		<span class="k">try</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="n">sv</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class="line">			<span class="n">fn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="k">catch</span><span class="o">(</span><span class="n">RuntimeException</span> <span class="n">e</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">sneakyThrow</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">sv</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">final</span> <span class="kd">synchronized</span> <span class="kd">public</span> <span class="n">ISeq</span> <span class="nf">seq</span><span class="o">(){</span>
</span><span class="line">	<span class="n">sval</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">sv</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">		<span class="n">Object</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line">		<span class="n">sv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="k">while</span><span class="o">(</span><span class="n">ls</span> <span class="k">instanceof</span> <span class="n">LazySeq</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="n">ls</span> <span class="o">=</span> <span class="o">((</span><span class="n">LazySeq</span><span class="o">)</span><span class="n">ls</span><span class="o">).</span><span class="na">sval</span><span class="o">();</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="n">s</span> <span class="o">=</span> <span class="n">RT</span><span class="o">.</span><span class="na">seq</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the <code>sval()</code> function, Clojure handles the caching elegantly. If <code>fn</code> is not null, execute it and stores the value to <code>sv</code>. If the <code>LazySeq</code> is dereferenced, the whole object will be recycled by the garbage collector, else the object will hold the value and is thread-safe to be accessed by other threads.</p>

<p>The <code>seq()</code> function is the wrapper around <code>sval()</code>. It realizes all <code>LazySeq</code> objects recursively, and wrap it into a <code>seq</code> object that implements <code>ISeq</code> interface.</p>

<p>With the realized <code>seq</code>, it can support common sequence functions like <code>first</code> and <code>next</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="n">Object</span> <span class="nf">first</span><span class="o">(){</span>
</span><span class="line">	<span class="n">seq</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">first</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="n">ISeq</span> <span class="nf">next</span><span class="o">(){</span>
</span><span class="line">	<span class="n">seq</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>	
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>In Clojure’s documentation, it said that <code>lazy-seq</code> is cached after realizing it, but it didn’t document how it does it. Luckily the source code is pretty easy to understand. Clojure uses lazy sequences a lot, so knowing that it handles lazy sequence efficiently is important for all Clojure programmers. :) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Graphite on OSX]]></title>
    <link href="http://www.idryman.org/blog/2013/05/31/graphite-on-osx/"/>
    <updated>2013-05-31T16:59:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/31/graphite-on-osx</id>
    <content type="html"><![CDATA[<p>Installing graphite on OSX is a <em>pain</em>. This post is a quick note that I would never want to go through again. If you are looking this post, I’d suggest you to install graphite on linux.</p>

<p>Most installation steps are from this <a href="https://gist.github.com/oyiptong/2430817">gist</a>.</p>

<!--more-->

<h2 id="xquartz-and-cairo">Xquartz and Cairo</h2>

<p>If you don’t have X11 installed, go to <a href="http://xquartz.macosforge.org/landing/">xquartz</a> and install it on your mac. Then, install cairo via <code>homebrew</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install cairo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pythonbrew">Pythonbrew</h2>

<p>Install pythonbrew and setup environment variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -kL http://xrl.us/pythonbrewinstall | bash
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;[[ -s $HOME/.pythonbrew/etc/bashrc ]] &amp;&amp; source $HOME/.pythonbrew/etc/bashrc&#39;</span> &gt;&gt; ~/.bashrc
</span><span class="line"><span class="o">[[</span> -s <span class="nv">$HOME</span>/.pythonbrew/etc/bashrc <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="nv">$HOME</span>/.pythonbrew/etc/bashrc
</span><span class="line">pythonbrew install -framework -f 2.7.2
</span><span class="line">pythonbrew use 2.7.2
</span><span class="line">pythonbrew venv create graphite
</span><span class="line">pythonbrew venv use graphite
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="python-cairo">Python-cairo</h3>

<p>This part is the real pain. On linux, just use <code>sudo apt-get install python-cairo</code>, it’s much much more simpler.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install autotools
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> ~/tmp
</span><span class="line">git clone git://git.cairographics.org/git/py2cairo
</span><span class="line"><span class="nb">cd </span>py2cairo
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">ACLOCAL_FLAGS</span><span class="o">=</span><span class="s2">&quot;-I /usr/local/Cellar/pkg-config/0.28/share/aclocal/&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">MY_PYTHON_PATH</span><span class="o">=</span><span class="sb">`</span>python -c <span class="s1">&#39;import sys; print sys.prefix&#39;</span>|perl -nle <span class="s1">&#39;m|^.*(?=/bin)|&#39;</span><span class="o">)</span>;print <span class="nv">$&amp;</span><span class="sb">`</span>
</span><span class="line">./autogen.sh --prefix<span class="o">=</span><span class="nv">$MY_PYTHON_PATH</span>
</span><span class="line">./configure
</span><span class="line">
</span><span class="line"><span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="sb">`</span>brew --prefix cairo<span class="sb">`</span>/lib/pkgconfig ./configure --prefix<span class="o">=</span><span class="nv">$MY_PYTHON_PATH</span>
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">CAIRO_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I/usr/local/Cellar/cairo/1.12.14/include/cairo/&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">CAIRO_LIBS</span><span class="o">=</span><span class="s2">&quot;-L/usr/local/Cellar/cairo/1.12.14/lib/ -lcairo&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nv">C_INCLUDE_PATH</span><span class="o">=</span>/opt/X11/include/ make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="python-dependencies">Python dependencies</h2>

<p>For the rest of the steps are all copied from the <a href="https://gist.github.com/oyiptong/2430817">gist</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pip install carbon
</span><span class="line">pip install whisper
</span><span class="line">pip install <span class="nv">django</span><span class="o">==</span>1.3.1
</span><span class="line">pip install django-tagging
</span><span class="line">pip install graphite-web
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="setup-graphite">Setup graphite</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /opt/graphite/webapp/graphite
</span><span class="line">python manage.py syncdb
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> /opt/graphite/conf
</span><span class="line">cp storage-schemas.conf.example storage-schemas.conf
</span><span class="line">cp carbon.conf.example carbon.conf
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> /opt/graphite/webapp/graphite
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;TIME_ZONE = &#39;America/Los_Angeles&#39;&quot;</span> &gt; local_settings.py
</span><span class="line"><span class="c"># use appropriate timezone that you&#39;re in</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="running-graphite">Running graphite</h2>

<ol>
  <li>
    <p><code>/opt/graphite/bin/carbon-cache.py start</code></p>
  </li>
  <li>
    <p><code>/opt/graphite/bin/run-graphite-devel-server.py /opt/graphite</code></p>
  </li>
  <li>
    <p>Open your browser and hopefully <code>http://localhost:8080</code> is up</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs loves iPython Notebook]]></title>
    <link href="http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook/"/>
    <updated>2013-05-29T11:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook</id>
    <content type="html"><![CDATA[<!--more-->

<h2 id="install">Install</h2>

<p>Installing emacs ipython notebook is pretty simple.</p>

<ol>
  <li>
    <p>follow the steps in <a href="http://www.idryman.org/blog/2013/03/13/python-setup-on-mac-osx/">Setting up Python on OSX Mountain Lion</a>.</p>
  </li>
  <li>
    <p>Refresh emacs packages <code>M-x package-refresh-contents</code></p>
  </li>
  <li>
    <p><code>M-x package-install</code> <code>ein</code></p>
  </li>
</ol>

<h2 id="usage">Usage</h2>

<ol>
  <li>
    <p><code>cd directory</code></p>
  </li>
  <li>
    <p><code>ipython notebook --pylab inline</code></p>
  </li>
  <li>
    <p><code>M-x ein:notebooklist-open</code></p>
  </li>
</ol>

<p>Than, check on <a href="https://github.com/tkf/emacs-ipython-notebook">Emacs IPython Notebook</a> to see what key-bindings you can use in EIN mode. I only use <code>C-c C-c</code> to execute a buffer, and <code>C-c C-u</code> for changing the cell type. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popular Clojure Projects]]></title>
    <link href="http://www.idryman.org/blog/2013/05/25/clojure-bookmarks/"/>
    <updated>2013-05-25T08:40:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/25/clojure-bookmarks</id>
    <content type="html"><![CDATA[<p>When I want to learn a new programming language, the best way is always learn from the best projects in that ecosystem. I grabbed several popular repositories that has high ratings on Github.</p>

<!--more-->

<h2 id="screen-casts">Screen casts</h2>

<ul>
  <li><a href="http://www.youtube.com/user/ClojureTV">ClojureTV</a></li>
</ul>

<ul>
  <li><a href="http://vimeo.com/channels/fulldisclojure/8320428">Disclojure</a></li>
</ul>

<ul>
  <li><a href="http://disclojure.org/archive/">Disclojure official blog</a></li>
</ul>

<h2 id="editor-integration">Editor integration</h2>

<ul>
  <li>
    <p><a href="https://github.com/clojure/tools.nrepl">nREPL</a></p>
  </li>
  <li>
    <p><a href="https://github.com/kingtim/nrepl.el">nREPL with Emacs</a></p>
  </li>
  <li>
    <p><a href="https://github.com/overtone/emacs-live">Emacs-live</a></p>
  </li>
</ul>

<h2 id="puzzles">Puzzles</h2>

<ul>
  <li>
    <p><a href="http://www.4clojure.com">4clojure</a> 4Clojure is a resource to help fledgling clojurians learn the language through interactive problems.</p>
  </li>
  <li>
    <p><a href="https://github.com/dcluna/4clj-el">4clojure in Emacs</a></p>
  </li>
</ul>

<h2 id="server-monitoring">Server monitoring</h2>

<ul>
  <li><a href="http://riemann.io">Riemann</a> Riemann aggregates events from your servers and applications with a powerful stream processing language.</li>
</ul>

<iframe src="http://player.vimeo.com/video/38377415" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/38377415">Kyle Kingsbury - Riemann</a> from <a href="http://vimeo.com/user8874650">Boundary</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/andrewvc/engulf">Engulf</a> Distributed HTTP load tester, written in Clojure and Javascript.</li>
</ul>

<h2 id="networking-and-html-related-stuffs">Networking and HTML related stuffs</h2>

<ul>
  <li>
    <p><a href="https://github.com/neotyk/http.async.client">http.async.client</a> Async Http Client - Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/aleph">Aleph</a> Aleph is a Clojure framework for asynchronous communication, built on top of Netty and Lamina.</p>
  </li>
  <li>
    <p><a href="http://http-kit.org/index.html">Http-Kit</a> HTTP Kit is a minimalist, efficient, Ring-compatible HTTP client/server for Clojure. It uses a event-driven architecture to support highly concurrent a/synchronous web applications.</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/compojure">Compojure</a> A concise routing DSL for Ring/Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/aphyr/jepsen">Jepsen</a> Call Me Maybe: simulating network partitions in DBs</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/hiccup">Hiccup</a> Fast library for rendering HTML in Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/Prismatic/plumbing">Plumbing</a> Graph is a simple and declarative way to specify a structured computation, which is easy to analyze, change, compose, and monitor</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/lamina">Lamina</a> Lamina is for describing and analyzing streams of data. It provides a rich set of operators for dealing with these unrealized values, both individually and collectively.</p>
  </li>
</ul>

<h2 id="testing">Testing</h2>

<ul>
  <li><a href="https://github.com/marick/Midje/">Midje</a> </li>
</ul>

<h2 id="data-processing">Data processing</h2>

<ul>
  <li><a href="https://github.com/liebke/incanter">Incanter</a> Incanter is a Clojure-based, R-like statistical computing and graphics environment for the JVM.</li>
</ul>

<ul>
  <li><a href="https://github.com/r0man/svm-clj">svm-clj</a></li>
</ul>

<ul>
  <li><a href="https://github.com/dakrone/clojure-opennlp">Clojure OpenNLP</a></li>
</ul>

<h2 id="arts">Arts</h2>

<ul>
  <li><a href="http://overtone.github.io">Overtone</a> Overtone is an open source audio environment designed to explore new musical ideas from synthesis and sampling to instrument building, live-coding and collaborative jamming.</li>
</ul>

<iframe src="http://player.vimeo.com/video/22798433" width="500" height="331" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/22798433">Quick Intro to Live Programming with Overtone</a> from <a href="http://vimeo.com/user568137">Sam Aaron</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/quil/quil">Quil drawing library</a></li>
</ul>

<h2 id="misc">Misc</h2>

<ul>
  <li><a href="https://github.com/fogus/marginalia">Marginalia</a> Literate programming</li>
</ul>

<ul>
  <li><a href="http://sqlkorma.com">SQLKorma</a></li>
</ul>

<ul>
  <li><a href="https://github.com/hugoduncan/criterium">Criterium</a> Benchmarking library for Clojure</li>
</ul>

<ul>
  <li><a href="https://github.com/bbatsov/clojure-style-guide">Clojure style guide</a></li>
</ul>

<ul>
  <li><a href="https://github.com/flatland/classlojure">classlojure</a> Advanced class loading for clojure</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LibSVM on Mac OSX]]></title>
    <link href="http://www.idryman.org/blog/2013/05/21/libsvm-on-mac-osx/"/>
    <updated>2013-05-21T11:51:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/21/libsvm-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Here are the basic steps to install libSVM on Mac OSX.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install gnuplot
</span><span class="line">brew install qt4
</span><span class="line">brew install libsvm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Installing <code>libsvm</code> itself in system path is easy, however hombrew does not include demo-data, python/java integration, or other goodies. The finally installation in homebrew only consists these files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">libsvm
</span><span class="line">libsvm/3.17
</span><span class="line">libsvm/3.17/bin
</span><span class="line">libsvm/3.17/bin/svm-predict
</span><span class="line">libsvm/3.17/bin/svm-scale
</span><span class="line">libsvm/3.17/bin/svm-train
</span><span class="line">libsvm/3.17/COPYRIGHT
</span><span class="line">libsvm/3.17/include
</span><span class="line">libsvm/3.17/include/svm.h
</span><span class="line">libsvm/3.17/INSTALL_RECEIPT.json
</span><span class="line">libsvm/3.17/lib
</span><span class="line">libsvm/3.17/lib/libsvm.2.dylib
</span><span class="line">libsvm/3.17/lib/libsvm.dylib
</span><span class="line">libsvm/3.17/README
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In this post, I’ll show you how to modify some Makefiles and create mac specific binaries.</p>

<!--more-->

<h2 id="python-java-or-gui-applications-qt">Python, java, or GUI applications (Qt)</h2>

<p>First, fetch the source code of <code>libsvm</code>, and compile it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -LO http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz
</span><span class="line">tar xzvpf libsvm+tar.gz
</span><span class="line"><span class="nb">cd </span>libsvm-3.17
</span><span class="line">make
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="svm-toy-gui">SVM-Toy (GUI)</h3>

<p>Now, goto <code>svm-toy/qt</code> directory. Change the CFLAGS and MOC variable in the <code>Makefile</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="err">CXX?</span> <span class="err">=</span> <span class="err">g++</span>
</span><span class="line">
</span><span class="line"><span class="nv">CFLAGS</span> <span class="o">=</span> -Wall -O3 -I<span class="k">$(</span>INCLUDE<span class="k">)</span> -I<span class="k">$(</span>INCLUDE<span class="k">)</span>/QtGui -framework QtCore -framework QtGui -F/usr/local/Cellar/qt/4.8.4/lib/
</span><span class="line"><span class="nv">INCLUDE</span> <span class="o">=</span> /usr/local/Cellar/qt/4.8.4/include/
</span><span class="line"><span class="nv">MOC</span> <span class="o">=</span> moc
</span><span class="line">
</span><span class="line">svm-toy: svm-toy.cpp svm-toy.moc ../../svm.o
</span><span class="line">	<span class="k">$(</span>CXX<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> svm-toy.cpp ../../svm.o -o svm-toy
</span><span class="line">
</span><span class="line">svm-toy.moc: svm-toy.cpp
</span><span class="line">	<span class="k">$(</span>MOC<span class="k">)</span> svm-toy.cpp -o svm-toy.moc
</span><span class="line">
</span><span class="line">../../svm.o: ../../svm.cpp ../../svm.h
</span><span class="line">	make -C ../.. svm.o
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">	rm -f *~ svm-toy svm-toy.moc ../../svm.o
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then <code>make</code>. The compile step should run successfully. Try the program <code>./svm-toy</code>, press <strong>load</strong> button and select a demo svm-file (heart_scale for example), then press <strong>run</strong>, you should see the result!</p>

<p><img src="http://www.idryman.org/images/select_heart_scale.png" alt="Select heart_scale" />
<img src="http://www.idryman.org/images/svm_toy.png" alt="svm toy" /></p>

<h3 id="python-interface">Python interface</h3>

<p>To use the python interface, just export the <code>PYTHONPATH</code> variable to where python utility fuction located at.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>libsvm-3.17/python
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;export PYTHONPATH=\$PYTHONPATH:$(pwd)&quot;</span> &gt;&gt; ~/.bash_profile
</span><span class="line"><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then read the README file in the same directory, and try out the example usage of python interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs and PDF]]></title>
    <link href="http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/"/>
    <updated>2013-05-20T22:07:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/20/emacs-and-pdf</id>
    <content type="html"><![CDATA[<p>Emacs has a built-in pdf viewer named <code>doc-view-mode</code>. It require ghostscript to convert the pdf files. On my OSX 10.8 laptop, I use <code>ghostscript 9.07 (2013-02-14)</code> version, installed by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install ghostscript
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="screen-shot">screen shot</h3>

<p><img src="http://www.idryman.org/images/emacs/emacs-docview.png" alt="Screen shot" /></p>

<h3 id="usage-and-configs">Usage and configs</h3>

<p>Using docview is pretty simple, just use your emacs to open the file and it’s done. I added two keyboard macro to help me navigate the PDF.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="c1">;; view docs</span>
</span><span class="line"><span class="p">(</span><span class="nf">fset</span> <span class="ss">&#39;doc-prev</span> <span class="s">&quot;\C-xo\C-x[\C-xo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">fset</span> <span class="ss">&#39;doc-next</span> <span class="s">&quot;\C-xo\C-x]\C-xo&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;M-[&quot;</span><span class="p">)</span> <span class="ss">&#39;doc-prev</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;M-]&quot;</span><span class="p">)</span> <span class="ss">&#39;doc-next</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The keybindings is only for two windows layout. You can use <code>M-[</code> or <code>M-]</code> to navigate the pages while your cursor is in another window. So that you can write your notes and navigate without leaving your notes! Pretty neat, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs W3m]]></title>
    <link href="http://www.idryman.org/blog/2013/05/20/emacs-w3m/"/>
    <updated>2013-05-20T21:18:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/20/emacs-w3m</id>
    <content type="html"><![CDATA[<p>This year I switched from vim to emacs. The reason is quite simple, I want to try different things, that’s all. Emacs is a highly configurable editor that you can use it to read emails, chat on irc, read pdf files, or whatever you can imagine. One of the most useful plugin is using <code>emacs-w3m</code> to browse websites.</p>

<!--more-->

<h3 id="install">Install</h3>

<p>Emacs-w3m is an old package, luckily the latest package still functions well :D</p>

<p>This installation guide is mac specific, but you can replace the first command to other platform-specific package installer. I use Mac OSX 10.8, and the latest homebrew until May 15, 2013. In your shell, type in the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install w3m
</span><span class="line">mkdir -p ~/.emacs.d/vendor
</span><span class="line"><span class="nb">cd</span> ~/.emacs.d/vendor
</span><span class="line">cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot login
</span><span class="line">cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m
</span><span class="line">
</span><span class="line"><span class="nb">cd </span>emacs-w3m
</span><span class="line">autoconf
</span><span class="line">make
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, in your <code>.emacs</code>,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;load-path</span> <span class="s">&quot;~/.emacs.d/vendor/emacs-w3m/&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;w3m-load</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s all you need. :)</p>

<p><img src="http://www.idryman.org/images/emacs/emacs-w3m.png" alt="emacs-w3m" /></p>

<h3 id="other-settings">Other settings</h3>

<p>If you want to open url links in w3m from org files, you can use the following setting, reference to <a href="http://www.emacswiki.org/emacs/BrowseUrl#toc26">emacs wiki post</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">defadvice</span> <span class="nv">org-open-at-point</span> <span class="p">(</span><span class="nf">around</span> <span class="nv">org-open-at-point-choose-browser</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">browse-url-browser-function</span>
</span><span class="line">         <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">equal</span> <span class="p">(</span><span class="nf">ad-get-arg</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
</span><span class="line">                <span class="ss">&#39;browse-url-generic</span><span class="p">)</span>
</span><span class="line">               <span class="p">((</span><span class="nf">equal</span> <span class="p">(</span><span class="nf">ad-get-arg</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
</span><span class="line">                <span class="ss">&#39;choose-browser</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nf">t</span>
</span><span class="line">                <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">url</span> <span class="nv">&amp;optional</span> <span class="nv">new</span><span class="p">)</span>
</span><span class="line">                  <span class="p">(</span><span class="nf">w3m-browse-url</span> <span class="nv">url</span> <span class="nv">t</span><span class="p">)))</span>
</span><span class="line">               <span class="p">)))</span>
</span><span class="line">    <span class="nv">ad-do-it</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you want more from <code>emacs-w3m</code>, check out <a href="http://www.emacswiki.org/emacs/emacs-w3m">EmacsWiki: emacs-w3m</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing swank.js]]></title>
    <link href="http://www.idryman.org/blog/2013/03/23/installing-swank-dot-js/"/>
    <updated>2013-03-23T08:05:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/03/23/installing-swank-dot-js</id>
    <content type="html"><![CDATA[<p>People say that emacs is the most extendable editor in the world; however, I didn’t really understand how powerful it is until one of it extension <strong>Swank.js</strong> blowed my mind. Take a look at this awesome screen cast produced by <a href="http://emacsrocks.com">emacs rocks</a>.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/qwtVtcQQfqc" frameborder="0" allowfullscreen=""></iframe>

<!--more-->

<p>Awesome, is it? However, installing <code>swank.js</code> is really nontrivial. As a result, I want to share my note on setting up <code>swank.js</code> on my machine.</p>

<h2 id="system-information">System information</h2>

<ul>
  <li>Mac OSX 10.8</li>
  <li>Emacs 24.3</li>
  <li>package manager: <a href="http://mxcl.github.com/homebrew/">homebrew</a></li>
  <li>C compiler: Apple LLVM version 4.2 (clang-425.0.27) (based on LLVM 3.2svn) Target: x86_64-apple-darwin12.3.0</li>
</ul>

<p>My Emacs is installed via <a href="http://mxcl.github.com/homebrew/">homebrew</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">brew install emacs --cocoa
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="installation-steps">Installation steps</h2>

<h3 id="section">1.</h3>
<p>Setting up emacs ecosystem. In <code>~/.emacs</code> or <code>~/.emacs.d/init.el</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class="line">  <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span> <span class="o">.</span> <span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class="line"><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Remember to evaluate the buffer <code>M-x eval-buffer</code>.</p>

<h3 id="section-1">2.</h3>
<p><code>node.js</code>, <code>npm</code>, and <code>swank-js</code> server.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">brew install npm
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/share/npm/bin:$PATH&quot;</span>    <span class="c"># put this in .bash_profile</span>
</span><span class="line">npm install -g swank-js
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">3.</h3>
<p>Setting up <code>slime</code> (lisp-emacs protocol)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">brew install sbcl
</span><span class="line"><span class="nb">cd</span> ~/.emacs.d/
</span><span class="line">git clone https://github.com/antifuchs/slime.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In <code>.emacs</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;load-path</span> <span class="s">&quot;~/.emacs.d/slime&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">inferior-lisp-program</span> <span class="s">&quot;/usr/local/bin/sbcl&quot;</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;slime</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">slime-setup</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-3">4.</h3>
<p>Install <code>swank.js</code> dependencies in emacs:</p>

<pre><code>M-x package-install exec-path-from-shell
M-x package-install js2-mode
M-x package-install slime
M-x package-install slime-js
M-x package-isntall js2-refactor
M-x package-install ac-slime
</code></pre>

<h3 id="section-4">5.</h3>
<p>Useful configurations written by <a href="https://github.com/magnars">Magnar Sveen</a> (author of <a href="http://emacsrocks.com">emacs rocks</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nb">cd</span> ~/.emacs.d/
</span><span class="line">curl -LO https://raw.github.com/magnars/.emacs.d/master/setup-slime-js.el
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">6.</h3>
<p>Final configurations in <code>.emacs</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="c1">;; swank-js settings</span>
</span><span class="line"><span class="p">(</span><span class="nf">autoload</span> <span class="ss">&#39;js2-mode</span> <span class="s">&quot;js2-mode&quot;</span> <span class="nv">nil</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;auto-mode-alist</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;\\.js$&quot;</span> <span class="o">.</span> <span class="nv">js2-mode</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="err">[</span><span class="nv">f5</span><span class="err">]</span> <span class="ss">&#39;slime-js-reload</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;js2-mode-hook</span>
</span><span class="line">          <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
</span><span class="line">            <span class="p">(</span><span class="nf">slime-js-minor-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">load-file</span> <span class="s">&quot;~/.emacs.d/setup-slime-js.el&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="usage">Usage</h2>

<p>First, you need a real server running at port 3000. You can do that either using <code>python -m SimpleHTTPServer 3000</code> or other server programs like Ruby on Rails. You can change the default port setting by overwritten the variable <code>slime-js-target-url</code> in your <code>.emacs</code>.</p>

<p>Next, use the command <code>M-x slime-js-jack-in-browser</code> in emacs. It should open up Chrome in your workspace. However, my Chrome browser didn’t work well with <code>swank-js</code>; an alternative solution is to open <code>localhost:8009</code> in safari. It worked for me anyway. Now, you should see that emacs shows a prompt like this:</p>

<pre><code>; SLIME 2013-03-12
Remote attached: (browser) Safari6.0
 
NODE&gt; 
</code></pre>

<p>Type in <code>alert("hello world!")</code> and press enter. You should see your browser pop up an alert window with <strong>hello world</strong>, and that’s it! You’ve successfully installed <code>swank.js</code>!!</p>

<p><img src="http://www.idryman.org/images/emacs/swank-js-screenshot-50.png" alt="Swank JS Screenshot" /></p>

<p>Wow, it’s really complicated. I can’t remember it unless I write it down.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://github.com/swank-js/swank-js">Swank JS</a></li>
  <li><a href="https://github.com/antifuchs/slime">Slime github mirror</a></li>
  <li><a href="https://github.com/magnars/.emacs.d/blob/master/setup-slime-js.el">Setup slime js</a></li>
  <li><a href="http://emacsrocks.com/e11.html">Emacs Rocks discussions</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Python on OSX Mountain Lion (updated at May 21, 2013)]]></title>
    <link href="http://www.idryman.org/blog/2013/03/13/python-setup-on-mac-osx/"/>
    <updated>2013-03-13T08:47:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/03/13/python-setup-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Setting up programming environment is frustrating for newcomers. Although it is much easier than it was before, it’s still worth it to take note.</p>

<!--more-->

<h2 id="apple-developer-tools">1. Apple developer tools</h2>

<p>Not only the python development but all kinds of programming tasks on OSX require Apple developer tools. The instruction is easy; you download XCode from Mac AppStore, then you download <em>Command Line Tools</em> in the Downloads menu from the XCode Preference panel.</p>

<h2 id="homebrew">2. Homebrew</h2>

<p>Next, install OSX most popular package manager <a href="http://mxcl.github.com/homebrew/">homebrew</a>. Just copy and paste this command in the terminal.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If it shows an error about user permission, do the following</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /usr/local
</span><span class="line">sudo chown -R USER_NAME <span class="nb">local</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and setup environment variables in <code>~/.bash_profile</code> (if the file does not exist, create one)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;~/bin:/usr/local/share/python:/usr/local/bin:$PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now you can install the followings with <em>homebrew</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">source</span> ~/.bash_profile
</span><span class="line">brew install python --with-brewed-openssl
</span><span class="line">brew install gfortran
</span><span class="line">brew install freetype
</span><span class="line">brew install zmq
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Years before Mountain Lion, I used to install fortran via <a href="http://hpc.sourceforge.net">High Performance Computing for Mac OSX</a>, but it doesn’t work well with homebrew. Now it’s best to install everything with <em>homebrew</em>.</p>

<h2 id="python-virtualenv">3. Python Virtualenv</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pip install virtualenv
</span><span class="line">mkdir ~/.virtualenvs ~/.pip
</span><span class="line"><span class="nb">export </span><span class="nv">VIRTUALENV_DISTRIBUTE</span><span class="o">=</span><span class="nb">true</span>
</span><span class="line"><span class="nb">export </span><span class="nv">PIP_VIRTUALENV_BASE</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
</span><span class="line"><span class="nb">export </span><span class="nv">PIP_REQUIRE_VIRTUALENV</span><span class="o">=</span><span class="nb">true</span>
</span><span class="line"><span class="nb">export </span><span class="nv">PIP_DOWNLOAD_CACHE</span><span class="o">=</span><span class="nv">$HOME</span>/.pip/cache
</span><span class="line">
</span><span class="line">cat <span class="s">&lt;&lt;END &gt;&gt; ~/.bash_profile</span>
</span><span class="line"><span class="s"># virtualenv should use Distribute instead of legacy setuptools</span>
</span><span class="line"><span class="s">export VIRTUALENV_DISTRIBUTE=true</span>
</span><span class="line"><span class="s"># Centralized location for new virtual environments</span>
</span><span class="line"><span class="s">export PIP_VIRTUALENV_BASE=$HOME/.virtualenvs</span>
</span><span class="line"><span class="s"># pip should only run if there is a virtualenv currently activated</span>
</span><span class="line"><span class="s">export PIP_REQUIRE_VIRTUALENV=true</span>
</span><span class="line"><span class="s"># cache pip-installed packages to avoid re-downloading</span>
</span><span class="line"><span class="s">export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache</span>
</span><span class="line"><span class="s">END</span>
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> ~/.virtualenvs
</span><span class="line">virtualenv data-scientists
</span><span class="line"><span class="nb">source </span>data-scientists/bin/activate
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;source $HOME/.virtualenvs/data-scientists/bin/activate&quot;</span> &gt;&gt; ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, if you type <code>which pip</code> it should print <code>/Users/YOUR_HOME/.virtualenvs/data-scientists/bin/pip</code>.</p>

<p>Install scipy, numpy, ipython, and matplot.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pip install numpy
</span><span class="line">pip install scipy
</span><span class="line">pip install ipython
</span><span class="line">pip install matplotlib
</span><span class="line">pip install pandas
</span><span class="line">pip install tornado
</span><span class="line">pip install pyzmq
</span><span class="line">pip install ipython
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, install opencv</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew tap homebrew/science
</span><span class="line">brew install opencv
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you want a additional nice GUI application for ipython, you can download it from <a href="https://github.com/liyanage/ipython-notebook#readme">IPython Notebook</a>.</p>

<p><img src="http://www.idryman.org/images/ipython_notebook.png" alt="ipython notebook" /></p>

<h2 id="trouble-shooting">Trouble shooting</h2>

<p>Sometimes homebrew has trouble with fetching the source code. If you found it is stuck on downloading the files, do the following</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install -v opencv
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It will show the URL of the file it is going to download. Stop the command with ctrl-c, paste the URL to your browser and download it. After the download is complete, move the file to <code>/Library/Cache/Homebrew</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mv OpenCV-2.4.4a.tar.bz2 /Library/Caches/Homebrew/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Continue the installation by</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install opencv
</span><span class="line">cmake -DCMAKE_INSTALL_PREFIX:PATH<span class="o">=</span>/usr . <span class="o">&amp;&amp;</span> make all install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="reference">Reference</h2>
<ol>
  <li><a href="http://hackercodex.com/guide/python-virtualenv-on-mac-osx-mountain-lion-10.8/">Python and Virtualenv on Mac OSX Mountain Lion 10.8 - Hacker Codex</a></li>
  <li><a href="http://www.calvinx.com/2012/11/02/virtualenv-with-numpy-scipy/">Virtualenv with numpy and scipy on Mac OSX - Calvin’s</a></li>
  <li><a href="https://pypi.python.org/pypi/virtualenv">Virtualenv 1.9.1 : Python Package Index</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep C: Understanding The Design of C Integer Types]]></title>
    <link href="http://www.idryman.org/blog/2012/12/03/the-design-of-c-integer-types/"/>
    <updated>2012-12-03T15:32:00-08:00</updated>
    <id>http://www.idryman.org/blog/2012/12/03/the-design-of-c-integer-types</id>
    <content type="html"><![CDATA[<p>C is a popular language designed for cross platform development. However, when
you dig deeper and deeper, you might get confused for the ambiguity of C
integer types. Take <code>char</code> for example, number of bits can be 8, 9, or more; the
minimum of a signed char is not strictly defined as -128 but <em>-127 or less</em>.</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center">name</th>
        <th style="text-align: center">express</th>
        <th style="text-align: center">value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center"><code>CHAR_BIT</code></td>
        <td style="text-align: center">Number of bits for a char object (byte)</td>
        <td style="text-align: center">8 or greater</td>
      </tr>
      <tr>
        <td style="text-align: center"><code>SCHAR_MIN</code></td>
        <td style="text-align: center">Minimum value for an object of type signed char</td>
        <td style="text-align: center">-127 or less</td>
      </tr>
      <tr>
        <td style="text-align: center"><code>SCHAR_MAX</code></td>
        <td style="text-align: center">Maximum value for an object of type signed char</td>
        <td style="text-align: center">127 or more</td>
      </tr>
      <tr>
        <td style="text-align: center"><code>UChar_MAX</code></td>
        <td style="text-align: center">Maximum value for an object of type unsigned char</td>
        <td style="text-align: center">255 or more</td>
      </tr>
    </tbody>
  </table>

</div>

<p>Why does C is designed like so? In this article I’ll discuss the design and the
sprits of C.</p>

<!--more-->

<h1 id="c-type-system">C type system</h1>

<p>Before we dig into C’s integer types, we need to understand what a <em>type</em>
actually means to C language.</p>

<blockquote>
  <p>The meaning of a value stored in an object or returned by a function is
determined by the <em>type</em> of the expression used to access it.</p>
  <footer><cite>C99 6.2.5</cite></footer>
</blockquote>

<p>In other words, a region of data storage (specified as <em>object</em> in C99) is
treated as some kinds of human readable value via the type system.</p>

<h2 id="float">Float</h2>

<p>Take <code>float</code> for example. A float number <code>1.0</code> is stored as <code>0x3f800000</code> on my
intel mac. <code>0x3f800000</code> can be a unsigned int, int, long, or other self defined
struct type as well. If we treated it as float, we use floating point register to
operate it; If we use other type, the register may be different, the arithmetic
operation may be different, too.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* cc -std=c99 -Wall play_float.c -o play_float */</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">object</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">object</span> <span class="o">|=</span> <span class="mi">127</span> <span class="o">&lt;&lt;</span> <span class="mi">23</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">float</span><span class="o">*</span> <span class="n">force_float</span> <span class="o">=</span> <span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">object</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;stored object is 0x%08x, float representation is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="o">*</span><span class="n">force_float</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="p">(</span><span class="o">*</span><span class="n">force_float</span><span class="p">)</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;++</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;stored object is 0x%08x, float representation is %f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">,</span> <span class="o">*</span><span class="n">force_float</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">stored</span> <span class="n">object</span> <span class="n">is</span> <span class="mh">0x3f800000</span><span class="p">,</span> <span class="kt">float</span> <span class="n">representation</span> <span class="n">is</span> <span class="mf">1.000000</span>
</span><span class="line"><span class="o">++</span>
</span><span class="line"><span class="n">stored</span> <span class="n">object</span> <span class="n">is</span> <span class="mh">0x40000000</span><span class="p">,</span> <span class="kt">float</span> <span class="n">representation</span> <span class="n">is</span> <span class="mf">2.000000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><a href="http://ridiculousfish.com">Ridiculous fish</a> has a great article 
<a href="http://ridiculousfish.com/blog/posts/float.html">about floating point representation</a>. That is a really interesting
article. I can’t explain better than he does.</p>

<h2 id="integer-promotion">Integer promotion</h2>

<p>C integer promotion is another example of same data storage, but different
arithmetic operation depend on type. On x86 machine, when you do arithmetic
operations (+, -, /, ==, etc.) on a <code>signed short</code>, it is <em>promoted</em> to an 
<code>int</code> with extended signed bit. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">short</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xffff</span><span class="p">;</span> <span class="c1">// 0xffff on disk space</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * loaded into register as 0xffffffff </span>
</span><span class="line"><span class="cm"> * calculated as 0xffffffff + 0x00000001</span>
</span><span class="line"><span class="cm"> * then store back to disk with possible </span>
</span><span class="line"><span class="cm"> * truncation</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you use <code>unsigned short</code> instead of <code>signed short</code> the arithmetic operation
would be different! It will loaded into register without signed bit. 
A unsigned short with <code>0xffff</code> stored on disk, would be <code>0x0000ffff</code> in
register. So, if you have a code like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">short</span>          <span class="n">a</span> <span class="o">=</span> <span class="mh">0xffff</span><span class="p">;</span>
</span><span class="line"><span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xffff</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">?</span> <span class="s">&quot;equal&quot;</span> <span class="o">:</span> <span class="s">&quot;not equal&quot;</span><span class="p">);</span>
</span><span class="line"><span class="cm">/* </span>
</span><span class="line"><span class="cm"> * not equal, because one is 0xffffffff and </span>
</span><span class="line"><span class="cm"> * another is 0x0000ffff in register</span>
</span><span class="line"><span class="cm"> */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It will not equal, even if they have the same disk storage! For further
discussion see my previous post <a href="http://www.idryman.org/blog/2012/11/21/integer-promotion/">Deep C: Integer Promotion</a>.</p>

<h1 id="the-spirit-of-c">The spirit of C</h1>

<p>Some of the facets of the spirit of C can be summarized in phrases like:</p>

<blockquote>
  <ul>
    <li>Trust the programmer.</li>
    <li>Don’t prevent the programmer from doing what needs to be done.</li>
    <li>Keep the language small and simple.</li>
    <li>Make it fast, even if it is not guaranteed to be portable.</li>
  </ul>

  <p>The last proverb needs a little explanation. The potential for efficient code
generation is one of the most important strengths of C. To help ensure that no
code explosion occurs for what appears to be a very simple operation, many
operations are defined to be how the target  machine’s hardware does it rather
than by a general abstract rule.</p>
  <footer><cite>C99 Rationale v5.10 page 3</cite></footer>
</blockquote>

<p>When you look at C spec, you should remember that C is designed <em>to run fast on
target machine</em>, not designed <em>for simplicity of abstract machine</em>. This design
goal directly affect the spec of C’s type system, since C’s type system is the
rule of how machine arithmetic logic unit operates on data.</p>

<h2 id="int">int</h2>

<p><code>int</code> is a special type, it is defined to be <strong>the fastest implementation to
represent an integer</strong>. It is mostly implemented to be the fastest register on
the machine. For 16-bit machine, it is 16-bit; for 24-bit machine, it is 24-bit;
for 32-bit machine, it is 32-bit; for 64-bit machine, well, the fastest register
is 32-bit, so the most seen implementation is 32-bit.</p>

<p>The size of <code>int</code> is also the size that integer promotion promotes to.
On 32-bit machine, smaller integers like 8-bit and 16-bit will promote to 32-bit
register when need to do calculations. On 16-bit machine, 16-bit integers don’t
do promotion, but 8-bit integers do.</p>

<h2 id="size-of-integer-types-in-limith">Size of integer types in <code>limit.h</code></h2>

<p>The numerical limits were, and still are, presented as <em>minimum maxima</em>. That is,
lower limit defined in SPEC, upper limits specified by the implementation. For
example, the minimum of a <code>signed short</code> is <code>-128</code> on modern two’s complement
machine. But on an one’s complement or sign-magnitude machine, the minimum value
of <code>signed short</code> can only be <code>-127</code>. Some of the limits are listed below:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: left">name</th>
        <th style="text-align: left">expresses</th>
        <th style="text-align: left">value</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: left">CHAR_BIT</td>
        <td style="text-align: left">Number of bits for a char object (byte) 8 or greater</td>
        <td style="text-align: left"> </td>
      </tr>
      <tr>
        <td style="text-align: left">SCHAR_MIN</td>
        <td style="text-align: left">Minimum value for an object of type signed char</td>
        <td style="text-align: left">-127 or less</td>
      </tr>
      <tr>
        <td style="text-align: left">SCHAR_MAX</td>
        <td style="text-align: left">Maximum value for an object of type signed char</td>
        <td style="text-align: left">127 or more</td>
      </tr>
      <tr>
        <td style="text-align: left">UCHAR_MAX</td>
        <td style="text-align: left">Maximum value for an object of type unsigned char</td>
        <td style="text-align: left">255 or more</td>
      </tr>
      <tr>
        <td style="text-align: left">CHAR_MIN</td>
        <td style="text-align: left">Minimum value for an object of type char</td>
        <td style="text-align: left">either SCHAR_MIN or 0</td>
      </tr>
      <tr>
        <td style="text-align: left">CHAR_MAX</td>
        <td style="text-align: left">Maximum value for an object of type char</td>
        <td style="text-align: left">either SCHAR_MAX or UCHAR_MAX</td>
      </tr>
      <tr>
        <td style="text-align: left">SHRT_MIN</td>
        <td style="text-align: left">Minimum value for an object of type short int</td>
        <td style="text-align: left">-32767 or less</td>
      </tr>
      <tr>
        <td style="text-align: left">SHRT_MAX</td>
        <td style="text-align: left">Maximum value for an object of type short int</td>
        <td style="text-align: left">32767 or greater</td>
      </tr>
      <tr>
        <td style="text-align: left">USHRT_MAX</td>
        <td style="text-align: left">Maximum value for an object of type unsigned short int</td>
        <td style="text-align: left">65535 or greater</td>
      </tr>
      <tr>
        <td style="text-align: left">LONG_MIN</td>
        <td style="text-align: left">Minimum value for an object of type long int</td>
        <td style="text-align: left">-2147483647 or less</td>
      </tr>
      <tr>
        <td style="text-align: left">LONG_MAX</td>
        <td style="text-align: left">Maximum value for an object of type long int</td>
        <td style="text-align: left">2147483647 or greater</td>
      </tr>
      <tr>
        <td style="text-align: left">ULONG_MAX</td>
        <td style="text-align: left">Maximum value for an object of type unsigned long int</td>
        <td style="text-align: left">4294967295 or greater</td>
      </tr>
    </tbody>
  </table>

</div>

<h1 id="summary">Summary</h1>

<p>The spirit of C targets on program speed instead of consistency of abstract
machine across different platforms. It makes us easy to write programs that run
fast for free, but the programmer have to take care to make the program
<strong>safe</strong>. For calculations that is sensitive to data limits, one should use
unambiguous type specifications like <code>int8_t</code>, <code>int32_t</code> specified in
<code>inttypes.h</code>, and check the bounds with <code>limits.h</code> and static analyzers.</p>

<h1 id="see-also">See also</h1>

<ul>
  <li><a href="http://www.open-std.org/jtc1/sc22/wg14">C99 specifications</a></li>
  <li><a href="http://www.open-std.org/jtc1/sc22/wg14">C99 rationale</a></li>
  <li><a href="http://www.unix.org/whitepapers/64bit.html">The UNIX system – 64bit and Data Size Neutrality</a></li>
  <li><a href="http://ridiculousfish.com/blog/posts/float.html">Ridiculous fish’s article on float</a></li>
  <li><a href="http://www.idryman.org/blog/2012/11/21/integer-promotion/">C Integer Promotion</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C ARC common pitfalls and best practices]]></title>
    <link href="http://www.idryman.org/blog/2012/11/22/arc-best-practices-and-pitfalls/"/>
    <updated>2012-11-22T09:28:00-08:00</updated>
    <id>http://www.idryman.org/blog/2012/11/22/arc-best-practices-and-pitfalls</id>
    <content type="html"><![CDATA[<p>Objective-C is a really cool programming language that is designed for Mac OSX and
iOS software development. TIOBE has announced November Haedline: <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">Objective-C on
its way to become “language of the year” again</a>. It is popular not only because
the platform, but also its great performance on mobile devices. Objective-C
featured in its manually memory management instead of garbage collection. Yet,
its not that <em>manual</em> in modern Objective-C. Apple introduced Automatic
Reference Counting, ARC, that inserts memory management code for you on compile
time. In most cases of Objective-C development, it JUST WORKS. However, it
is often confusing when you mix ARC code with Core Foundation objects (low level
C references on apple’s platform). Today, I’ll talk about pitfalls and concepts
of ARC especially when gluing CF objects with <strong>toll-free bridging</strong>.</p>

<!-- more -->

<h2 id="daily-arc">Daily ARC</h2>

<p>I’ll first make a quick go through of ARC in two major uses: Objective-C
properties and ARC type qualifiers. Then we’ll cut deep into memory management
of Core Foundation Framework.</p>

<h3 id="arc-and-objective-c-properties">ARC and Objective-C properties</h3>

<script language="javascript">
function toggleContent(){
    var link = document.getElementById("expand_link");
    var content = document.getElementById("expand_content");
    if (content.style.display == 'block') {
        content.style.display = 'none';
        link.innerHTML = "Expand my highlight of ARC best pracitices by @amattn";
    } else {
        content.style.display = 'block';
        link.innerHTML = "Toggle highlight";
    }
}
</script>

<p>It is really hard to write a new article about ARC without <a href="https://twitter.com/amattn">@amattn</a>’s
collection of <a href="http://amattn.com/2011/12/07/arc_best_practices.html">ARC Best Practices</a>. You can find the complete
best practices there, and below <a href="javascirpt:toggleContent()">link</a>
is my highlight of his article <sup id="fnref:foot"><a href="#fn:foot" rel="footnote">1</a></sup>:</p>

<p><a id="expand_link" href="javascript:toggleContent()"> Expand my highlight of ARC best pracitices by @amattn</a> </p>

<blockquote style="display: none;" id="expand_content" cite="http://amattn.com/2011/12/07/arc_best_practices.html">

  <ul>
    <li>object instance variables which needs to be retained should use <code>strong</code>.</li>
  </ul>

  <div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">id</span> <span class="n">childObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  <ul>
    <li>To break reference cycle, use <code>weak</code> <sup id="fnref:foot2"><a href="#fn:foot2" rel="footnote">2</a></sup>.</li>
  </ul>

  <div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="n">delegate</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="n">NSTimer</span> <span class="n">timer</span><span class="p">;</span> <span class="c1">// NSTimer retains target</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  <ul>
    <li>use <code>assign</code> for scalar properties</li>
  </ul>

  <div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">width</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">height</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  <ul>
    <li>use <code>copy</code> for immutable containers, strings and block. Avoid using mutable
containers in properties (<code>NSMutableArray</code>, for example.) If you use mutable
containers, use <code>strong</code>.</li>
  </ul>

  <div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">components</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span> <span class="n">job</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">badPatterns</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  <ul>
    <li>In dealloc
      <ul>
        <li>remove observers</li>
        <li>unregister notifications</li>
      </ul>
    </li>
    <li>IBOutlets should generally be <code>weak</code> except File’s Owner to top-level objects in
a nib file. If you set it to <code>strong</code>, you should set it to <code>nil</code> in
<code>-(void)viewDidUnload</code>.</li>
  </ul>

  <footer><cite><a href="http://amattn.com/2011/12/07/arc_best_practices.html"> ARC Best Practices</a></cite></footer>
</blockquote>

<h3 id="arc-specific-type-qualifiers">ARC specific type qualifiers</h3>

<p>About type qualifier rules, you can see my <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/">previous post</a>. There
are four ARC specific type qualifiers introduced by Apple:</p>

<ol>
  <li><code>__strong</code> is the default. An object remains <strong>alive</strong> as long as there is a strong
  pointer to it.</li>
  <li><code>__weak</code> specifies a reference that does not keep the referenced object alive. A
  weak reference is set to <code>nil</code> when there are no strong references to the object.</li>
  <li><code>__unsafe_unretained</code> specifies a reference that does not keep the referenced
  object alive and is not set to <code>nil</code> when there are no strong references to the
  object. If the object it references is deallocated, the pointer is left
  dangling.</li>
  <li><code>__autoreleasing</code> is used to denote arguments that are passed by reference <code>(id *)</code>
  and are autoreleased on return.</li>
</ol>

<p>Beware that ARC type qualifiers are used for POINTER TYPE. That is, you must put
the qualifier at the right hand side of the star. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">MyClass</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// correct</span>
</span><span class="line"><span class="n">MyClass</span> <span class="n">__weak</span> <span class="o">*</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong! May cause serious bugs!</span>
</span><span class="line"><span class="n">__weak</span> <span class="n">MyClass</span> <span class="o">*</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong!</span>
</span><span class="line">
</span><span class="line"><span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="c1">// correct, will expand to (See gcc manual of typeof)</span>
</span><span class="line"><span class="c1">// __weak (MyClass *) w_self = self;</span>
</span><span class="line">
</span><span class="line"><span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span> <span class="c1">// correct, its safer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might wonder that there is so many wrong format on the internet. But
[Apple officially] said so:</p>

<blockquote>
  <p>You should decorate variables correctly. When using qualifiers in an object
variable declaration, the correct format is:
<code>ClassName * qualifier variableName;</code></p>
</blockquote>

<h2 id="arc-and-toll-free-bridging">ARC and toll-free bridging</h2>

<p>The biggest problem of ARC occurs when you mix it with Core Foundation
references. The rules of thumb are</p>

<ul>
  <li>When you transfer an Objective-C object to a CF reference, you
retain it.</li>
  <li>When you transfer a CF reference to an Objective-C object, you
release it.</li>
  <li>It is dangerous if you didn’t change ownership of objects. Sometimes Clang
corrects it for you, sometimes don’t.</li>
  <li>There is no autorelease in Core Foundation, and you must follow the Core
Foundation memory management naming convention:
    <ul>
      <li>Those object returned from function with <code>Create</code> or <code>Copy</code>, you <strong>own</strong> the
object, thus you must release it.</li>
      <li>If the function name contains the word <code>Get</code>, you do not own the object. Do
not release it.</li>
    </ul>
  </li>
</ul>

<p>There are two ways to retain a CF object: a type casting like syntax
<code>(__bridge_retained)</code> or C function <code>CFBridgingRetain</code>.  Though clang show up
diagnostics to use the former syntax, I prefer to use the latter one because it
is easier to read for me. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">CFArrayRef</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">CFBridgingRetain</span><span class="p">(</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;abc&quot;</span><span class="p">,</span> <span class="s">@&quot;def&quot;</span><span class="p">,</span> <span class="err">@</span><span class="mf">3.14</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line"><span class="c1">// or CFArrayRef arr = (__bridge_retained CFArrayRef)@[...];</span>
</span><span class="line"><span class="c1">// do stuffs..</span>
</span><span class="line"><span class="n">CFRelease</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you get an object from Core Foundation with name containing <code>Create</code> or
<code>Copy</code>, use <code>(__bridge_transfer)</code> or <code>CFBridgingRelease</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">logFirstNameOfPerson:</span><span class="p">(</span><span class="n">ABRecordRef</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">ABRecordCopyValue</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">kABPersonFirstNameProperty</span><span class="p">));</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Person&#39;s first name: %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-in-toll-free-bridging">Pitfalls in toll-free bridging</h2>

<p>When you see a code like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Beware! It might crash at any time. Since we do not hold the reference of
UIColor, it would be released right after you create it! The CGColor it owns
would be released as well and thus cause a crash. There are three ways to fix
it:</p>

<ul>
  <li>Use <code>__autorelease</code> type qualifier. UIColor would be released at the end of
current run loop. It can fix the crash. I believe <a href="https://twitter.com/amattn">@amattn</a> is the first
one who discovered this solution.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">getFooColor</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use Core Foundation naming convention and change the owner ship to the
 receiver.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">fooColorCopy</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">CFRetain</span><span class="p">([</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span> <span class="n">fooColorCopy</span><span class="p">];</span>
</span><span class="line"><span class="c1">// do stuffs</span>
</span><span class="line"><span class="n">CFRelease</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Owns the CF object by self. If self is dealloced, the reference would still
cause a crash.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">getFooColor</span> <span class="p">{</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">myColor</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-in-block-and-arc">Pitfalls in block and ARC</h2>

<p>When you use a ivar in self owned block, it will implicitly contain self in your
block and thus cause a retain cycle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">id</span> <span class="n">child</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span> <span class="n">job</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">job</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">child</span> <span class="n">work</span><span class="p">];</span>
</span><span class="line">        <span class="c1">// will expand to [self-&gt;child work]</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The only way to implement this safely is to use weak reference of self, and
setup a strong reference to weak self only in the scope of this block. The
reason we need to use a strong reference in scope is weak reference can be zero
out at any time. We must claim we own the object when we are using it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">MyClass</span><span class="o">*</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">MyClass</span><span class="o">*</span> <span class="n">s_self</span> <span class="o">=</span> <span class="n">w_self</span><span class="p">;</span> <span class="c1">// self retained, but only in this scope!</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">s_self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">s_self</span><span class="o">-&gt;</span><span class="n">child</span> <span class="n">work</span><span class="p">];</span>
</span><span class="line">            <span class="c1">// do other stuffs</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-in-nserror">Pitfalls in NSError</h2>

<p>If you are implementing methods that take NSError, be sure to use the correct
format of type qualifier!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doStuffWithError:</span><span class="p">(</span><span class="n">NSError</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span> <span class="c1">// correct</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doStuffWithError:</span><span class="p">(</span><span class="n">__autoreleasing</span> <span class="n">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span> <span class="c1">// wrong!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, when you craete a NSError object, it is always best to declare it is
an autoreleasing object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">NSError</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// correct</span>
</span><span class="line"><span class="n">__autoreleasing</span> <span class="n">NSError</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// wrong</span>
</span><span class="line"><span class="n">NSError</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// Will be corrected by clang</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="summary">Summary</h2>

<p>ARC is handy, but not easy. When you facing complex memory ownership model,
wrting some testing code to know how retain count being managed is still a
recommanded pactice.  The below snippet is how I test retain count when mixing
CF object, block, and objective-c object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testCGColorRetainCount1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">s_ref</span><span class="p">;</span>
</span><span class="line">    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">        <span class="n">UIColor</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">shadowColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.12</span> <span class="nl">green:</span><span class="mf">0.12</span> <span class="nl">blue:</span><span class="mf">0.12</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class="line">        <span class="n">s_ref</span> <span class="o">=</span> <span class="n">shadowColor</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class="line">        <span class="n">CFRetain</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by us&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">CGColorRef</span><span class="p">(</span><span class="o">^</span><span class="n">strangeBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">CGColorCreateCopy</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">myCopy</span> <span class="o">=</span> <span class="n">strangeBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">2L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by block and us&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by block&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">myCopy</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by us&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myCopy</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope these helps! Comments and sharing are welcome!</p>

<div class="footnotes">
  <ol>
    <li id="fn:foot">
      <p>I didn’t reference back to @amattn’s ARC best practices when I first
post this article.  I am really sorry that I didn’t do it and I really
appreciate his pioneer work. I couldn’t write this article without his awesome
collection of how to write good ARC code.<a href="#fnref:foot" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:foot2">
      <p>Thanks to Tinghui’s comment that <code>NSTimer</code> should not be invalidated in
dealloc. <code>NSTimer</code> retains its target, so one should  use weak references if
the timer is a member of target’s property, else just leave it is fine.<a href="#fnref:foot2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep C: Integer Promotion]]></title>
    <link href="http://www.idryman.org/blog/2012/11/21/integer-promotion/"/>
    <updated>2012-11-21T14:15:00-08:00</updated>
    <id>http://www.idryman.org/blog/2012/11/21/integer-promotion</id>
    <content type="html"><![CDATA[<p>Almost every programmer has learned about C, and a lot of them use it for their
career. It is certainly one of the most popular programming languages on
<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE</a> (first place in November 2012). Yet, C can be really tricky and
behave unexpectedly sometimes. One of those dodgy side of C is <strong>integer
promotion</strong>. See the following example that illustrate the issue:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">;</span> <span class="c1">// true, or false?</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;C: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might think the output is <code>1</code>, yet the answer is <code>0</code>. Oops.</p>

<!--more-->

<h2 id="c99-spec">C99 SPEC</h2>

<p>In the prior implementation of K&amp;R and C89, arithmetic operands on <code>short</code>
and <code>char</code> fell into two major camps and may produce different results from the
above C snippet. In C99, integer promotion is clearly defined in following rule
(6.3.1.1):</p>

<blockquote>
  <p>If an int can represent all values of the original type, the value is converted
to an int; otherwise, it is converted to an unsigned int. These are called the
integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>

<p>Recall that the range of integer types:</p>

<ul>
  <li>signed char: -127 to 127</li>
  <li>unsigned char: 0 to 255</li>
  <li>signed short: -32767 to 32767</li>
  <li>unsigned short: 0 to 65535</li>
  <li>signed int: -2147483647 to 2147483647</li>
</ul>

<p>You can see that signed and unsigned char, short all can be represented in
signed int, so they are all converted to signed int when doing arithmetic
operations.</p>

<p>In the previous example, <code>unsigned char a = 0xff</code> is presenting <em>255</em>. However,
<code>char b = 0xff</code> is presenting <em>-1</em>. When both converted to int type, <code>a</code>
remains <em>255</em>, or <code>0x000000ff</code>; <code>b</code> will be <code>0xffffffff</code> which is <em>-1</em>
represented in int type. You can see how it works in this C snippet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;A: %08x, B: %08x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output would be:</p>

<pre><code>A: 000000ff, B: ffffffff
</code></pre>

<p>This is why the result of expression <code>a==b</code> is <code>0</code>.</p>

<h2 id="understand-it-at-assembly-level">Understand it at assembly level</h2>

<p>When I first understood integer promotion rules, I got even more confused: why
is this rule so awkward? To understand why it is designed like so, you must dig
into compiled assembly code.</p>

<p>Let’s start with an easy example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The compiled assembly is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="nf">movl</span>    <span class="no">$0</span><span class="p">,</span> <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>        <span class="c"># The return value of main is 0</span>
</span><span class="line"><span class="nf">movb</span>    <span class="no">$-1</span><span class="p">,</span> <span class="p">-</span><span class="mi">5</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>       <span class="c"># unsigned char a = 0xff;</span>
</span><span class="line"><span class="nf">movb</span>    <span class="no">$-1</span><span class="p">,</span> <span class="p">-</span><span class="mi">6</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>       <span class="c"># char b = 0xff;</span>
</span><span class="line"><span class="nf">movzbl</span>  <span class="p">-</span><span class="mi">5</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%eax</span>
</span><span class="line"><span class="nf">movsbl</span>  <span class="p">-</span><span class="mi">6</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%ecx</span>
</span><span class="line"><span class="nf">addl</span>    <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%ecx</span>          <span class="c"># int c = a + b</span>
</span><span class="line"><span class="nf">movl</span>    <span class="nv">%ecx</span><span class="p">,</span> <span class="p">-</span><span class="mi">12</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>     <span class="c"># store c onto the stack</span>
</span><span class="line"><span class="nf">movl</span>    <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%eax</span>
</span><span class="line"><span class="nf">popq</span>    <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">ret</span>                         <span class="c"># return value 0 from eax</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you are not familiar with GAS syntax, you can check out 
<a href="http://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax">X86 Assembly/GAS Syntax</a>. GAS assembly instructions are generally suffixed
with the letters “b”, “s”, “w”, “l”, “q” or “t” to determine what size operand
is being manipulated.</p>

<ul>
  <li>b = byte (8 bit)</li>
  <li>s = short (16 bit integer) or single (32-bit floating point)</li>
  <li>w = word (16 bit)</li>
  <li>l = long (32 bit integer or 64-bit floating point)</li>
  <li>q = quad (64 bit)</li>
  <li>t = ten bytes (80-bit floating point)</li>
</ul>

<p>GAS convention is to push parameter from left-to-right. For instance, 
<code>movl $0, -4(%rbp)</code> means to move <code>0x00000000</code> to address <code>-4(%rbp)</code>.</p>

<p>The instruction <code>movzbl</code> means moving a byte to long (32 bit int) with <strong>zero
fill</strong>.  <code>movzbl -5(%rbp), %eax</code> take <code>0xff</code> to <code>%eax</code> and fill the rest with
zero.  <code>%eax</code> is now <code>0x000000ff</code>.</p>

<p>The instruction <code>movsbl</code> means moving a byte to long with <strong>signed fill</strong>. 
<code>movsbl -6(%rbp), %ecx</code> take <code>0xff</code> to <code>%eax</code> and fill the rest with signed
value, which will cause <code>%ecx</code> to be <code>0xffffffff</code>.  Finally, <code>addl %eax, %ecx</code>
do the add operation, and <code>movl %ecx, -12(%rbp)</code> store the result onto the
stack.</p>

<p>Now, you understand that integer promotion is a rule how C types being mapped
directly to machine instructions. All arithmetics operands are applied to
smaller integers <strong>after</strong> they are transformed into int with <em>signed</em> or
<em>unsigned fill</em>.  You can think it this way: though <code>short</code> and <code>char</code> are stored
in one or two byte, they are treated as int when you use it with arithmetic
operations. The rule how they are transformed to int is called <strong>integer
promotion</strong>.</p>

<h2 id="summary">Summary</h2>

<p>Typically, CPUs are fastest at operating on integers of their native integer
size. On x86, 32-bit arithmetics are can be twice as fast compare to 16-bit
operands. C is a language focused on performance, so it will do the integer
promotion to make the program as fast as possible. Though, you need to
keep the integer promotion rule in mind to prevent some integer overflow
vulnerability issues.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dance with Objective-C dynamic types]]></title>
    <link href="http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types/"/>
    <updated>2012-10-30T13:58:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types</id>
    <content type="html"><![CDATA[<p>Objective-C is a super set of C language. The entire language is a preprocessor
skin added to C language and a powerful runtime system. With this runtime system,
one can have full featured object oriented programming interface, functional
programming environment, and magical dynamic typing system. </p>

<p>In this post, I’ll go through common tasks you can do with Objective-C typing
system, including querying normal <code>NSObject</code> types, packing static type with
<code>NSValue</code>, testing core foundation references, and validating if a pointer is a
valid object pointer.</p>

<!-- more -->

<h2 id="objective-c-type-system">Objective-C type system</h2>

<p>To determine an Objective-C object type is super easy. Just use <code>isKindOfClass</code>
method and it is done.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testObjectType:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// do something with number</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// do something with values...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why do we need this mechanism? One application is implementing key value coding
with some known range of types. For example, Core Animation listed these
properties are animatable:</p>

<ul>
  <li>anchorPoint</li>
  <li>backgroundColor</li>
  <li>backgroundFilters</li>
  <li>borderColor</li>
  <li>borderWidth</li>
  <li>bounds</li>
  <li>compositingFilter</li>
  <li>contents</li>
  <li>contentsRect</li>
  <li>cornerRadius</li>
  <li>doubleSided</li>
  <li>filters</li>
  <li>frame</li>
  <li>hidden</li>
  <li>mask</li>
  <li>masksToBounds</li>
  <li>opacity</li>
  <li>position</li>
  <li>shadowColor</li>
  <li>shadowOffset</li>
  <li>shadowOpacity</li>
  <li>shadowRadius</li>
  <li>sublayers</li>
  <li>sublayerTransform</li>
  <li>transform</li>
  <li>zPosition</li>
</ul>

<p>These properties are categorized in several types includes <code>CGPoint</code>, <code>CGRect</code>,
<code>CGFloat</code>, <code>CGImageRef</code>, <code>CGColorRef</code>, and even <code>BOOL</code>. Each kind of type
require individual implementation to operate its value. Thankfully,
Objective C dynamic type system allows us to pass-in the value with generic type
<code>id</code> and determine the actual type at runtime. <code>id</code> is simply a void
pointer. The objective c object itself is a struct which have a <code>isa</code> pointer
points to actual class which defines its instance variables, methods, and class
inheritances.</p>

<h2 id="packaging-static-c-types-with-nsvalue">Packaging static C types with NSValue</h2>

<p>Objective C is a skin language based on C, so it is very often to use C types
like int, float, pointer to struct…etc. However, these static types violate
Objective-C’s dynamic typing idioms. Apple introduced <code>NSValue</code> as a container
for a single C or Objective-C data item. It can hold any C types such as int,
float, char, pointers, structures, and object ids. It not only wrap the item
into an Objective-C object, but also encode the type information of the original
object.</p>

<p>To create an <code>NSValue</code> object, you pass it a pointer to the item, along with the
encoded type information generated by <code>@encode()</code> keyword.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGPoint</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">NSValue</span> <span class="o">*</span> <span class="n">originValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithBytes:</span><span class="o">&amp;</span><span class="n">origin</span> <span class="nl">objCType:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>@encode()</code> is a compiler directive which can accepts all types that can be used
as an argument of C <code>sizeof()</code> operator. <code>@encode()</code> returns a <code>const char*</code>
string encoding that type. The encoding is specified in 
<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective-C runtime type encodings</a>.</p>

<p>To illustrate this, see the following examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span> <span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{^^i}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{CGPoint=ff}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;^{CGColor=}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">NSObject</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{NSObject=#}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With this encoded type information, it only takes few steps to determine which
type it is at runtime:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSValue</span><span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span> <span class="n">obj</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="nf">strcmp</span><span class="p">([</span><span class="n">value</span> <span class="n">objCType</span><span class="p">],</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGPoint</span> <span class="n">origin</span><span class="p">;</span>
</span><span class="line">        <span class="p">[</span><span class="n">value</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">origin</span><span class="p">];</span>
</span><span class="line">        <span class="c1">// do things with origin...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="uikit-addition-to-nsvalue">UIKit addition to NSValue</h3>

<p>UIKit added a <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/NSValue_UIKit_Additions/Reference/Reference.html">category for NSValue</a> to represent iOS related
geometry-based data. You can use these method instead of encoding <code>CGPoint</code>,
<code>CGRect</code>, and else every time.</p>

<h2 id="bridging-with-core-foundation-objects">Bridging with Core Foundation objects</h2>

<p>Though <code>NSValue</code> covers many kind of types, in practice there are still some
types don’t fit this solution for dynamic typing. More specifically,
<code>CGColorRef</code>, <code>CGImageRef</code> and other Core Foundation types that can be treated
as Objective-C object through <a href="http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free briding</a> are the types we
don’t pack with <code>NSValue</code>.</p>

<p>A core foundation references is also a void pointer as same as <code>id</code> is.
To find out the type of an unknown <code>CFTypeRef</code>, you can query it with C function
<code>CFGetTypeID</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">),</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">    <span class="n">CGImageRef</span> <span class="n">imgRef</span> <span class="o">=</span> <span class="n">CFBridgingRetain</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// do things with imgRef</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">imgRef</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A CFTypeRef marked as <code>id</code> type can also accept basic objective C messages like
<code>isKindOfType:</code>. Hence testing an <code>id</code> typed object is quite safe as long as it
is either a <code>NSObject</code>, <code>NSValue</code>, <code>CFTypeRef</code>, <code>CGColorRef</code> or any other
Objective-C object/Core Foundation reference.</p>

<h2 id="testing-if-a-pointer-is-a-valid-nsobject">Testing if a pointer is a valid NSObject</h2>

<p>There is a blog post on Cocoa with love about
<a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a>.
In my point of view, programmer <em>should</em> pass in a valid object for sure. If it
is not a valid object, just let it crash.</p>

<h2 id="puting-it-all-together">Puting it all together</h2>

<p>This piece of code is part of my project <a href="https://github.com/dryman/FCAnimationFactory">FCAnimationFactory</a> for the
purpose of interpolating different kinds of value with respect to their types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>FCAnimationFactory.m  </span><a href="https://github.com/dryman/FCAnimationFactory/blob/master/FCEasingAnimation/FCAnimationFactory.m">link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">float</span><span class="p">))</span><span class="nf">makeValueScalingBlockFromValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">fromValue</span> <span class="nf">ToValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">toValue</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">fromValue</span><span class="o">==</span><span class="nb">nil</span> <span class="o">||</span> <span class="n">toValue</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span> <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;fromValue and toValue must not be nil&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">fromValue</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * single float is handled in NSNumber</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">v1</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">v2</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">diffValue</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">            <span class="kt">float</span> <span class="n">result</span> <span class="o">=</span> <span class="n">factor</span><span class="o">*</span><span class="n">diffValue</span> <span class="o">+</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">            <span class="k">return</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">result</span><span class="p">];</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * NSValue handles CGPoint, CGSize, CGRect, and CATransform3D</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">objCType</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span> <span class="n">objCType</span><span class="p">];</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGPoint</span> <span class="n">pt0</span><span class="p">,</span> <span class="n">pt1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">pt0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">pt1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGSize</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGSize</span> <span class="n">size0</span><span class="p">,</span> <span class="n">size1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">size0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">size1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGSize:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGRect</span> <span class="n">rect0</span><span class="p">,</span> <span class="n">rect1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">rect0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">rect1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CATransform3D type currently not supported&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;Unknown NSValue type %s&quot;</span><span class="p">,</span><span class="n">objCType</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGColorGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">fromColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">fromValue</span><span class="p">;</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">toColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">toValue</span><span class="p">;</span>
</span><span class="line">            <span class="n">size_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">CGColorGetNumberOfComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class="line">            <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">fromComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class="line">            <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">toComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">toColor</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">CGFloat</span> <span class="n">newComp</span><span class="p">[</span><span class="n">num</span><span class="p">];</span> <span class="c1">// same as malloca</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">newComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">toComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="n">factor</span> <span class="o">+</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">retColor</span> <span class="o">=</span> <span class="n">CGColorCreate</span><span class="p">(</span><span class="n">CGColorGetColorSpace</span><span class="p">(</span><span class="n">fromColor</span><span class="p">),</span> <span class="n">newComp</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">retColor</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CGImageRef should be handled in another class&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;value type unknown&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;};</span>    <span class="c1">// turn off compiler warnings</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>It is amazing that a langauge so close to C can create such a rich type system
without byte code, VM, or complex sybol tricks (like what C++ does). Though
handling differnt types can be a bit painful sometimes, but it brings powerful
polimorphsm to the language. Thus programmer can create highly abstract API
and framework with differnt data types that share the same methods.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a></li>
  <li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective C type encoding</a></li>
  <li><a href="http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/Inspecting.html">Inspecting core foundation object</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
