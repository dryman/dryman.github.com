<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2014-12-02T17:24:56-08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Writing 64 bit assembly on Mac OS X]]></title>
    <link href="http://www.idryman.org/blog/2014/12/02/writing-64-bit-assembly-on-mac-os-x/"/>
    <updated>2014-12-02T17:18:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/12/02/writing-64-bit-assembly-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Many assembly tutorials and books doesn’t cover
how to write a simple assembly program on the Mac OS X.
Here are some baby steps that can help people who
are also interested in assembly to get started
easier.</p>

<!--more-->

<h2 id="mach-o-file-format">Mach-O file format</h2>

<p>To get started on writing OSX assembly, you need to
understand OSX executable file format – the <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html">Mach-O
file format</a>. It’s similar to ELF, but instead
of sections of data, bss, and text, it has segments that
contains sections.</p>

<p>A common assembly in Linux like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="na">.section</span> <span class="no">data</span>
</span><span class="line"><span class="na">.section</span> <span class="no">text</span>
</span><span class="line"><span class="c"># your code here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>would translate into this in Mach-O</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="c"># __DATA is segment, __data is section</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="c"># __TEXT is segment, __text is section</span>
</span><span class="line">
</span><span class="line"><span class="c"># your code here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mach-O is pretty flexible. You can embed a
<code>cstring</code> section in your <code>__TEXT</code> segment instead
of putting it in <code>__DATA,__data</code>. Actually this is
the default behavior that compiler does on your Mac.</p>

<h2 id="hello-assembly">Hello Assembly</h2>

<p>Now we know how to translate common linux assembly
to mac, let’s write a basic program – do a system call
with an exit code.</p>

<p>On x86 you do a system call by <code>int x80</code> instruction. On
64 bit machine, you do this by <code>syscall</code>. Here’s the sample
code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># Simple exit program</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span> <span class="c"># system call $1 with $0x2000000 offset</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%ebx</span>         <span class="c"># set the exit code to be $0</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can compile the code by the following commands:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">as exit.s -o exit.o
</span><span class="line">ld exit.o -e _main -o <span class="nb">exit</span>     <span class="c"># -e specify the entry point of the executable</span>
</span><span class="line">./exit
</span><span class="line"><span class="nb">echo</span> <span class="nv">$?</span> <span class="c"># show last return code, should show 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To perform a system call, you put the system call number in
<code>%eax</code>, and put the actual exit code to <code>%ebx</code>. The system
call number can be found in <code>/usr/include/sys/syscall.h</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define	SYS_syscall        0</span>
</span><span class="line"><span class="cp">#define	SYS_exit           1</span>
</span><span class="line"><span class="cp">#define	SYS_fork           2</span>
</span><span class="line"><span class="cp">#define	SYS_read           3</span>
</span><span class="line"><span class="cp">#define	SYS_write          4</span>
</span><span class="line"><span class="cp">#define	SYS_open           5</span>
</span><span class="line"><span class="cp">#define	SYS_close          6</span>
</span><span class="line"><span class="cp">#define	SYS_wait4          7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The system call number need to add an offset <code>0x2000000</code>, because
OSX has 4 different class of system calls. You can find the reference
here <a href="http://www.opensource.apple.com/source/xnu/xnu-1699.26.8/osfmk/mach/i386/syscall_sw.h">XNU syscall</a>.</p>

<h2 id="system-call-by-using-wrapper-functions">System call by using wrapper functions</h2>

<p>If you’re like me that had no assembly background, you might
feel that <code>syscall</code> is alien to you. In C, we usually use
wrapper functions to perform the call:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># exit2.s</span>
</span><span class="line"><span class="c"># To compile it, type the following in shell</span>
</span><span class="line"><span class="c"># as exit2.s -o exit2.o</span>
</span><span class="line"><span class="c"># ld exit2.o -e _main -lc -o exit</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$5</span><span class="p">,</span> <span class="nv">%edi</span>        <span class="c"># exit(5);</span>
</span><span class="line">  <span class="nf">callq</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we call a <code>libc</code> function instead of performing a system
call. To do this we need to link to libc by passing <code>-lc</code>
to linker <code>ld</code>. There are several things you need to do
to make a function call. </p>

<h3 id="call-frame">Call frame</h3>

<p>We need to prepare the stack before we call a function. Else
you would probably get a segmentation fault.
The values in <code>%rsp</code> and <code>%rbp</code> is used to preserve frame information.
To maintain the stack, you first push the base register <code>%rbp</code>
onto the stack by <code>pushq %rbp</code>;
then you copy the stack register <code>%rsp</code> to the base register.</p>

<p>If you have local variables, you subtract <code>%rsp</code> for space.
Remember, stack grows down and heap grows up.
When releasing the frame, you add the space back to <code>%rsp</code>.</p>

<p>A live cycle of a function would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># function start</span>
</span><span class="line"><span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">subq</span> <span class="no">$4</span><span class="p">,</span> <span class="nv">%rsp</span>      <span class="c"># reserve 4 bytes on stack</span>
</span><span class="line"><span class="nf">movl</span> <span class="no">$5</span><span class="p">,</span> <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>  <span class="c"># We usually use base register instead</span>
</span><span class="line">                   <span class="c"># of stack pointer to access data</span>
</span><span class="line"><span class="nf">addq</span> <span class="no">$4</span><span class="p">,</span> <span class="nv">%rsp</span>      <span class="c"># release the stack</span>
</span><span class="line"><span class="nf">popq</span> <span class="nv">%rbp</span>          <span class="c"># restore old %rbp</span>
</span><span class="line"><span class="nf">retq</span>               <span class="c"># function ends</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The stack size can be set at link time. On OSX, below are the
example parameters you can pass to <code>ld</code> to set the stack size:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ld stack.o -stack_size 0x4000 -stack_addr 0x7fff5fbff000 -lc -e _start -o stack
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When setting the stack size, you also have to set the stack address.
On the <a href="http://www.x86-64.org/documentation/abi.pdf">System V Application Binary Interface</a> it says</p>

<blockquote>
  <p>Although the AMD64 architecture uses 64-bit pointers, implementations
are only required to handle 48-bit addresses. Therefore, conforming processes may only
use addresses from <code>0x00000000 00000000</code> to <code>0x00007fff ffffffff</code></p>
</blockquote>

<p>I don’t know a good answer of how to chose a good stack address.
I just copy whatever a normal code produces.</p>

<h3 id="parameters-passing">Parameters passing</h3>

<p>The rules for parameter passing can be found in <a href="http://www.x86-64.org/documentation/abi.pdf">System V
Application Binary Interface</a>:</p>

<ol>
  <li>If the class is MEMORY, pass the argument on the stack.
If the size of an object is larger than four eight bytes, or
it contains unaligned fields, it has class MEMORY.</li>
  <li>If the class is INTEGER, the next available register of the sequence <code>%rdi</code>,
<code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code>, <code>%r8</code> and <code>%r9</code> is used.</li>
  <li>If the class is SSE, the next available vector register is used, the registers
are taken in the order from <code>%xmm0</code> to <code>%xmm7</code>.</li>
</ol>

<p>The <code>exit()</code> function only need one integer parameter, therefore we put
the exit code in <code>%edi</code>. Since the parameter is type <code>int</code>, we use 32 bit
variance of register <code>%rdi</code> and the instruction is <code>movl</code> (mov long) instead
of <code>movq</code> (mov quad).</p>

<h2 id="hello-world">Hello world</h2>

<p>Now we know the basics of how to perform
a system call, and how to call a function.
Let’s write a hello world program.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># hello_asm.s</span>
</span><span class="line"><span class="c"># as hello_asm.s -o hello_asm.o</span>
</span><span class="line"><span class="c"># ld hello_asm.o -e _main -o hello_asm</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="nl">str:</span>
</span><span class="line">  <span class="na">.asciz</span> <span class="s">&quot;Hello world!\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000004</span><span class="p">,</span> <span class="nv">%eax</span>           <span class="c"># preparing system call 4</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$1</span><span class="p">,</span> <span class="nv">%edi</span>                    <span class="c"># STDOUT file descriptor is 1</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">str@GOTPCREL</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rsi</span>   <span class="c"># The value to print</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">$100</span><span class="p">,</span> <span class="nv">%rdx</span>                 <span class="c"># the size of the value to print</span>
</span><span class="line">  <span class="nf">syscall</span>
</span><span class="line">
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%ebx</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span>           <span class="c"># exit 0</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The global variable <code>str</code> can only be accessed through GOT
(Global Offset Table). And the GOT needs to be access from
the instruction pointer <code>%rip</code>. For more curious you can
read <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/x86_64_code.html">Mach-O Programming Topics: x86-64 Code Model</a>.</p>

<p>The register used for <code>syscall</code> parameters are a little
bit different than the normal function call.
It uses <code>%rdi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%r10</code>, <code>%r8</code> and <code>%r9</code>.
You cannot pass more than 6 parameters in <code>syscall</code>, nor
can you put the parameters on the stack.</p>

<h2 id="hello-world-using-printf">Hello world using printf</h2>

<p>Now you know the basics of assembly. A hello world
example using printf should be trivial to read:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># hello_asm2.s</span>
</span><span class="line"><span class="c"># as hello_asm2.s -o hello_asm2.o</span>
</span><span class="line"><span class="c"># ld hello_asm2.o -e _main -lc -o hello_asm2</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="nl">str:</span>
</span><span class="line">  <span class="na">.asciz</span> <span class="s">&quot;Hello world!\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">str@GOTPCREL</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class="line">  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class="line">  <span class="no">callq</span> <span class="no">_printf</span>
</span><span class="line">  <span class="nf">popq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>The 64 bit assembly looks more vague than the tutorials
written in X86 assembly. Once you know these basic differences,
it’s easy for you to learn assembly in depth on your own,
even if the material is designed for x86. I highly recommend
the book “Programming from the ground up”. It is well written
for self study purpose.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html">OS X ABI Mach-O File Format Reference</a></li>
  <li><a href="http://www.x86-64.org/documentation/abi.pdf">System V Application Binary Interface</a></li>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/000-Introduction/introduction.html#//apple_ref/doc/uid/TP30000851-CH211-SW1">OS X Assembler Reference</a> Assembler Directives</li>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40001827-SW1">Mach-O Programming Topics</a></li>
  <li><a href="http://www.objc.io/issue-6/mach-o-executables.html">Mach-O Executables - Build Tools</a></li>
  <li>Book: Programming from the ground up.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integer Promotion Part 2]]></title>
    <link href="http://www.idryman.org/blog/2014/11/29/integer-promotion-part-2/"/>
    <updated>2014-11-29T18:34:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/11/29/integer-promotion-part-2</id>
    <content type="html"><![CDATA[<p>It’s been a while since I wrote my last article. I recently read an old book <a href="http://www.amazon.com/Expert-Programming-Peter-van-Linden/dp/0131774298">Expert C Programming</a> and found there are many C langauge details that I never think about. Review and rethink what C integer promotion rules meant to C is one of the interesting topic that I want to share with you.</p>

<!--more-->

<h2 id="what-is-type-systems">What is type systems?</h2>

<p>Type is the methods that interpret and process your data.
Sounds familiar to OOP? Definiing a class <strong>IS</strong> defining a method.
In C, expressions on different data type produces different
instructions. What instruction to generate? Depends on the data
type. (int is different than float, for example).</p>

<p>A chunk of data in memory or register can mean anything
on a CPU. The type system defines how operators works on different types.
Given the example below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="mh">0x00007ffffffffcc0</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// =&gt; 0x00007fffffffffcc4 because the type &quot;pointer to int&quot;</span>
</span><span class="line">                <span class="c1">// defines the multiplier of the offset is 4</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">q</span><span class="p">;</span> <span class="c1">// Invalid in C type system.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When adding an integer to a pointer, the compiler knows the offset multiplier
by the type of the pointer points to. If <code>p</code> where defined as <code>char* p</code>, then
the multiplier would be 1. Also, the <code>+</code> operator only make sense to add an
offset to a pointer, therefore adding two pointer together is invalid in C
syntax.</p>

<h2 id="review-c-integer-promotion-rules">Review C integer promotion rules</h2>

<p>I wrote an article about C integer promotion 2 years ago: <a href="http://www.idryman.org/blog/2012/11/21/integer-promotion/">Deep C: Integer Promotion</a>. The standard integer promotion rules in C99 is listed below.</p>

<blockquote>
  <p>If an int can represent all values of the original type, the value is converted
to an int; otherwise, it is converted to an unsigned int. These are called the
integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>

<p>This is called <em>value preserving</em>. On machine level, the arithmetic works best on
a whole register (or 32 bit register). Remember that C’s philosophy is to make
your program runs as fast as possible, so it loads your small data chunk into
the whole register, then do the calculation.</p>

<p>However, things worked differently on K&amp;R C. It’s was defined as <em>unsigned
preserving</em>. When mixing a signed and unsigned integer, the result is unsigned
type. Below is the example copied from <strong>Expert C Programming</strong> book.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">if</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;C dialect after ANSI C, including C89, C99, and after</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Pre ANSI C (K&amp;R) dialect. -1 is treated as unsigned value 0xFFFFFFFF and thus greater than 1 ! </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mixing-unsigned-and-signed-integer-in-modern-c">Mixing unsigned and signed integer in modern C</h2>

<p>Although most of the time C will preserve the value of the type for you,
you can still get surprising result. When the signed integer can’t hold
the unsigned value, everything is converted to unsigned integer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-1 is less than 4</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-1 is treated as 0xffffffff. Because sizeof returns size_t which is an unsigned int</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This program will execute the <strong>else</strong> branch and print:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="o">-</span><span class="mi">1</span> <span class="n">is</span> <span class="n">treated</span> <span class="n">as</span> <span class="mh">0xffffffff</span><span class="p">.</span> <span class="n">Because</span> <span class="k">sizeof</span> <span class="n">returns</span> <span class="kt">size_t</span> <span class="n">which</span> <span class="n">is</span> <span class="n">an</span> <span class="kt">unsigned</span> <span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Always be careful when you mix unsigned and signed integer in expressions.
When possible, type cast it to signed int. C is designed to make program fast,
but not safe for beginners. Additional checks would create a lot of overhead
in the runtime, so the developer need to know the system and language well
to avoid shooting at their own foot. Another possible reason may be that 
the original C developers were all operating system writers and compiler 
writers. Therefore, the mappings between Assembly and C langauge is
straight forward to them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Hadoop-FieldFormat]]></title>
    <link href="http://www.idryman.org/blog/2014/03/06/introducing-hadoop-fieldformat/"/>
    <updated>2014-03-06T14:25:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/03/06/introducing-hadoop-fieldformat</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/dryman/hadoop-fieldformat">Hadoop FieldFormat</a> is the new library I released that is flexible and robust for reading and setting schema information in Hadoop map-reduce program. We use this library to record the meta information for the data, and improve the semantic when building large map-reduce pipe-lined tasks. The project is quite stable now and we already used it in our production system. Any suggestion is welcome!</p>

<!--more-->

<h2 id="the-problem">The problem</h2>

<p>The map-reduce architecture is really good at aggregating large dataset and ad-hoc perform computation; however, when the number dataset increases, it becomes difficult to manage the meta data of those dataset. The biggest issue is data by default is semi-structured; there’s no schema or header information to tell you the semantic of the data. When working in raw map-reduce, this is typical code that I write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">map</span> <span class="o">(</span><span class="n">LongWritable</span> <span class="n">keyIn</span><span class="o">,</span> <span class="n">Text</span> <span class="n">valIn</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class="line">    <span class="n">String</span> <span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">valIn</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\t&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line">    <span class="n">String</span> <span class="n">cookie</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class="line">    <span class="n">String</span> <span class="n">ua</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There’s no semantic associated with the data, so you can only hard code the semantic and hope the fields order will stay the same forever. If the upstream process inserted a new field to this dataset, your program may still run, but produce wrong result that might be difficult to catch by downstream program.</p>

<p>The same issue happens in <a href="https://pig.apache.org">Pig</a> and <a href="http://www.cascading.org">cascading</a> too. Pig, for example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tomcat</span> <span class="o">=</span> <span class="n">LOAD</span> <span class="err">&#39;</span><span class="n">catalina</span><span class="o">.</span><span class="na">out</span><span class="err">&#39;</span> <span class="n">USING</span> <span class="n">PigStorage</span><span class="o">(</span><span class="sc">&#39;\t&#39;</span><span class="o">)</span> <span class="n">AS</span> <span class="o">(</span><span class="n">ip</span><span class="o">,</span> <span class="n">cookie</span><span class="o">,</span> <span class="n">query</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="n">time</span><span class="o">,</span> <span class="n">ua</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the input format changed, you’ll need to be very careful to make sure all the downstream process are corrected. Moreover, if you want to run map-reduce across different versions of dataset, you may not be able to run it because the order of the fields is different!</p>

<h3 id="hive-and-hcatalog">Hive and HCatalog</h3>

<p>Goal: lightweight semantic attached to the data</p>

<h2 id="eat-our-own-dog-food----introducing-hadoop-fieldformat">Eat our own dog food – introducing Hadoop FieldFormat!</h2>

<p>You may be surprised by how simple the solution is. First, answer this:
Where does hadoop store the meta data for map-reduce jobs? <code>_logs</code>.</p>

<p>What hadoop FieldFormat does is reading and writing header.tsv. Also, provides
a convenient API in java to access the data field using the java Map interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop performance tuning best practices]]></title>
    <link href="http://www.idryman.org/blog/2014/03/05/hadoop-performance-tuning-best-practices/"/>
    <updated>2014-03-05T11:17:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/03/05/hadoop-performance-tuning-best-practices</id>
    <content type="html"><![CDATA[<p>I have been working on Hadoop in production for a while. Here are some of the performance tuning tips I learned from work. Many of my tasks had performance improved over 50% in general. Those guide lines work perfectly in my work place; hope it can help you as well.</p>

<!--more-->

<h2 id="tuning-hadoop-run-time-parameters">Tuning Hadoop run-time parameters</h2>

<p>Hadoop provides a set of options on cpu, memory, disk, and network for performance tuning. Most hadoop tasks are not cpu bounded, what we usually look into is to optimize usage of memory and disk spills.</p>

<h3 id="memory-tuning">Memory tuning</h3>

<p>The general rule for memory tuning is: use as much memory as you can, but don’t trigger swapping. The parameter you can set for task memory is <code>mapred.child.java.opts</code>. You can put it in your configuration file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.child.java.opts<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>-Xms1024M -Xmx2048M<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can tune the best parameters for memory by monitoring memory usage on server using Ganglia, Cloudera manager, or Nagios. Cloudera has a slide focused on memory usage tuning, the link is <a href="http://www.slideshare.net/Hadoop_Summit/optimizing-mapreduce-job-performance">here</a></p>

<h3 id="minimize-the-map-disk-spill">Minimize the map disk spill</h3>

<p>Disk IO is usually the performance bottleneck. There are a lot of parameters you can tune for minimizing spilling. What I use the most are:</p>

<ul>
  <li>compress mapper output</li>
  <li>Use 70% of heap memory for spill buffer in mapper</li>
</ul>

<p>In your configuration file, you can write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.compress.map.output<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.map.output.compression.codec<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>com.hadoop.compression.lzo.LzoCodec<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>io.sort.mb<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>800<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Although you can further tune reducer buffer, mapper sort record percent, and various of stuff, I found the best thing to do is reduce the mapper output size. Most of the time, the performance is fast enough after I refactor the mapper to output as little data as possible. For more information, check the same <a href="http://www.slideshare.net/Hadoop_Summit/optimizing-mapreduce-job-performance">cloudera’s performance tuning guide</a>.</p>

<h3 id="tuning-mapper-tasks">Tuning mapper tasks</h3>

<p>Unlike reducer tasks which you can specify the number of reducer, the number of mapper tasks is set implicitly. The tuning goal for the mapper is control the amount of mapper and the size of each job. When dealing with large files, hadoop split the file in to smaller chunk so that mapper can run it in parallel. However, the initializing new mapper job usually takes few seconds, this is also a overhead that we want to minimize. These are the things you can do:</p>

<ul>
  <li>
    <p>Reuse jvm task</p>
  </li>
  <li>
    <p>If the average mapper running time is shorter than one minute, you can increase the <code>mapred.min.split.size</code>, so that less mappers are allocated in slot and thus reduces the mapper initializing overhead.</p>
  </li>
  <li>
    <p>Use Combine file input format for bunch of smaller files. I had an implementation that also use <code>mapred.min.split.size</code> to implicitly control the mapper size. You can find the <a href="https://github.com/dryman/Hadoop-CombineFileInputFormat">project on github</a>. The explanation of the project can be found on <a href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1/">my blog</a>.</p>
  </li>
</ul>

<p>The configuration file would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.job.reuse.jvm.num.tasks<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>-1<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.max.split.size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>268435456<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.min.split.size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>134217728<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="use-configuration-file-and-command-line-arguments-to-set-parameters">Use configuration file and command line arguments to set parameters</h3>

<p>When I first started on hadoop, I setup those parameters in java program, but it is so hard-coded and inflexible. Thankfully, hadoop provides <code>Tool</code> interface and <code>ToolRunner</code> class to parse those parameters for you. Here’s a sample program:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleJob</span> <span class="kd">extends</span> <span class="n">Configured</span> <span class="kd">implements</span> <span class="n">Tool</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">ExampleJob</span><span class="o">(),</span> <span class="n">args</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">getConf</span><span class="o">();</span>
</span><span class="line">    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class="line">    <span class="c1">// configure the rest of the job</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your main class implements the interface, your program can take the config file as input:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar ExampleJob-0.0.1.jar ExampleJob -conf my-conf.xml arg0 arg1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can even pass extra parameters through command line like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar ExampleJob-0.0.1.jar ExampleJob -Dmapred.reduce.tasks<span class="o">=</span>20 arg0 arg1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setting configuration as run-time arguments make you easier to test different parameters without recompile the program.</p>

<h2 id="tuning-application-specific-performance">Tuning application-specific performance</h2>

<p>Beyond general hadoop parameter setup, you can optimize your map-reduce program using some small tricks. Here are the tricks that I used the most.</p>

<h3 id="minimize-your-mapper-output">Minimize your mapper output</h3>

<p>Recall that mapper spill size is a serious performance bottleneck. The size of mapper output is sensitive to disk IO, network IO, and memory sensitive on shuffle phase. Minimizing the mapper output can improve the general performance a lot.</p>

<p>To do this, you can try the following</p>

<ol>
  <li>
    <p>Filter out records on mapper side, not on reducer side.</p>
  </li>
  <li>
    <p>Use minimal data to form your map output key and map output value.</p>
  </li>
  <li>
    <p>Extends <code>BinaryComparable</code> interface or use Text for your map output key</p>
  </li>
  <li>
    <p>Set mapper output to be compressed</p>
  </li>
</ol>

<p>Above all the optimization tips, I found this make the biggest change to many of my tasks, unless I can’t find a smaller key to reduce the mapper output. </p>

<h3 id="balancing-reducers-loading">Balancing reducer’s loading</h3>

<p>Another common performance issue that you might encounter is unbalanced reducer tasks: one or several reducer takes most of the output from mapper and ran extremely long compare to other reducers.</p>

<p>To solve this, you can either</p>

<ol>
  <li>
    <p>Implement a better hash function in <code>Partitioner</code> class.</p>
  </li>
  <li>
    <p>If you know what keys are causing the issue, you can write a preprocess job to separate keys using MultipleOutputs. Then use another map-reduce job to process the special keys that cause the problem.</p>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>It’s fun to write raw map-reduce jobs because it gives you more precise control over performance tuning. If you already experienced hive or pig, I encourage you to try how to optimize the same job using raw map-reduce. You can find a lot of performance gain and more space to tune the performance. For more curious, you can also check the <a href="http://www.slideshare.net/ydn/hadoop-summit-2010-tuning-hadoop-to-deliver-performance-to-your-application">Yahoo’s tuning hadoop performance guides</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Jasper Server on Linux]]></title>
    <link href="http://www.idryman.org/blog/2014/02/26/setting-up-jasper-server-on-linux/"/>
    <updated>2014-02-26T13:26:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/02/26/setting-up-jasper-server-on-linux</id>
    <content type="html"><![CDATA[<p>Jasper is one of the standard report generator in the industry. However, setting up Jasper is a pain of ass. This post is my note for setting up Jasper on Linux, in case I have to do it again in the future…</p>

<!--more-->

<h3 id="setting-up-an-ubuntu-instance-on-amazon">Setting up an Ubuntu instance on Amazon</h3>

<p>The first thing you need to do when you launch an Amazon EC2 instance is add the hostname to hosts. Copy <code>/etc/hostname</code> to <code>/etc/hosts</code> like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">127.0.0.1 localhost ip-10-0-0-1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>ip-10-0-0-1</code> is the host name in your <code>/etc/hostname</code>. You’ll need this setup else the jasper installation script might fail.</p>

<h3 id="update-aptitude-and-install-postgresql">Update aptitude and install PostgresQL</h3>

<p>This section is referenced from <a href="https://help.ubuntu.com/10.04/serverguide/postgresql.html">Ubuntu PostgreSQL HowTo</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apt-get update
</span><span class="line"><span class="nv">$ </span>sudo apt-get install postgresql
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After Postgres is installed, you’ll need to setup its permission and password, so that jasper can connect to it.</p>

<p>First, enable postgres to be reached from localhost. Edit <code>/etc/postgresql/9.1/main/postgresql.conf</code> and un-comment this line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">listen_addresses</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, login to postgres using postgres user:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo -u postgres psql
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should be able to login without using password. Now, update your password:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">postgres</span><span class="o">=#</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="n">postgres</span> <span class="k">with</span> <span class="k">encrypted</span> <span class="n">password</span> <span class="s1">&#39;your_password&#39;</span><span class="p">;</span>
</span><span class="line"><span class="n">postgres</span><span class="o">=#</span> <span class="err">\</span><span class="n">q</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After setting the password, edit the file <code>/etc/postgresql/9.1/main/pg_hba.conf</code> and set the <code>postgres</code> user to use md5 authentication.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">local</span>   <span class="k">all</span>             <span class="n">postgres</span>                                <span class="n">md5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, restart the postgres server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo /etc/init.d/postgres restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="download-and-run-jasperserver-install-script">Download and run jasperserver install script</h3>

<p>Got to <a href="http://community.jaspersoft.com/download">Jaspersoft Downloads</a> and get the <code>jasperreports-server-cp-5.5.0-linux-x64-installer.run</code> script. In our case we run it as super user.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>chmod a+x jasperreports-server-cp-5.5.0-linux-x64-installer.run
</span><span class="line"><span class="nv">$ </span>sudo ./jasperreports-server-cp-5.5.0-linux-x64-installer.run
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You’ll go through several steps:</p>

<ol>
  <li>
    <p>It prints out the license. Read through it and select <code>y</code> when the prompt <code>Do you accept this license? [y/n]: y</code> shows up.</p>
  </li>
  <li>
    <p>It asks you to choose complete install or custom install. Choose <strong>custom</strong>.</p>
  </li>
  <li>
    <p>It asks you to select a folder for install destination. I chose the default <code>/opt/jasperreports-server-cp-5.5.0</code>.</p>
  </li>
  <li>
    <p>It asks you to use bundled tomcat or existing one. Choose <strong>bundled</strong>.</p>
  </li>
  <li>
    <p>It asks you to use bundled postgres or existing one. Choose <strong>existing</strong>.</p>
  </li>
  <li>
    <p>It asks you the Tomcat server port. Just use the default <code>8080</code>.</p>
  </li>
  <li>
    <p>It asks you postgres binary location. Use <code>/usr/lib/postgresql/9.1/bin</code>.</p>
  </li>
  <li>
    <p>It asks you host and port for postgres server. Use the default <code>127.0.0.1</code> and <code>5432</code>.</p>
  </li>
  <li>
    <p>It asks you the postgres password. Type it in.</p>
  </li>
  <li>
    <p>It asks you whether to install sample database and sample reports. Pick whatever you like.</p>
  </li>
  <li>
    <p>Proceed the rest of the installation.</p>
  </li>
</ol>

<p>Once you’re done with the installation. You can start the tomcat server using the command</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="setup-plsql-query-adapter">Setup plsql query adapter</h3>

<p>This section is referenced to <a href="http://community.jaspersoft.com/wiki/no-query-executer-factory-registered-plsql-language-jasperserver-51">Jaspersoft wiki</a>. We found that when selecting query language as <code>plsql</code>, jasperserver rejects the uploaded report.</p>

<p>To solve the issue, you’ll need to extend jasperserver with this plugin: <a href="http://www.java2s.com/Code/Jar/j/Downloadjasperreportsextensions353jar.htm">jasperreports-extensions-3.5.3.jar</a>. Download the jar, and place it to <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/webapps/jasperserver/WEB-INF/lib/</code>.</p>

<p>Now, cd to <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/webapps/jasperserver/WEB-INF</code>, and add one line to <code>classes/jasperreports.properties</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">net.sf.jasperreports.query.executer.factory.plsql<span class="o">=</span>com.jaspersoft.jrx.query.PlSqlQueryExecuterFactory
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Edit <code>flows/queryBeans.xml</code>. Change the line <code>&lt;property name="queryLanguages" ref="queryLanguages"&gt;</code> to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;queryLanguages&quot;</span> <span class="na">ref=</span><span class="s">&quot;queryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;list&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>hql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">  <span class="nt">&lt;/list&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Edit <code>applicationContext.xml</code>. Search for <code>supportedQueryLanguages</code> and change it to the following.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;com.jaspersoft.jasperserver.api.engine.jasperreports.util.DataSourceServiceDefinition&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbcDataSourceServiceFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;supportedQueryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;set&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>SQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="c">&lt;!-- Add these two value lines for the Oracle PL/SQL Language --&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>PLSQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">        <span class="nt">&lt;/set&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/bean&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;com.jaspersoft.jasperserver.api.engine.jasperreports.util.DataSourceServiceDefinition&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;jndiJdbcDataSourceServiceFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;supportedQueryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;set&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>SQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="c">&lt;!-- Add these two value lines for the Oracle PL/SQL Language --&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>PLSQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="nt">&lt;/set&gt;</span>
</span><span class="line">        <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, restart the jasper server.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh stop
</span><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="increase-jasper-memory-usage">Increase Jasper memory usage</h3>

<p>More specifically, tomcat’s memory usage. The default memory setting is quite low and jasper is pretty in-responsive to user clicks. To change the setting, edit <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/scripts/ctl.sh</code> and change the two <code>JAVA_OPTS</code> to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;-server -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m -Xss2m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Relaunch your jasper server again. Now it should run more smoothly.</p>

<h2 id="conclusion">Conclusion</h2>

<p>ITS A PAIN TO RUN JASPER…</p>

<p>Thanks to all the people that wrote wiki and articles to help me out. I hope I’ll never need to set it up again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture path info in hadoop InputFormat class]]></title>
    <link href="http://www.idryman.org/blog/2014/01/27/capture-path-info-in-hadoop-inputformat-class/"/>
    <updated>2014-01-27T15:11:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/27/capture-path-info-in-hadoop-inputformat-class</id>
    <content type="html"><![CDATA[<p>On the last post I presented how to use Mapper context object to obtain Path information. This is a nice way to hack for ad-hoc jobs; however, it’s not really reusable and abstract. In this post, I’ll show you how to subclass <code>Text</code>, <code>TextInputFormat</code>, and <code>LineRecordReader</code> and create reusable components across all of your hadoop tasks.</p>

<!--more-->

<h2 id="input-workflow">Input WorkFlow</h2>

<p>Before we go through all the classes, let me show you how hadoop read the files in.</p>

<ol>
  <li>
    <p>By default, hadoop uses <code>TextInputFormat</code>, which inherits <code>FileInputFormat</code>, to process the input files.</p>
  </li>
  <li>
    <p><code>TextInputFormat</code> allocates <code>LineRecordReader</code> and passed it to <code>Task</code> runtime.</p>
  </li>
  <li>
    <p><code>Task</code> first initiates <code>LineRecordReader</code>, then wrap the <code>LineRecordReader</code> into <code>Context</code> object.</p>
  </li>
  <li>
    <p>In <code>Mapper</code> <code>run</code> methods, it calls the method <code>nextKeyValue()</code> in <code>Context</code>, and reads the <code>LongWritable key</code> from <code>context.getCurrentKey()</code> and <code>Text value</code> from <code>context.getCurrentValue()</code>. Those methods delegates to <code>LineRecordReader</code>’s methods <code>nextKeyValue()</code>, <code>getCurrentKey()</code>, and <code>getCurrentValue()</code>.</p>
  </li>
  <li>
    <p>Finally, <code>Mapper</code> passes the key-value pair to <code>map</code> method that we usually overrides.</p>
  </li>
</ol>

<p>In order to put the path information into this workflow, we can extend the <code>Text</code> class and put the path information into it. To make this work, we need to create three new classes: <code>TextWithPath</code>, <code>TWPInputFormat</code>, and <code>TWPRecordReader</code>.</p>

<h2 id="textwithpathjava">TextWithPath.java</h2>

<p>Here is our content wrapper – <code>TextWithPath</code>. It doesn’t do much; there’s a new constructor which accepts <code>Path</code>, and there’s a getter method to get <code>Path</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextWithPath</span> <span class="kd">extends</span> <span class="n">Text</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="nf">TextWithPath</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">){</span>
</span><span class="line">    <span class="kd">super</span><span class="o">();</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="n">Path</span> <span class="nf">getPath</span><span class="o">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="twpinputformatjava">TWPInputFormat.java</h2>

<p>The new <code>TWPInputFormat</code> is almost identical to <code>TextInputFormat</code>, except it uses <code>TextWithPath</code> instead of <code>Text</code>, and the <code>createRecordReader</code> method returns <code>TWPRecordReader</code> instead of <code>LineRecordReader</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.CompressionCodec</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.CompressionCodecFactory</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.SplittableCompressionCodec</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.JobContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileInputFormat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TWPInputFormat</span> <span class="kd">extends</span> <span class="n">FileInputFormat</span> <span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">TextWithPath</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">RecordReader</span> <span class="nf">createRecordReader</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">split</span><span class="o">,</span>
</span><span class="line">      <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">String</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">().</span><span class="na">get</span><span class="o">(</span>
</span><span class="line">        <span class="s">&quot;textinputformat.record.delimiter&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="kt">byte</span><span class="o">[]</span> <span class="n">recordDelimiterBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">delimiter</span><span class="o">)</span>
</span><span class="line">      <span class="n">recordDelimiterBytes</span> <span class="o">=</span> <span class="n">delimiter</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nf">TWPRecordReader</span><span class="o">(</span><span class="n">recordDelimiterBytes</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSplitable</span><span class="o">(</span><span class="n">JobContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Path</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">CompressionCodec</span> <span class="n">codec</span> <span class="o">=</span>
</span><span class="line">      <span class="k">new</span> <span class="nf">CompressionCodecFactory</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">()).</span><span class="na">getCodec</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">codec</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">codec</span> <span class="k">instanceof</span> <span class="n">SplittableCompressionCodec</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="twprecordreaderjava">TWPRecordReader.java</h2>

<p>Finally, in the <code>TWPRecordReader</code>, this is where I put my logic in. In the <code>initialize</code> method, you can get the <code>FileSplit</code> and get the <code>Path</code> object out of it. Next, let’s override <code>nextKeyValue</code>, and updates the <code>value</code> on every call. Lastly, remember to override <code>getCurrentValue()</code>, else it will only return parent’s value (Text), not the value with <code>TextWithPath</code> class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.LineRecordReader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TWPRecordReader</span> <span class="kd">extends</span> <span class="n">LineRecordReader</span><span class="o">{</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">TextWithPath</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="nf">TWPRecordReader</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">recordDelimiterBytes</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">(</span><span class="n">recordDelimiterBytes</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">genericSplit</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">genericSplit</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileSplit</span> <span class="n">split</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">genericSplit</span><span class="o">;</span>
</span><span class="line">    <span class="n">path</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextKeyValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">nextKeyValue</span><span class="o">()){</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextWithPath</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">      <span class="n">value</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">getCurrentValue</span><span class="o">());</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">TextWithPath</span> <span class="nf">getCurrentValue</span><span class="o">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="demo">Demo</h2>

<p>Here is a demo code to test the output. In addition to normal map reduce tasks, we set the input format class to <code>TWPInpuFormat</code>; on the Mapper side, we expect the input is <code>TextWithPath</code>, not <code>Text</code>. The whole program can be downloaded from this github repo. <a href="https://github.com/dryman/Hadoop-TextWithPath">Hadoop TextWithPath</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configuration</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configured</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.IntWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.NullWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Mapper</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.FileOutputFormat</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.Tool</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.ToolRunner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoRun</span> <span class="kd">extends</span> <span class="n">Configured</span> <span class="kd">implements</span> <span class="n">Tool</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">Configuration</span><span class="o">(),</span> <span class="k">new</span> <span class="n">DemoRun</span><span class="o">(),</span> <span class="n">args</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">getConf</span><span class="o">();</span>
</span><span class="line">    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;test TextWithPath Input&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">DemoRun</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">TWPInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">TWPInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">TestMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputValueClass</span><span class="o">(</span><span class="n">NullWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class="line">
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TestMapper</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">TextWithPath</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Only override `run` instead of `map` method; because we just want to see one output</span>
</span><span class="line"><span class="cm">     * per mapper, instead of printing every line.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class="line">      <span class="n">context</span><span class="o">.</span><span class="na">nextKeyValue</span><span class="o">();</span>
</span><span class="line">      <span class="n">TextWithPath</span> <span class="n">twp</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCurrentValue</span><span class="o">();</span>
</span><span class="line">      <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="n">Text</span><span class="o">(</span><span class="n">twp</span><span class="o">.</span><span class="na">getPath</span><span class="o">().</span><span class="na">toString</span><span class="o">()),</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="one-more-thing">One more thing</h2>

<p>I wrote another hadoop utility that reads a header file from HDFS input source, and passes a <code>FieldWritable</code> object to <code>Mapper</code> class instead of <code>Text</code>. The <code>FieldWritable</code> implements <code>Map</code> interface and can obtain TSV fields by it’s header key. The project is on <a href="https://github.com/dryman/hadoop-fieldformat">github</a> but still highly experimental. Once the API and implementation is stable, I’ll write another post to introduce it. Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture directory context in Hadoop Mapper]]></title>
    <link href="http://www.idryman.org/blog/2014/01/26/capture-directory-context-in-hadoop-mapper/"/>
    <updated>2014-01-26T15:12:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/26/capture-directory-context-in-hadoop-mapper</id>
    <content type="html"><![CDATA[<p>I have been using hadoop for data processing and datawarehousing for a while. One of the problem we encountered was map-reduce framework abstracts the input from files to lines, and thus it’s really difficult to apply logic based on different file or directories. Things got worse when we need to aggregate data across various versions of input sources. After digging in Hadoop source code, here is my solution.</p>

<!--more-->

<h2 id="meets-inputsplit-in-mapper">Meets InputSplit in Mapper</h2>

<p>Here is the first solution, it’s a bit ugly but works. In Hadoop <code>Mapper</code> class, you can override the <code>setup</code> method to initiate mapper with corresponding context. The context contains <code>inputSplit</code>, which can be cast to <code>FileInputSplit</code>, and contains the file and directory information in it. This is how I did it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileSplit</span> <span class="n">fileSplit</span><span class="o">;</span>
</span><span class="line">  <span class="n">InputSplit</span> <span class="n">is</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getInputSplit</span><span class="o">();</span>
</span><span class="line">  <span class="n">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">FileSystem</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">());</span>
</span><span class="line">  <span class="n">fileSplit</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">is</span><span class="o">;</span>
</span><span class="line">  <span class="n">Path</span> <span class="n">filePath</span> <span class="o">=</span> <span class="n">fileSplit</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the input directory looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00000</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00001</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00002</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00003</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the path argument you passed to <code>FileInputFormat</code> is <code>/input</code>. The resulting paths in the snippet would be one of these:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00000</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00001</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00002</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00003</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Each Mapper would get different <strong>file</strong> path instead of getting the directory <code>/input</code>. If you want to handle the logic better, you can do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Path</span> <span class="n">finalPath</span><span class="o">;</span>
</span><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">fs</span><span class="o">.</span><span class="na">isFile</span><span class="o">(</span><span class="n">filePath</span><span class="o">)){</span>
</span><span class="line">  <span class="n">finalPath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">filePath</span><span class="o">.</span><span class="na">getParrent</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">  <span class="n">finalPath</span> <span class="o">=</span> <span class="n">filePath</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="taggedinputsplit">TaggedInputSplit</h2>

<p>This works for most of the time; however, if you set the input to be <code>/input/*/part*</code>. The <code>InputSplit</code> would be an internal type called <code>TaggedInputSplit</code> instead of <code>FileInputSplit</code>. Although <code>TaggedInputSplit</code> has a method called <code>getInputSplit</code> to get the wrapped class, it is a private class and you can only use java reflection to hack it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">InputSplit</span> <span class="n">is</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getInputSplit</span><span class="o">();</span>
</span><span class="line"><span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;getInputSplit&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">method</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">fileSplit</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>
</span><span class="line"><span class="n">Path</span> <span class="n">filePath</span> <span class="o">=</span> <span class="n">fileSplit</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="more-general-solutions">More general solutions</h2>

<p>The solutions above is working on production environment. However, it is a bit too hacky and not general enough. On the next post, I’ll show you how to implement <code>InputFomrat</code>, <code>RecordReader</code>, and <code>Writable</code> classes to solve this problem with lower level APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Monad Tutorial in 15 Minutes]]></title>
    <link href="http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/"/>
    <updated>2014-01-23T19:21:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial</id>
    <content type="html"><![CDATA[<p>Functional programming has become popular these days, but unlike object-oriented languages, each FP language is so different from the other. Some of these use strict evaluation while others use lazily evaluated models; tons of new concurrent models were introduced; further more, states are handled differently too.</p>

<p>Haskell, for example, does not have states, but uses its powerful type system to construct the stateful program flow normally used in other languages. As you might guess, Monad is one of the type that does the trick. Defining a Monad type is pretty much like defining a class in an object oriented language. However, Monad can do much more than a class. It’s a type that can be used for exception handling, constructing parallel program workflow or even a parser generator!</p>

<p>By learning Monad, You’ll know a different perspective of how to program, and rethink the composition of data logic beyond the object-oriented programming kingdom.</p>

<!--more-->

<h2 id="what-is-a-type">What is a type</h2>

<p>Before we jump into Monad itself, let’s quickly go through the type systems. What is a type? We usually think of type as a static thing like <code>int</code> or <code>float</code>, but actually, type is more dynamic; <strong>types are the rules associated with the data, not the actual data itself</strong>. It is important to remember this point.</p>

<p>For example, an <code>int</code> is treated as <code>int</code> only when you use <code>addl</code> CPU instruction to present <code>+</code> operation on a 64 bit machine. On the other hand, <code>float</code> uses <code>addss</code> the instruction for <code>+</code> and <code>%xmm</code> registers for computations. It’s the <em>rules</em>, or the <em>generated instructions</em>, that define the type.</p>

<p>The whole concept of Object-Oriented Programming is to let you use classes/interfaces to define types, the rules (methods) that interacts with the actual data. For more advanced needs people use templates(c++) or generics(java) to define more abstracted rules that are more reusable. Monad, is pretty much like that generic class.</p>

<p>Now we understand what a type is; it’s just a set of rules, or methods in Object-Oriented terms. A Monad, is just yet another type, and the definition of this type is defined by four rules:</p>

<ol>
  <li>bind <code>(&gt;&gt;=)</code></li>
  <li>then <code>(&gt;&gt;)</code></li>
  <li><code>return</code></li>
  <li><code>fail</code></li>
</ol>

<p>By going through these four rules and looking at the examples below, you’ll understand what a Monad is and why is it so awesome and powerful!</p>

<h2 id="monad-lesson-1-the-bind-operator-">Monad lesson 1: the bind operator <code>(&gt;&gt;=)</code></h2>

<p>The Monad bind operator is a function type signature. A type signature is like an abstract method defined in an abstract class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span>  <span class="kt">Monad</span> <span class="n">m</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may not familiar with Haskell syntax, but actually it’s pretty straight forward.</p>

<p><img width="60%" style="margin-left:20%;" src="http://www.idryman.org/images/monad/type-signature.png" /></p>

<p>It takes 2 inputs and returns an output.</p>

<ol>
  <li>
    <p>A Monad that contains type <code>a</code> as the first input</p>
  </li>
  <li>
    <p>A function <code>(a -&gt; m b)</code> as the second input. <code>(a -&gt; m b)</code> is a first order function that takes <code>a</code> as input, and returns Monad <code>m b</code>. You can think of this as a delegate design pattern in Object-Oriented world, except you don’t need to pass in a whole object, but only a function itself is sufficient.</p>
  </li>
  <li>
    <p>The implementation will return Monad <code>m b</code> as a result.</p>
  </li>
</ol>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/monad/monad-structure.png" /></p>

<p>Why is this definition powerful? Well, one benefit is that you can wrap common logic in Monad and save yourself time.</p>

<hr />

<h2 id="application-1-exception-handling">Application 1: exception handling</h2>

<p>Exception handling is always a pain in the ass. Lets demonstrate how to use a Monad to reduce the code size and un-nest if-else blocks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">=</span> <span class="n">io_function1</span><span class="p">(</span> <span class="n">input1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">output1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* do some logic */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">=</span> <span class="n">io_function2</span><span class="p">(</span> <span class="n">input2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">output2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * some more logic</span>
</span><span class="line"><span class="cm">         * and maybe more nested functions</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="cm">/* handle error 2 */</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* handle error 1 */</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- need to fix this part -->
<p>There’s nothing wrong with nested if-else blocks. The logic is straightforward and easy to understand. To un-nest the if-else statements, there are several ways to do it. You can either use a <code>goto</code> statement and pass the control to a barrier label, or use try-catch block in C++ or a similar language that supports it. Or, here comes the Maybe Monad for the rescue!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">data</span>  <span class="kt">Maybe</span> <span class="n">a</span>  <span class="ow">=</span>  <span class="kt">Nothing</span> <span class="o">|</span> <span class="kt">Just</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span>  <span class="kt">Monad</span> <span class="kt">Maybe</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="n">x</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span> <span class="n">x</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;=</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A Maybe Monad has two constructors: <code>Nothing</code> and <code>Just a</code>. It’s a simple kind of error Monad, where all errors are represented by <code>Nothing</code>. The rules are simple:</p>

<ol>
  <li>If the first input <code>M a</code> is <code>Just x</code>, run the second input (the function) with value <code>x</code></li>
  <li>If the first input is <code>Nothing</code>, just return <code>Nothing</code></li>
</ol>

<p>When you combine several Maybe Monad handling functions together, if one of the upstream function went wrong by returning <code>Nothing</code>, all the downstream function(s) won’t be executed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">maybeHalf</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Int</span>         <span class="c1">-- Haskell type definition</span>
</span><span class="line"><span class="nf">maybeHalf</span> <span class="n">a</span>                           <span class="c1">-- Actual function body</span>
</span><span class="line">         <span class="o">|</span> <span class="n">even</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">div</span> <span class="n">a</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">         <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first line is Haskell function type definition. <code>maybeHalf</code> takes an <code>Int</code> and returns <code>Maybe Int</code> type. Other than that, the function body tells us:</p>

<ol>
  <li>
    <p>If input <code>a</code> is even, return <code>a / 2</code> wrapped in <code>Maybe</code> Monad constructor <code>Just</code>.</p>
  </li>
  <li>
    <p>Otherwise, return <code>Maybe</code> Monad constructor <code>Nothing</code>.</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Just</span> <span class="mi">5</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Nothing</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cool, now the nested if-else logic is replaced! What do we learn from this?</p>

<ol>
  <li>
    <p>Error handling if-else logic is encapsulated from the user.</p>
  </li>
  <li>
    <p>User can use the defined data type <code>Just a</code> or <code>Nothing</code> to <strong>lift</strong> the information (correct or error) to upper Monad.</p>
  </li>
</ol>

<p>A programming language’s type system deeply colors the way we think and write code in that language.
In the object-oriented kingdom, we use objects to encapsulate error messages,
and then code the program to throw the exception upwards and hopefully the try-catch block will capture it and handle the error gracefully.
In contrast, you can use a type to build the try-catch block, and also encapsulate error or success state!</p>

<h2 id="application-2-accumulate-states">Application 2: accumulate states</h2>

<p>So far, we’ve seen that Monad can help us wrap common (usually nested) logic into a type.
User can <strong>lift</strong> the data to the upward Monad, and Monad will do the if-else logic for you.
Nevertheless, Monad can do more for you! <code>Maybe</code> Monad only passes the data to the next
user defined function, and here we introduce the <code>Writer</code> Monad, which will accumulate the
data you lift to it.</p>

<h4 id="writer-monad-type-definition">Writer Monad, type definition</h4>

<p>Here is the type definition of Writer Monad:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">instance</span> <span class="p">(</span><span class="kt">Monoid</span> <span class="n">w</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Monad</span> <span class="p">(</span><span class="kt">Writer</span> <span class="n">w</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">    <span class="n">return</span> <span class="n">x</span> <span class="ow">=</span> <span class="kt">Writer</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">mempty</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Writer</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="p">))</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span> <span class="ow">=</span> <span class="kr">let</span> <span class="p">(</span><span class="kt">Writer</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">v&#39;</span><span class="p">))</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">in</span> <span class="kt">Writer</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">v</span> <span class="p">`</span><span class="n">mappend</span><span class="p">`</span> <span class="n">v&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t be scared! Writer Monad uses <code>Monoid</code> to concat the data you lift to it.
<code>Monoid</code> defines <code>mempty</code> and <code>mappend</code> functions. <code>mappend</code>, as it’s name suggests, appends
the data you passed to it; and <code>mempty</code> is just an empty element.
<code>mappend</code> and <code>mempty</code> are just abstract ways to merge data together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="s">&quot;hello &quot;</span> <span class="s">&quot;world&quot;</span>
</span><span class="line"><span class="s">&quot;hello world&quot;</span>
</span><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="s">&quot;hello &quot;</span> <span class="n">mempty</span>
</span><span class="line"><span class="s">&quot;hello &quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Writer Monad’s definition simply takes the return value of user defined function <code>f</code>, extracts
the value <code>v'</code> out of it, and uses <code>mappend</code> to append the old <code>v</code> and new <code>v'</code>.</p>

<h4 id="writer-monad-in-action">Writer Monad, in action</h4>

<p>Let me take a modified example from <a href="http://learnyouahaskell.com/for-a-few-monads-more">Learn You a Haskell for Great good</a>. To log the process of deriving the greatest common divisor, we can do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">import</span> <span class="nn">Control.Monad.Writer</span>
</span><span class="line">
</span><span class="line"><span class="nf">gcd&#39;</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Writer</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class="line"><span class="nf">gcd&#39;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>
</span><span class="line">    <span class="o">|</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class="line">        <span class="n">tell</span> <span class="p">[</span><span class="s">&quot;Finished with &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">a</span><span class="p">]</span>
</span><span class="line">        <span class="n">return</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line">    <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class="line">        <span class="n">tell</span> <span class="p">[</span><span class="n">show</span> <span class="n">a</span> <span class="o">++</span> <span class="s">&quot; mod &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">b</span> <span class="o">++</span> <span class="s">&quot; = &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="p">(</span><span class="n">a</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">b</span><span class="p">)]</span>
</span><span class="line">        <span class="n">return</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">b</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Writer Monad does not have a constructor like Maybe Monad does, so you need to use <code>tell</code> and <code>return</code> to build the Writer Monad and return it back. To show the result of the writer log, you’ll also need function <code>runWriter</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span>
</span><span class="line"><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">,</span><span class="s">&quot;3 mod 2 = 1&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span>
</span><span class="line"><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">,</span><span class="s">&quot;3 mod 2 = 1&quot;</span><span class="p">,</span><span class="s">&quot;2 mod 1 = 0&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="monad-lesson-2-the-then-operator-">Monad Lesson 2: the then operator <code>&gt;&gt;</code></h2>

<p>So, now we learned you can put different logic into a Monad to operate states. All the state passing is done by the bind operator <code>&gt;&gt;=</code>, which wraps the data and passes it to the downstream handler. However, Sometimes, we don’t care about the wrapped value and just want to pass the state downstream. For example, performing side effects.</p>

<p>The definition of <em>then</em> operator <code>&gt;&gt;</code> looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class="line">    <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unlike <em>bind</em> operator <code>&gt;&gt;=</code> which unwraps the value passed between user defined functions, <em>then</em> operator ignores the wrapped value (it uses <code>_</code> as variable) and only captures the states <code>x</code> and <code>y</code>.</p>

<p>What is the use case of this? Recall that Haskell is a purely a functional language that doesn’t have states or variables; However, the Monad system can encapsulate hidden states, so the solution is to put a hidden <code>#realworld#</code> variable in <code>IO Monad</code> that records the standard input-output status, and also the file seek position, etc.</p>

<h2 id="application-3-io-monad">Application 3: IO Monad</h2>

<p>It’s easier to understand in examples. Let’s try the <code>putStrLn</code> function, which takes a <code>String</code>, and returns an <code>IO Monad</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">putStrLn</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since it doesn’t need to take things from standard input, we have no need to <em>bind</em> variables.
The usage is trivial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;hello, world&quot;</span>
</span><span class="line"><span class="nf">hello</span><span class="p">,</span> <span class="n">world</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;hello, world&quot;</span> <span class="o">&gt;&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;baby&quot;</span>
</span><span class="line"><span class="nf">hello</span><span class="p">,</span> <span class="n">world</span>
</span><span class="line"><span class="nf">baby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With every <code>&gt;&gt;</code> operator, the <code>IO ()</code> Monad changes the <code>#realworld#</code> variable in the background. It’s just like <code>Writer</code> Monad changes the accumulated states, but more abstract. For more details about the <code>IO ()</code> Monad, please visit <a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a>.</p>

<h3 id="do-notation">do notation</h3>

<p>For convenience, Haskell provides us <strong>do notation</strong> to simplify the writing of <em>bind</em> and <em>then</em>, so instead of writing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="n">putStr</span> <span class="s">&quot;What is your name?&quot;</span>
</span><span class="line">       <span class="o">&gt;&gt;</span> <span class="n">readLn</span>
</span><span class="line">       <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">putStr</span> <span class="s">&quot;How old are you?&quot;</span>
</span><span class="line">       <span class="o">&gt;&gt;</span> <span class="n">readLn</span>
</span><span class="line">       <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">print</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="n">putStr</span> <span class="s">&quot;What is your name?&quot;</span>
</span><span class="line">          <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class="line">          <span class="n">putStr</span> <span class="s">&quot;How old are you?&quot;</span>
</span><span class="line">          <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class="line">          <span class="n">print</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This example is taken from <a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a>. All the Monads above can be rewritten in this form. Hooray!</p>

<h2 id="monad-lesson-3-return-and-fail">Monad Lesson 3: <code>return</code> and <code>fail</code></h2>

<p>We only have two functions left to describe Monad, which are <code>return</code> and <code>fail</code>. Actually, we already know them! The complete <code>Maybe</code> definition is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">instance</span>  <span class="kt">Monad</span> <span class="kt">Maybe</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="n">x</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span> <span class="n">x</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;=</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class="line">
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="kr">_</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;</span>  <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class="line">
</span><span class="line">    <span class="n">return</span>              <span class="ow">=</span> <span class="kt">Just</span>
</span><span class="line">    <span class="n">fail</span> <span class="kr">_</span>              <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>return</code> function is the wrapper that we have used so far, and <code>fail</code> is the function to represent, as you can guess, failure. The definition of <code>return</code> and <code>fail</code> in Monad is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">return</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span><span class="line">  <span class="n">fail</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>fail</code> can take an additional string to report the failure message. With <em>bind</em>, <em>then</em>, <em>return</em>, and <em>fali</em> functions, we then know the whole definition of the Monad type!</p>

<h2 id="monad-lesson-4-beyond-states">Monad Lesson 4: Beyond states</h2>

<p>So far, we introduced <code>Maybe</code>, <code>Writer</code>, and <code>IO ()</code> Monads which use states heavily, but Monad can do more than abstract states. Remember, the core of Monad type is to wrap around logic. One of the applications it can do is define work flow. Here comes the <a href="http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#fig_rpar_rpar">Eval Monad</a> to the rescue; let’s take a look on the example in the online book:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">runEval</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class="line">   <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">rpar</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">   <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">rpar</span> <span class="p">(</span><span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">   <span class="n">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you wrap the function <code>f</code> in <code>Eval</code> Monad, it generates the logic to evaluate the code in parallel. You can further use the combination of the <code>rpar</code> and <code>rseq</code> functions defined by <code>Eval</code>, to construct the dependencies of each individual job. Check the link for more details!</p>

<p>Another nontrivial example of Monad is <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec parser combinator library</a>. In this case, the wrapped logic is used for generating a parser from smaller components. Read <a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a> to explore this decent Monad!</p>

<h2 id="conclusion">Conclusion</h2>

<p>I started to learn Haskell a while ago, but I found explaining what a Monad type is in a easy way was extremely difficult. The final approach I choose was to break it down into four functions and explore them through examples. 
I found this helped me understand it better, and I hope it helps you out as well!</p>

<p>Once you understand what the Monad type is, you can easily use for all sorts of Haskell libraries on the fly. In the Haskell world, Monad is THE design pattern that is used for almost every important library. Functional programming introduced a different way to convolute the logic and data. It’s also elegant and powerful. I hope you enjoyed reading this post!</p>

<p>Any comments are welcome. ;)</p>

<h2 id="references">References</h2>

<ul>
  <li>
    <p><a href="http://www.leonardoborges.com/writings/2012/12/08/monads-in-small-bites-part-iv-monads/">Monads in small bites</a></p>
  </li>
  <li>
    <p><a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a></p>
  </li>
  <li>
    <p><a href="http://learnyouahaskell.com/for-a-few-monads-more">Learn You a Haskell for Great good</a></p>
  </li>
  <li>
    <p><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#fig_rpar_rpar">Eval Monad</a></p>
  </li>
  <li>
    <p><a href="http://www.haskell.org/haskellwiki/Parsec">Parsec parser combinator library</a></p>
  </li>
  <li>
    <p><a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert utf8 literals in Java]]></title>
    <link href="http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java/"/>
    <updated>2013-10-03T20:37:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java</id>
    <content type="html"><![CDATA[<p>I thought this problem is already been solved, but it’s not: consider a string like <code>\xe6\x84\x8f\xe6\xb3\x95\xe5\x8d\x8a\xe5\xaf\xbc hello world</code>, how can you transform it to an utf8 encoded string <code>意法半导 hello world</code>? Note that the string you get is encoded in ascii encoding, not utf8; the original utf8 is transfered into hex literals. I thought that I can use whatever library I found on the first result returned by google, but actually there’s no trivial solution out there on the web.</p>

<!--more-->

<h2 id="icu4j">ICU4J</h2>

<p>The only library that you can use for handling utf8 on java platform, is <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a>. THE Unicode processing library devloped by IBM. If you know any other library that can process the literal string, please tell me, I’ll be really appreciated.</p>

<p>With <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a> you can use <code>com.ibm.icu.impl.Utility.unescape(String s)</code> to convert the literal string to utf8 string. However, java string internally doesn’t use utf8 encoding, instead it uses UTF-16 (Big Endian) to present unicode characters. To fully convert the string from utf8 literal to java unicode representation, you need to decode it with <strong>ISO-8859-1</strong> then read the bytes back to string using encoding <strong>UTF-8</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">com.ibm.icu.impl.Utility</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf_literals</span> <span class="o">=</span> <span class="s">&quot;\\xe6\\x84\\x8f\\xe6\\xb3\\x95\\xe5\\x8d\\x8a\\xe5\\xaf\\xbc hello world&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf8_str</span> <span class="o">=</span> <span class="n">Utility</span><span class="o">.</span><span class="na">unescape</span><span class="o">(</span><span class="n">utf_literals</span><span class="o">);</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">utf8_str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">java_utf_str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java_utf_str</span><span class="o">);</span>
</span><span class="line"><span class="c1">// ==&gt;  意法半导 hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One more thing. In order to print the utf string in Eclipse, you have to set the encoding of the output to utf8, else you’ll see a bunch of question marks.</p>

<p>I’m quite surprised that no one ever write a post of how do you solved this task. I know the solution is short yet not that trivial, but it still took me several hours to dig in and out on different libraries and solutions on the web to reach the final answer. Hope this post can save your time if you encountered the same problem!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java fast IO using java.nio API]]></title>
    <link href="http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api/"/>
    <updated>2013-09-28T17:18:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api</id>
    <content type="html"><![CDATA[<p>For modern computing, IO is always a big bottleneck to solve. I recently encounter a problem is to read a 355MB index file to memory, and do a run-time lookup base the index. This process will be repeated by thousands of Hadoop job instances, so a fast IO is a must. By using the <code>java.nio</code> API I sped the process from 194.054 seconds to 0.16 sec! Here’s how I did it.</p>

<!--more-->

<h2 id="the-data-to-process">The Data to Process</h2>

<p>This performance tuning practice is very specific to the data I’m working on, so it’s better to explain the context. We have a long ip list (26 millions in total) that we want to put in the memory. The ip is in text form, and we’ll transform it into signed integer and put it into a java array. (We use signed integer because java doesn’t support unsigned primitive types…) The transformation is pretty straight forward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">ip2integer</span> <span class="o">(</span><span class="n">String</span> <span class="n">ip_str</span><span class="o">){</span>
</span><span class="line">  <span class="n">String</span> <span class="o">[]</span> <span class="n">numStrs</span> <span class="o">=</span> <span class="n">ip_str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\.&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">numStrs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">4</span><span class="o">){</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span>
</span><span class="line">        <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">2</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
</span><span class="line">    <span class="n">num</span> <span class="o">+=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;IP is wrong: &quot;</span><span class="o">+</span> <span class="n">ip_str</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, reading ip in text form line by line is really slow.</p>

<h2 id="strategy-1-line-by-line-text-processing">Strategy 1: Line-by-line text processing</h2>

<p>This approach is straight forward. Just a standard readline program in java.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ipArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26123456</span><span class="o">];</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsText</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;ip.tsv&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataOutputStream</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class="line">  <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ip_num</span> <span class="o">=</span> <span class="n">ip2integer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">    <span class="n">ipArray</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">ip_num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result time was <code>194.054</code> seconds.</p>

<h2 id="strategy-2-encode-ip-in-binary-format">Strategy 2: Encode ip in binary format</h2>

<p>The file size of the <code>ip.tsv</code> is 355MB, which is inefficient to store or to read. Since I’m only reading it to an array, why not store it as a big chunk of binary array, and read it back while I need it? This can be done by <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html">DataInputStream</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataOutputStream.html">DataOutputStream</a>. After shrinking the file, the file size became 102MB.</p>

<p>Here’s the code to read ip in binary format:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsDataStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class="line">      <span class="n">ipArr</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">e</span><span class="o">){</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;EOF&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The resulting time was <code>72</code> seconds. Much slower than I expected.</p>

<h2 id="strategy-3-read-the-file-using-javanio-api">Strategy 3: Read the file using java.nio API</h2>

<p>The <code>java.nio</code> is a new IO API that maps to low level system calls. With these system calls we can perform libc operations like <code>fseek</code>, <code>rewind</code>, <code>ftell</code>, <code>fread</code>, and bulk copy from disk to memory. For the C API you can view it from <a href="http://www.gnu.org/software/libc/manual/html_node/Low_002dLevel-I_002fO.html">GNU C library reference</a>.</p>

<p>The terminology in C and Java is a little bit different. In C, you control the file IO by <a href="http://www.gnu.org/software/libc/manual/html_node/Opening-and-Closing-Files.html#Opening-and-Closing-Files">file descriptors</a>; while in <code>java.nio</code> you use a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html">FileChannel</a> for reading, writing, or manipulate the position in the file. Another difference is you can bulk copy directly using the <code>fread</code> call, but in Java you need an additional <code>ByteBuffer</code> layer to map the data. To understand how it work, it’s better to read it from code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPFromNIO</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">  <span class="n">ByteBuffer</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocateDirect</span><span class="o">(</span><span class="mi">64</span><span class="o">*</span><span class="mi">1024</span><span class="o">);</span>
</span><span class="line">  <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="n">ipArr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">];</span>
</span><span class="line">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;File size: &quot;</span><span class="o">+</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bb</span><span class="o">))!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class="line">    <span class="c1">//System.out.println(&quot;Offset: &quot;+offset+&quot;\tlen: &quot;+len+&quot;\tremaining:&quot;+bb.hasRemaining());</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">asIntBuffer</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">ipArr</span><span class="o">,</span><span class="n">offset</span><span class="o">,(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">    <span class="n">offset</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">;</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code should be quite self-documented. The only thing to note is the byte-buffer’s <code>flip()</code> method. This call convert the buffer from writing data to buffer from disk to reading mode, so that we can read the data to int array via method <code>get()</code>. Another thing worth to mention is java use big-endian to read and write data by default. You can use <code>ByteBuffer.order(ByteOrder.LITTLE_ENDIAN)</code> to set the endian if you need it. For more about <code>ByteBuffer</code> here’s a <a href="http://mindprod.com/jgloss/bytebuffer.html">good blog post</a> that explains it in detail.</p>

<p>With this implementation, the result performance is <code>0.16</code> sec! Glory to the <code>java.nio</code>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (2)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2/"/>
    <updated>2013-09-22T18:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2</id>
    <content type="html"><![CDATA[<p>Followed the previous article, in this post I ran several benchmarks and tuned the performance from 3 hours 34 minutes to 6 minutes 8 seconds!</p>

<!--more-->

<h2 id="original-job-without-any-tuning">Original job without any tuning</h2>

<ul>
  <li><code>job_201308111005_0317</code></li>
  <li>NumTasks: 9790</li>
  <li>Reuse JVM: false</li>
  <li>mean complete time: 9-Sep-2013 10:08:47 (17sec)</li>
  <li>Finished in: 3hrs, 34mins, 26sec</li>
</ul>

<p>We had 9790 files to process, and the total size of the files is 53 GB. Note that for every task it still took 17 seconds to process the file.</p>

<h2 id="using-combinefileinputformat-without-setting-the-maxsplitsize">Using CombineFileInputFormat without setting the MaxSplitSize</h2>

<ul>
  <li><code>job_201308111005_0330</code></li>
  <li>NumTasks: 1</li>
  <li>Reuse JVM: false</li>
</ul>

<p>In this benchmark I didn’t set the <code>MaxSplitSize</code> in <code>CFInputFormat.java</code>, and thus Hadoop merge all the files into one super big task.
After running this task for 15 minutes, hadoop killed it. Maybe its a timeout issue, I didn’t dig into this.
The start and the end of the task logs look like this:</p>

<pre><code>13/09/09 16:17:29 INFO mapred.JobClient:  map 0% reduce 0%
13/09/09 16:32:45 INFO mapred.JobClient:  map 40% reduce 0%
 
13/09/09 16:33:02 INFO mapred.JobClient: Task Id : attempt_201308111005_0330_m_000000_0, Status : FAILED
java.lang.Throwable: Child Error
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:271)
    Caused by: java.io.IOException: Task process exit with nonzero status of 255.
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:258)
</code></pre>

<h2 id="using-combinefileinputformat-with-block-size-64-mb">Using CombineFileInputFormat with block size 64 MB</h2>

<ul>
  <li><code>job_201308111005_0332</code></li>
  <li>Reuse JVM = false</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 16:55:02 (24sec)</li>
  <li>Finished in: 23mins, 6sec</li>
</ul>

<p>After modifying <code>MaxSplitSize</code> the total runtime has reduced to 23 minutes! The total tasks drops from 9790 to 760, about 12 times smaller. The time difference is 9.3 times faster, pretty nice! However, the mean complete time doesn’t scale like other factors. The reason was it’s a big overhead to start JVM over and over again.</p>

<h2 id="using-combinefileinputformat-with-block-size-64mb-and-reuse-jvm">Using CombineFileInputFormat with block size 64MB and reuse JVM</h2>

<p>To reuse the JVM, just set <code>mapred.job.reuse.jvm.tasks</code> to <code>-1</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class="line">    <span class="n">conf</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="s">&quot;mapred.job.reuse.jvm.num.tasks&quot;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">HadoopMain</span><span class="o">(),</span> <span class="n">argv</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is awesome! <strong>6 minutes and 8 seconds</strong>, wow!</p>

<ul>
  <li><code>job_201308111005_0333</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 17:30:23 (5sec)</li>
  <li>Finished in: 6mins, 8sec</li>
</ul>

<h2 id="use-fileinputformat-and-reuse-jvm">Use FileInputFormat and reuse JVM</h2>

<p>Just curious the performance difference if we only change the JVM parameter:</p>

<ul>
  <li><code>job_201308111005_0343 </code></li>
  <li>NumTasks: 9790</li>
  <li>mean complete time: 10-Sep-2013 17:04:18 (3sec)</li>
  <li>Reuse JVM = true</li>
  <li>Finished in: 24mins, 49sec</li>
</ul>

<h2 id="tuning-performance-over-block-size">Tuning performance over block size</h2>

<p>Let’s jump to the conclusion first: changing the block size doesn’t affect the performance that much, and I found 64 MB is the best size to use. Here are the benchmarks:</p>

<h3 id="mb">512 MB</h3>

<ul>
  <li><code>job_201308111005_0339</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 512MB</li>
  <li>NumTasks: 99</li>
  <li>mean complete time: 10-Sep-2013 11:55:26 (24sec)</li>
  <li>Finished in: 7min 13sec</li>
</ul>

<h3 id="mb-1">128 MB</h3>

<ul>
  <li><code>job_201308111005_0340</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 128 MB</li>
  <li>NumTasks: 341</li>
  <li>mean complete time: 10-Sep-2013 13:13:20 (9sec)</li>
  <li>Finished in: 6mins, 41sec</li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>So far the best practice I learned from these benchmarks are:</p>

<ol>
  <li>Setup the <code>mapred.job.reuse.jvm.num.tasks</code> flag in configuration. This is the easiest tuning to do, and it makes nearly 10 times performance improvement.</li>
  <li>Write your own <code>CombineFileInputFormat</code> implementation.</li>
  <li>The block size can be 64 MB or 128 MB, but doesn’t make big difference between the two.</li>
</ol>

<p>Still, try to model your problems into sequence file or map file in hadoop. HDFS should handle localities with these files automatically.
What about <code>CFInputFormat</code>? Does it handle locality in HDFS system too?
I can’t confirm it but I guess sorting the keys based on line offset first then file name also guarantees the locality of assigning data to mapper. When I have time to dig more from HDFS API, I’ll look back to this benchmark and see what can I further tune the program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (1)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1/"/>
    <updated>2013-09-22T14:39:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1</id>
    <content type="html"><![CDATA[<p>Processing small files is an old typical problem in hadoop; On <a href="http://stackoverflow.com/questions/14541759/how-can-i-work-with-large-number-of-small-files-in-hadoop">Stack Overflow</a> it suggested people to use <a href="http://hadoop.apache.org/docs/r1.1.1/api/org/apache/hadoop/mapred/lib/CombineFileInputFormat.html">CombineFileInputFormat</a>,  but I haven’t found a good step-to-step article that teach you how to use it. So, I decided to write one myself.</p>

<!--more-->

<p>From <a href="http://blog.cloudera.com/blog/2009/02/the-small-files-problem/">Cloudera’s blog</a>:</p>

<blockquote>
  <p>A small file is one which is significantly smaller than the HDFS block size (default 64MB).
If you’re storing small files, then you probably have lots of them (otherwise you wouldn’t turn to Hadoop),
and the problem is that HDFS can’t handle lots of files.</p>
</blockquote>

<p>In my benchmark, just using a custom <code>CombineFileInputFormat</code> can speedup the program from 3 hours to 23 minutes, and after some further tuning, the same task can be run in 6 minutes!</p>

<h2 id="benchmark-setup">Benchmark Setup</h2>

<p>To test the raw performance of different approaches to solve small problems, I setup a map only hadoop job that basically just do grep and perform a small binary search. The binary search part is to generate the reduce side keys that I’ll use in further data processing; it took only a little resource (8MB index) to run, so it does not affect the result of the benchmark.</p>

<p>The data to process is some server log data, 53.1 GB in total. The hadoop clusters consist 6 nodes, using hadoop version 1.1.2. In this benchmark I implemented <code>CombineFileInputFormat</code> to shrink the map jobs; I also tested the difference of reusing JVM or not, and different number of block sizes to combine files.</p>

<h2 id="combinefileinputformat">CombineFileInputFormat</h2>

<p>The code listed here is modified from <a href="https://svn.apache.org/repos/asf/hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/MultiFileWordCount.java">Hadoop example code</a>. To use <code>CombineFileInputFormat</code> you need to implement three classes. The class <code>CombineFileInputFormat</code> is an abstract class with no implementation, so you must create a subclass to support it; we’ll name the subclass <code>CFInputFormat</code>. The subclass will initiate a delegate <code>CFRecordReader</code> that extends <code>RecordReader</code>; this is the code that does the file processing logic. We’ll also need a class for <code>FileLineWritable</code>, which replaces <code>LongWritable</code> normally used as a key to file lines.</p>

<h3 id="cfinputformatjava">CFInputFormat.java</h3>

<p>The <code>CFInputFormat.java</code> doesn’t do much. You implement <code>createRecordReader</code> to pass in the record reader that does the combine file logic, that’s all. Note that you can call <code>setMaxSplitSize</code> in the initializer to control the size of each chunk of files; if you don’t want to split files into half, remember to return <code>false</code> in <code>isSplitable</code> method, which defaults to <code>true</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.JobContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileInputFormat</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.CFRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFInputFormat</span> <span class="kd">extends</span> <span class="n">CombineFileInputFormat</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">public</span> <span class="nf">CFInputFormat</span><span class="o">(){</span>
</span><span class="line">    <span class="kd">super</span><span class="o">();</span>
</span><span class="line">    <span class="n">setMaxSplitSize</span><span class="o">(</span><span class="mi">67108864</span><span class="o">);</span> <span class="c1">// 64 MB, default block size on hadoop</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="n">createRecordReader</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="n">CombineFileRecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;((</span><span class="n">CombineFileSplit</span><span class="o">)</span><span class="n">split</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">CFRecordReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSplitable</span><span class="o">(</span><span class="n">JobContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Path</span> <span class="n">file</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cfrecordreaderjava">CFRecordReader.java</h3>

<p><code>CFRecordReader</code> is a delegate class of <code>CombineFileRecordReader</code>, a built in class that pass each split (typically a whole file in this case) to our class <code>CFRecordReader</code>. When the hadoop job starts, <code>CombineFileRecordReader</code> reads all the file sizes in HDFS that we want it to process, and decides how many splits base on the <code>MaxSplitSize</code> we defined in <code>CFInputFormat</code>. For every split (must be a file, because we set <code>isSplitabe</code> to false), <code>CombineFileRecordReader</code> creates a <code>CFRecrodReader</code> instance via a custom constructor, and pass in <code>CombineFileSplit</code>, context, and index for <code>CFRecordReader</code> to locate the file to process with.</p>

<p>When processing the file, the <code>CFRecordReader</code> creates a <code>FileLineWritable</code> as the key for hadoop mapper class. With each line a <code>FileLineWritable</code> consists the file name and the offset length of that line. The difference between <code>FileLineWritable</code> and the normally used <code>LongWritable</code> in mapper is <code>LongWritable</code> only denote the offset of a line in a file, while <code>FileLineWritable</code> adds the file information into the key.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FSDataInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FileSystem</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.LineReader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFRecordReader</span> <span class="kd">extends</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">end</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileSystem</span> <span class="n">fs</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileLineWritable</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Text</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">FSDataInputStream</span> <span class="n">fileIn</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">LineReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="nf">CFRecordReader</span><span class="o">(</span><span class="n">CombineFileSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="n">fs</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">getFileSystem</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">());</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">startOffset</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">startOffset</span> <span class="o">+</span> <span class="n">split</span><span class="o">.</span><span class="na">getLength</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">fileIn</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">  <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LineReader</span><span class="o">(</span><span class="n">fileIn</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">pos</span> <span class="o">=</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">arg1</span><span class="o">)</span>
</span><span class="line">    <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// Won&#39;t be called, use custom Constructor</span>
</span><span class="line">  <span class="c1">// `CFRecordReader(CombineFileSplit split, TaskAttemptContext context, Integer index)`</span>
</span><span class="line">  <span class="c1">// instead</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">float</span> <span class="nf">getProgress</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">startOffset</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">1.0f</span><span class="o">,</span> <span class="o">(</span><span class="n">pos</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">FileLineWritable</span> <span class="nf">getCurrentKey</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">Text</span> <span class="nf">getCurrentValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextKeyValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileLineWritable</span><span class="o">();</span>
</span><span class="line">    <span class="n">key</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">key</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">newSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">newSize</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="n">pos</span> <span class="o">+=</span> <span class="n">newSize</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">newSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reason to use a custom constructor
is not documented anywhere in hadoop api nor document. You can only find it in <a href="http://grepcode.com/file/repo1.maven.org/maven2/com.ning/metrics.collector/1.2.1/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java#40">hadoop source code</a>, line 40:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">   <span class="kd">static</span> <span class="kd">final</span> <span class="n">Class</span> <span class="o">[]</span> <span class="n">constructorSignature</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span> <span class="o">[]</span>
</span><span class="line">                                          <span class="o">{</span><span class="n">CombineFileSplit</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">TaskAttemptContext</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="filelinewritablejava">FileLineWritable.java</h3>

<p>This file is very simple: store the file name and offset, and override the <code>compareTo</code> method to compare the file name first, then compare the offset.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.WritableComparable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileLineWritable</span> <span class="kd">implements</span> <span class="n">WritableComparable</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLong</span><span class="o">();</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">Text</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">out</span><span class="o">.</span><span class="na">writeLong</span><span class="o">(</span><span class="n">offset</span><span class="o">);</span>
</span><span class="line">    <span class="n">Text</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">FileLineWritable</span> <span class="n">that</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">fileName</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="na">fileName</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">signum</span><span class="o">((</span><span class="kt">double</span><span class="o">)(</span><span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">-</span> <span class="n">that</span><span class="o">.</span><span class="na">offset</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>               <span class="c1">// generated hashCode()</span>
</span><span class="line">    <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">fileName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">offset</span> <span class="o">^</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">));</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// generated equals()</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="n">FileLineWritable</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">CFFileLineWritableInputFormat</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">fileName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span><span class="o">))</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">offset</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="job-setup">job setup</h2>

<p>Finally is the job setup for hadoop cluster to run. We just need to assign the classes to job:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class="line"><span class="c1">// standard hadoop conf</span>
</span><span class="line"><span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">getConf</span><span class="o">());</span>
</span><span class="line"><span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">CFInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">MyMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// map only</span>
</span><span class="line"><span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The benchmark result is in the next post.</p>

<h2 id="download">Download</h2>

<p>The whole project can be downloaded from 
<a href="https://github.com/dryman/Hadoop-CombineFileInputFormat">Hadoop CombineFileInputFormat</a>.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my emacs setting on servers]]></title>
    <link href="http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers/"/>
    <updated>2013-08-29T10:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers</id>
    <content type="html"><![CDATA[<p>My desktop emacs config is complecated, however I need a minimal config for emacs installed on ubuntu servers. This is my note of how to configure emacs on servers that works for me.</p>

<!--more-->

<h2 id="emacs24">Emacs24</h2>

<p>First, I need to get Emacs24 installed on ubuntu, which is not by default. This link <a href="http://www.mikeyboldt.com/2011/11/30/install-emacs-24-in-ubuntu/">Install Emacs 24 in Ubuntu</a> is a great guide of how to install emacs 24. Here are the commands you need to type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo add-apt-repository ppa:cassou/emacs
</span><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install emacs24</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configure-packges-archives">Configure Packges Archives</h2>

<p>With Emacs 24, you can use the package managing system easily. Open your <code>~/.emacs</code> file and enter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span><span class="o">.</span><span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span><span class="o">.</span><span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the file, and <code>M-x eval-buffer</code>, then <code>M-x package-refresh-contents</code>. Now you’re ready to install most of the emacs plugins.</p>

<h2 id="plugins-i-installed">Plugins I installed</h2>

<ol>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/ParEdit">Paredit.el</a>: a mode for editing structured s-expressions, very useful for lisp based programs including emacs-lisp and clojure.</p>
  </li>
  <li>
    <p><a href="https://github.com/clojure-emacs/clojure-mode">clojure mode</a>: mode for editing clojure files </p>
  </li>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a>: Move your cursor to where you eyes are looking at.</p>
  </li>
</ol>

<h2 id="some-other-configs">Some other configs</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">global-visual-line-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">tool-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">show-paren-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">menu-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">inhibit-startup-message</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq-default</span> <span class="nv">indent-tabs-mode</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; it&#39;s dangerous to keep backup files in the same directory on the server</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">backup-directory-alist</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.&quot;</span> <span class="o">.</span> <span class="s">&quot;~/.backup_emacs&quot;</span><span class="p">))</span>
</span><span class="line">      <span class="nv">auto-save-file-name-transforms</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.*&quot;</span> <span class="s">&quot;~/.backup_emacs&quot;</span> <span class="nv">t</span><span class="p">))</span>
</span><span class="line">      <span class="nv">backup-by-copying</span> <span class="nv">t</span>    <span class="c1">; Don&#39;t delink hardlinks</span>
</span><span class="line">      <span class="nv">version-control</span> <span class="nv">t</span>      <span class="c1">; Use version numbers on backups</span>
</span><span class="line">      <span class="nv">delete-old-versions</span> <span class="nv">t</span>  <span class="c1">; Automatically delete excess backups</span>
</span><span class="line">      <span class="nv">kept-new-versions</span> <span class="mi">20</span>   <span class="c1">; how many of the newest versions to keep</span>
</span><span class="line">      <span class="nv">kept-old-versions</span> <span class="mi">5</span>    <span class="c1">; and how many of the old</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; configure paredit</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;clojure-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; auto complete for emacs lisp</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">tab-always-indent</span> <span class="ss">&#39;complete</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;completion-styles</span> <span class="ss">&#39;initials</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">global-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;RET&quot;</span><span class="p">)</span> <span class="ss">&#39;newline-and-indent</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; ace jump mode</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;&lt;ESC&gt;&lt;ESC&gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;ace-jump-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope these helps :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimal NodeJS router]]></title>
    <link href="http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router/"/>
    <updated>2013-08-16T15:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router</id>
    <content type="html"><![CDATA[<p>Here comes the problem, you’re prototyping a website that has powerful front-end like <a href="http://emberjs.com">EmberJS</a> or <a href="http://angularjs.org">AngularJS</a>, and sync JSON data with your NodeJS back-end, but you want your nodejs code to be lite and clean.</p>

<p>You can use some nodeJS framework like restify, expressJS, director or whatever, but is there a way to write a minimal router using regex and switch statements? Yes.</p>

<!--more-->

<p>The solution is pretty simple. JS switch statement can accept expressions as comparison keys, so simply do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./rest_route.js&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">Http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class="line">  <span class="k">switch</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers$&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">servers</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers/\\d&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">server</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/nodes&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/url/&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">urlapi</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>
</span><span class="line">      <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This may not as consistent as other heavy routers, but it’s really suitable for prototyping a new web app. Have fun and use it to hack your new weekend project!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing java programs on a remote server]]></title>
    <link href="http://www.idryman.org/blog/2013/07/14/writing-java-programs-on-a-remote-server/"/>
    <updated>2013-07-14T16:52:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/07/14/writing-java-programs-on-a-remote-server</id>
    <content type="html"><![CDATA[<p>Recently I started to work on hadoop and big data processing, but I was frustrated on eclipse and the development environment. We run hadoop on a remote cluster, but develop map-reduce programs on laptop. The development cycle was pretty slow because we need to upload the jar for every release. Another thing is Eclipse is too inefficient for a Vim and Emacs hacker like me. Thankfully I’m not the only one who think this way; Eric Van Dewoestine developed <a href="http://eclim.org/">Eclim</a> which can let you work on java programs on headless eclipse and vim/emacs! Here comes the installation steps:</p>

<!--more-->

<h3 id="install-eclipse">Install Eclipse</h3>

<p>I thought it wasn’t that difficult to install the Eclim on remote server, but actually it’s not that trivial to do. The key is to use local eclipse in your home directory instead of using package manager to install eclipse. I tried a whole afternoon, but still couldn’t make Eclim work with Ubuntu pre-packaged eclipse (using apt-get, of course).</p>

<p>To install eclipse, follow the links on it’s official website, and click linux download link to get the actual url. After it starts to download, stop the download process and copy the url. I couldn’t find direct download link on Eclipse website, maybe this shadowed link would help:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://carroll.aset.psu.edu/pub/eclipse/technology/epp/downloads/release/kepler/R/eclipse-standard-kepler-R-linux-gtk-x86_64.tar.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Extract the tar-ball somewhere in your home directory. The rest of the steps are as same as Eclim official installation guild.</p>

<h3 id="other-dependencies">Other dependencies</h3>

<p>Although we want to run Eclim in CLI environment, we still need X11 to run Eclipse daemon. To do so we need to install <code>xvfb</code> and other build tools.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo apt-get install xvfb build-essential
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="install-eclim">Install Eclim</h3>

<p>The rest of the steps are pretty easy. Note that I put eclipse at home directory; you may need to modify this parameter to your eclipse location.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://sourceforge.net/projects/eclim/files/eclim/2.2.7/eclim_2.2.7.jar/download
</span><span class="line">mv download eclim_2.2.7.jar
</span><span class="line">java -Dvim.files<span class="o">=</span><span class="nv">$HOME</span>/.vim -Declipse.home<span class="o">=</span><span class="nv">$HOME</span>/eclipse <span class="se">\</span>
</span><span class="line">     -jar eclim_2.2.7.jar install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="starting-eclim">Starting Eclim</h3>

<p>To start Eclim, first start a headless X11 display, then start the Eclim daemon.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Xvfb :1 -screen 0 1024x768x24 &amp;
</span><span class="line"><span class="nv">DISPLAY</span><span class="o">=</span>:1 ~/eclipse/eclimd
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default it will create a <code>workspace</code> in your home directory, you should put all your java projects there. When creating new projects, use <code>:ProjectCreate</code> in Vim (do not create yourself by <code>mkdir</code>, Eclim don’t know what that is). If you want to delete or rename a project, use <code>:ProjectDelete</code> and <code>:PorjectRename</code>.</p>

<p>Now you can reach whole eclipse ecosystem directly from vim! Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laziness and memoization in Clojure]]></title>
    <link href="http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure/"/>
    <updated>2013-06-27T20:01:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure</id>
    <content type="html"><![CDATA[<p>I’m now having a job at supplyframe Inc., and luckily I can use Clojure for work! Clojure is a young language created by Rich Hickey on 2007. It uses Lisp syntax, immutable data structures by default, and supports both strict and lazy evaluations. As Christ Okasaki suggested:</p>

<blockquote>
  <p>Strict evaluation is useful in implementing worst-case data structures and lazy evaluation is useful in implementing amortized data structures.</p>
</blockquote>

<p>It’s really cheap to define lazy or strict data structures in Clojure that has low amortized cost even in a persistent manner. Let’s dig into the source code and see how does Clojure implement it.</p>

<!--more-->

<p>Before we go into Clojure’s java source code, we can first look at the <code>memoize</code> function.</p>

<h2 id="memoize">Memoize</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="clj"><span class="line"><span class="p">(</span><span class="kd">defn </span><span class="nv">memoize</span>
</span><span class="line">  <span class="s">&quot;Returns a memoized version of a referentially transparent function. The</span>
</span><span class="line"><span class="s">  memoized version of the function keeps a cache of the mapping from arguments</span>
</span><span class="line"><span class="s">  to results and, when calls with the same arguments are repeated often, has</span>
</span><span class="line"><span class="s">  higher performance at the expense of higher memory use.&quot;</span>
</span><span class="line">  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.0&quot;</span>
</span><span class="line">   <span class="ss">:static</span> <span class="nv">true</span><span class="p">}</span>
</span><span class="line">  <span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class="line">  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">mem</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{})]</span>
</span><span class="line">    <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class="line">      <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">e</span> <span class="p">(</span><span class="nb">find </span><span class="err">@</span><span class="nv">mem</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class="line">        <span class="p">(</span><span class="nb">val </span><span class="nv">e</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">ret</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">)]</span>
</span><span class="line">          <span class="p">(</span><span class="nf">swap!</span> <span class="nv">mem</span> <span class="nb">assoc </span><span class="nv">args</span> <span class="nv">ret</span><span class="p">)</span>
</span><span class="line">          <span class="nv">ret</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The function is elegant; it captures whatever arguments that pass in the function, and pairs the arguments and the returned value to a persistent map. In order to make it thread safe, the persistent map is cast into an <code>atom</code> and can be modified via <code>swap!</code>.</p>

<p>This is nice. And since Clojure uses $\log_{32}(N)$ hash map, it is also fast enough to do a memoized lookup. For the implementation of Clojure’s persistent hash map, you can check out <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">this post</a>.</p>

<h2 id="lazy-seq">lazy-seq</h2>

<p>In contrast to <code>memoize</code>, which is implemented in Clojure, <code>lazy-seq</code> is implemented in java. It contains three fields:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">LazySeq</span> <span class="kd">extends</span> <span class="n">Obj</span> <span class="kd">implements</span> <span class="n">ISeq</span><span class="o">,</span> <span class="n">Sequential</span><span class="o">,</span> <span class="n">List</span><span class="o">,</span> <span class="n">IPending</span><span class="o">,</span> <span class="n">IHashEq</span><span class="o">{</span>
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="n">IFn</span> <span class="n">fn</span><span class="o">;</span>
</span><span class="line"><span class="kd">private</span> <span class="n">Object</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line"><span class="kd">private</span> <span class="n">ISeq</span> <span class="n">s</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>fn</code> is an un-evaluated thunk (function without arguments), and <code>sv</code> is the captured value after executing the thunk. The <code>ISeq s</code> is the realized version of the sequence.</p>

<p>When the program tries to realize the lazy sequence, it calls <code>seq()</code> and <code>sval()</code> functions.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">final</span> <span class="kd">synchronized</span> <span class="n">Object</span> <span class="nf">sval</span><span class="o">(){</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">fn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">		<span class="k">try</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="n">sv</span> <span class="o">=</span> <span class="n">fn</span><span class="o">.</span><span class="na">invoke</span><span class="o">();</span>
</span><span class="line">			<span class="n">fn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="k">catch</span><span class="o">(</span><span class="n">RuntimeException</span> <span class="n">e</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="k">throw</span> <span class="n">e</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">sneakyThrow</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">sv</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">final</span> <span class="kd">synchronized</span> <span class="kd">public</span> <span class="n">ISeq</span> <span class="nf">seq</span><span class="o">(){</span>
</span><span class="line">	<span class="n">sval</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">sv</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="o">{</span>
</span><span class="line">		<span class="n">Object</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">sv</span><span class="o">;</span>
</span><span class="line">		<span class="n">sv</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="k">while</span><span class="o">(</span><span class="n">ls</span> <span class="k">instanceof</span> <span class="n">LazySeq</span><span class="o">)</span>
</span><span class="line">			<span class="o">{</span>
</span><span class="line">			<span class="n">ls</span> <span class="o">=</span> <span class="o">((</span><span class="n">LazySeq</span><span class="o">)</span><span class="n">ls</span><span class="o">).</span><span class="na">sval</span><span class="o">();</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="n">s</span> <span class="o">=</span> <span class="n">RT</span><span class="o">.</span><span class="na">seq</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the <code>sval()</code> function, Clojure handles the caching elegantly. If <code>fn</code> is not null, execute it and stores the value to <code>sv</code>. If the <code>LazySeq</code> is dereferenced, the whole object will be recycled by the garbage collector, else the object will hold the value and is thread-safe to be accessed by other threads.</p>

<p>The <code>seq()</code> function is the wrapper around <code>sval()</code>. It realizes all <code>LazySeq</code> objects recursively, and wrap it into a <code>seq</code> object that implements <code>ISeq</code> interface.</p>

<p>With the realized <code>seq</code>, it can support common sequence functions like <code>first</code> and <code>next</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="n">Object</span> <span class="nf">first</span><span class="o">(){</span>
</span><span class="line">	<span class="n">seq</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">first</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="n">ISeq</span> <span class="nf">next</span><span class="o">(){</span>
</span><span class="line">	<span class="n">seq</span><span class="o">();</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>	
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>In Clojure’s documentation, it said that <code>lazy-seq</code> is cached after realizing it, but it didn’t document how it does it. Luckily the source code is pretty easy to understand. Clojure uses lazy sequences a lot, so knowing that it handles lazy sequence efficiently is important for all Clojure programmers. :) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Graphite on OSX]]></title>
    <link href="http://www.idryman.org/blog/2013/05/31/graphite-on-osx/"/>
    <updated>2013-05-31T16:59:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/31/graphite-on-osx</id>
    <content type="html"><![CDATA[<p>Installing graphite on OSX is a <em>pain</em>. This post is a quick note that I would never want to go through again. If you are looking this post, I’d suggest you to install graphite on linux.</p>

<p>Most installation steps are from this <a href="https://gist.github.com/oyiptong/2430817">gist</a>.</p>

<!--more-->

<h2 id="xquartz-and-cairo">Xquartz and Cairo</h2>

<p>If you don’t have X11 installed, go to <a href="http://xquartz.macosforge.org/landing/">xquartz</a> and install it on your mac. Then, install cairo via <code>homebrew</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install cairo
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pythonbrew">Pythonbrew</h2>

<p>Install pythonbrew and setup environment variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -kL http://xrl.us/pythonbrewinstall | bash
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;[[ -s $HOME/.pythonbrew/etc/bashrc ]] &amp;&amp; source $HOME/.pythonbrew/etc/bashrc&#39;</span> &gt;&gt; ~/.bashrc
</span><span class="line"><span class="o">[[</span> -s <span class="nv">$HOME</span>/.pythonbrew/etc/bashrc <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="nv">$HOME</span>/.pythonbrew/etc/bashrc
</span><span class="line">pythonbrew install -framework -f 2.7.2
</span><span class="line">pythonbrew use 2.7.2
</span><span class="line">pythonbrew venv create graphite
</span><span class="line">pythonbrew venv use graphite
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="python-cairo">Python-cairo</h3>

<p>This part is the real pain. On linux, just use <code>sudo apt-get install python-cairo</code>, it’s much much more simpler.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install autotools
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> ~/tmp
</span><span class="line">git clone git://git.cairographics.org/git/py2cairo
</span><span class="line"><span class="nb">cd </span>py2cairo
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">ACLOCAL_FLAGS</span><span class="o">=</span><span class="s2">&quot;-I /usr/local/Cellar/pkg-config/0.28/share/aclocal/&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">MY_PYTHON_PATH</span><span class="o">=</span><span class="sb">`</span>python -c <span class="s1">&#39;import sys; print sys.prefix&#39;</span>|perl -nle <span class="s1">&#39;m|^.*(?=/bin)|&#39;</span><span class="o">)</span>;print <span class="nv">$&amp;</span><span class="sb">`</span>
</span><span class="line">./autogen.sh --prefix<span class="o">=</span><span class="nv">$MY_PYTHON_PATH</span>
</span><span class="line">./configure
</span><span class="line">
</span><span class="line"><span class="nv">PKG_CONFIG_PATH</span><span class="o">=</span><span class="sb">`</span>brew --prefix cairo<span class="sb">`</span>/lib/pkgconfig ./configure --prefix<span class="o">=</span><span class="nv">$MY_PYTHON_PATH</span>
</span><span class="line">
</span><span class="line"><span class="nb">export </span><span class="nv">CAIRO_CFLAGS</span><span class="o">=</span><span class="s2">&quot;-I/usr/local/Cellar/cairo/1.12.14/include/cairo/&quot;</span>
</span><span class="line"><span class="nb">export </span><span class="nv">CAIRO_LIBS</span><span class="o">=</span><span class="s2">&quot;-L/usr/local/Cellar/cairo/1.12.14/lib/ -lcairo&quot;</span>
</span><span class="line">
</span><span class="line"><span class="nv">C_INCLUDE_PATH</span><span class="o">=</span>/opt/X11/include/ make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="python-dependencies">Python dependencies</h2>

<p>For the rest of the steps are all copied from the <a href="https://gist.github.com/oyiptong/2430817">gist</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pip install carbon
</span><span class="line">pip install whisper
</span><span class="line">pip install <span class="nv">django</span><span class="o">==</span>1.3.1
</span><span class="line">pip install django-tagging
</span><span class="line">pip install graphite-web
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="setup-graphite">Setup graphite</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /opt/graphite/webapp/graphite
</span><span class="line">python manage.py syncdb
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> /opt/graphite/conf
</span><span class="line">cp storage-schemas.conf.example storage-schemas.conf
</span><span class="line">cp carbon.conf.example carbon.conf
</span><span class="line">
</span><span class="line"><span class="nb">cd</span> /opt/graphite/webapp/graphite
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;TIME_ZONE = &#39;America/Los_Angeles&#39;&quot;</span> &gt; local_settings.py
</span><span class="line"><span class="c"># use appropriate timezone that you&#39;re in</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="running-graphite">Running graphite</h2>

<ol>
  <li>
    <p><code>/opt/graphite/bin/carbon-cache.py start</code></p>
  </li>
  <li>
    <p><code>/opt/graphite/bin/run-graphite-devel-server.py /opt/graphite</code></p>
  </li>
  <li>
    <p>Open your browser and hopefully <code>http://localhost:8080</code> is up</p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs loves iPython Notebook]]></title>
    <link href="http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook/"/>
    <updated>2013-05-29T11:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook</id>
    <content type="html"><![CDATA[<!--more-->

<h2 id="install">Install</h2>

<p>Installing emacs ipython notebook is pretty simple.</p>

<ol>
  <li>
    <p>follow the steps in <a href="http://www.idryman.org/blog/2013/03/13/python-setup-on-mac-osx/">Setting up Python on OSX Mountain Lion</a>.</p>
  </li>
  <li>
    <p>Refresh emacs packages <code>M-x package-refresh-contents</code></p>
  </li>
  <li>
    <p><code>M-x package-install</code> <code>ein</code></p>
  </li>
</ol>

<h2 id="usage">Usage</h2>

<ol>
  <li>
    <p><code>cd directory</code></p>
  </li>
  <li>
    <p><code>ipython notebook --pylab inline</code></p>
  </li>
  <li>
    <p><code>M-x ein:notebooklist-open</code></p>
  </li>
</ol>

<p>Than, check on <a href="https://github.com/tkf/emacs-ipython-notebook">Emacs IPython Notebook</a> to see what key-bindings you can use in EIN mode. I only use <code>C-c C-c</code> to execute a buffer, and <code>C-c C-u</code> for changing the cell type. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popular Clojure Projects]]></title>
    <link href="http://www.idryman.org/blog/2013/05/25/clojure-bookmarks/"/>
    <updated>2013-05-25T08:40:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/25/clojure-bookmarks</id>
    <content type="html"><![CDATA[<p>When I want to learn a new programming language, the best way is always learn from the best projects in that ecosystem. I grabbed several popular repositories that has high ratings on Github.</p>

<!--more-->

<h2 id="screen-casts">Screen casts</h2>

<ul>
  <li><a href="http://www.youtube.com/user/ClojureTV">ClojureTV</a></li>
</ul>

<ul>
  <li><a href="http://vimeo.com/channels/fulldisclojure/8320428">Disclojure</a></li>
</ul>

<ul>
  <li><a href="http://disclojure.org/archive/">Disclojure official blog</a></li>
</ul>

<h2 id="editor-integration">Editor integration</h2>

<ul>
  <li>
    <p><a href="https://github.com/clojure/tools.nrepl">nREPL</a></p>
  </li>
  <li>
    <p><a href="https://github.com/kingtim/nrepl.el">nREPL with Emacs</a></p>
  </li>
  <li>
    <p><a href="https://github.com/overtone/emacs-live">Emacs-live</a></p>
  </li>
</ul>

<h2 id="puzzles">Puzzles</h2>

<ul>
  <li>
    <p><a href="http://www.4clojure.com">4clojure</a> 4Clojure is a resource to help fledgling clojurians learn the language through interactive problems.</p>
  </li>
  <li>
    <p><a href="https://github.com/dcluna/4clj-el">4clojure in Emacs</a></p>
  </li>
</ul>

<h2 id="server-monitoring">Server monitoring</h2>

<ul>
  <li><a href="http://riemann.io">Riemann</a> Riemann aggregates events from your servers and applications with a powerful stream processing language.</li>
</ul>

<iframe src="http://player.vimeo.com/video/38377415" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/38377415">Kyle Kingsbury - Riemann</a> from <a href="http://vimeo.com/user8874650">Boundary</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/andrewvc/engulf">Engulf</a> Distributed HTTP load tester, written in Clojure and Javascript.</li>
</ul>

<h2 id="networking-and-html-related-stuffs">Networking and HTML related stuffs</h2>

<ul>
  <li>
    <p><a href="https://github.com/neotyk/http.async.client">http.async.client</a> Async Http Client - Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/aleph">Aleph</a> Aleph is a Clojure framework for asynchronous communication, built on top of Netty and Lamina.</p>
  </li>
  <li>
    <p><a href="http://http-kit.org/index.html">Http-Kit</a> HTTP Kit is a minimalist, efficient, Ring-compatible HTTP client/server for Clojure. It uses a event-driven architecture to support highly concurrent a/synchronous web applications.</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/compojure">Compojure</a> A concise routing DSL for Ring/Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/aphyr/jepsen">Jepsen</a> Call Me Maybe: simulating network partitions in DBs</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/hiccup">Hiccup</a> Fast library for rendering HTML in Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/Prismatic/plumbing">Plumbing</a> Graph is a simple and declarative way to specify a structured computation, which is easy to analyze, change, compose, and monitor</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/lamina">Lamina</a> Lamina is for describing and analyzing streams of data. It provides a rich set of operators for dealing with these unrealized values, both individually and collectively.</p>
  </li>
</ul>

<h2 id="testing">Testing</h2>

<ul>
  <li><a href="https://github.com/marick/Midje/">Midje</a> </li>
</ul>

<h2 id="data-processing">Data processing</h2>

<ul>
  <li><a href="https://github.com/liebke/incanter">Incanter</a> Incanter is a Clojure-based, R-like statistical computing and graphics environment for the JVM.</li>
</ul>

<ul>
  <li><a href="https://github.com/r0man/svm-clj">svm-clj</a></li>
</ul>

<ul>
  <li><a href="https://github.com/dakrone/clojure-opennlp">Clojure OpenNLP</a></li>
</ul>

<h2 id="arts">Arts</h2>

<ul>
  <li><a href="http://overtone.github.io">Overtone</a> Overtone is an open source audio environment designed to explore new musical ideas from synthesis and sampling to instrument building, live-coding and collaborative jamming.</li>
</ul>

<iframe src="http://player.vimeo.com/video/22798433" width="500" height="331" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/22798433">Quick Intro to Live Programming with Overtone</a> from <a href="http://vimeo.com/user568137">Sam Aaron</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/quil/quil">Quil drawing library</a></li>
</ul>

<h2 id="misc">Misc</h2>

<ul>
  <li><a href="https://github.com/fogus/marginalia">Marginalia</a> Literate programming</li>
</ul>

<ul>
  <li><a href="http://sqlkorma.com">SQLKorma</a></li>
</ul>

<ul>
  <li><a href="https://github.com/hugoduncan/criterium">Criterium</a> Benchmarking library for Clojure</li>
</ul>

<ul>
  <li><a href="https://github.com/bbatsov/clojure-style-guide">Clojure style guide</a></li>
</ul>

<ul>
  <li><a href="https://github.com/flatland/classlojure">classlojure</a> Advanced class loading for clojure</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LibSVM on Mac OSX]]></title>
    <link href="http://www.idryman.org/blog/2013/05/21/libsvm-on-mac-osx/"/>
    <updated>2013-05-21T11:51:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/21/libsvm-on-mac-osx</id>
    <content type="html"><![CDATA[<p>Here are the basic steps to install libSVM on Mac OSX.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">brew install gnuplot
</span><span class="line">brew install qt4
</span><span class="line">brew install libsvm
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Installing <code>libsvm</code> itself in system path is easy, however hombrew does not include demo-data, python/java integration, or other goodies. The finally installation in homebrew only consists these files:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">libsvm
</span><span class="line">libsvm/3.17
</span><span class="line">libsvm/3.17/bin
</span><span class="line">libsvm/3.17/bin/svm-predict
</span><span class="line">libsvm/3.17/bin/svm-scale
</span><span class="line">libsvm/3.17/bin/svm-train
</span><span class="line">libsvm/3.17/COPYRIGHT
</span><span class="line">libsvm/3.17/include
</span><span class="line">libsvm/3.17/include/svm.h
</span><span class="line">libsvm/3.17/INSTALL_RECEIPT.json
</span><span class="line">libsvm/3.17/lib
</span><span class="line">libsvm/3.17/lib/libsvm.2.dylib
</span><span class="line">libsvm/3.17/lib/libsvm.dylib
</span><span class="line">libsvm/3.17/README
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In this post, I’ll show you how to modify some Makefiles and create mac specific binaries.</p>

<!--more-->

<h2 id="python-java-or-gui-applications-qt">Python, java, or GUI applications (Qt)</h2>

<p>First, fetch the source code of <code>libsvm</code>, and compile it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">curl -LO http://www.csie.ntu.edu.tw/~cjlin/cgi-bin/libsvm.cgi?+http://www.csie.ntu.edu.tw/~cjlin/libsvm+tar.gz
</span><span class="line">tar xzvpf libsvm+tar.gz
</span><span class="line"><span class="nb">cd </span>libsvm-3.17
</span><span class="line">make
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="svm-toy-gui">SVM-Toy (GUI)</h3>

<p>Now, goto <code>svm-toy/qt</code> directory. Change the CFLAGS and MOC variable in the <code>Makefile</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="err">CXX?</span> <span class="err">=</span> <span class="err">g++</span>
</span><span class="line">
</span><span class="line"><span class="nv">CFLAGS</span> <span class="o">=</span> -Wall -O3 -I<span class="k">$(</span>INCLUDE<span class="k">)</span> -I<span class="k">$(</span>INCLUDE<span class="k">)</span>/QtGui -framework QtCore -framework QtGui -F/usr/local/Cellar/qt/4.8.4/lib/
</span><span class="line"><span class="nv">INCLUDE</span> <span class="o">=</span> /usr/local/Cellar/qt/4.8.4/include/
</span><span class="line"><span class="nv">MOC</span> <span class="o">=</span> moc
</span><span class="line">
</span><span class="line">svm-toy: svm-toy.cpp svm-toy.moc ../../svm.o
</span><span class="line">	<span class="k">$(</span>CXX<span class="k">)</span> <span class="k">$(</span>CFLAGS<span class="k">)</span> svm-toy.cpp ../../svm.o -o svm-toy
</span><span class="line">
</span><span class="line">svm-toy.moc: svm-toy.cpp
</span><span class="line">	<span class="k">$(</span>MOC<span class="k">)</span> svm-toy.cpp -o svm-toy.moc
</span><span class="line">
</span><span class="line">../../svm.o: ../../svm.cpp ../../svm.h
</span><span class="line">	make -C ../.. svm.o
</span><span class="line">
</span><span class="line">clean:
</span><span class="line">	rm -f *~ svm-toy svm-toy.moc ../../svm.o
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then <code>make</code>. The compile step should run successfully. Try the program <code>./svm-toy</code>, press <strong>load</strong> button and select a demo svm-file (heart_scale for example), then press <strong>run</strong>, you should see the result!</p>

<p><img src="http://www.idryman.org/images/select_heart_scale.png" alt="Select heart_scale" />
<img src="http://www.idryman.org/images/svm_toy.png" alt="svm toy" /></p>

<h3 id="python-interface">Python interface</h3>

<p>To use the python interface, just export the <code>PYTHONPATH</code> variable to where python utility fuction located at.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>libsvm-3.17/python
</span><span class="line"><span class="nb">echo</span> <span class="s2">&quot;export PYTHONPATH=\$PYTHONPATH:$(pwd)&quot;</span> &gt;&gt; ~/.bash_profile
</span><span class="line"><span class="nb">source</span> ~/.bash_profile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then read the README file in the same directory, and try out the example usage of python interface.</p>
]]></content>
  </entry>
  
</feed>
