<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-04-15T02:14:08+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Recursion best practices]]></title>
    <link href="http://www.idryman.org/blog/2012/04/14/recursion-best-practices/"/>
    <updated>2012-04-14T08:26:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/14/recursion-best-practices</id>
    <content type="html"><![CDATA[<p>There are many programming languages that support recursion. However, recursion
is hard to write, and even harder to write it well.</p>

<blockquote>
  <p>To iterate is human, to recurse, divine.</p>
</blockquote>

<p>If you also surveyed deeply in FP area, you will find a lot of patterns, such as
tail recursion, continuous passing style, combination of higher order functions,
fixed point y-combinator, memoization, and many more. You can see that a simple
factorial can be written in <a href="http://www.willamette.edu/~fruehr/haskell/evolution.html">23 different forms</a>. How do we
pick a better one?</p>

<blockquote>
  <p>In short, the only pattern you should use heavily is <em>tail recursion</em>. Use
other patterns only when necessary.</p>
</blockquote>

<!-- more -->

<h2 id="straight-body-recursion-the-problem">Straight (body) recursion, the problem</h2>

<p>Let’s begin with mostly seen recursions: factorial and fibonacci.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haskell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fac</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fac</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fac</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fib</span> <span class="mi">1</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you are programming in functional style, keep in mind of “non-functional”
execution.</p>

<pre><code>fac (5) = 5 * fac (4)
        = 5 * 4 * fac (3)
        = 5 * 4 * 3 * fac (2)
        = 5 * 4 * 3 * 2 * fac (1)
        = 5 * 4 * 3 * 2 * 1 * fac (0)
        = 5 * 4 * 3 * 2 * 1 * 1
        = 5 * 4 * 3 * 2 * 1
        = 5 * 4 * 3 * 2
        = 5 * 4 * 6
        = 5 * 24
        = 120
</code></pre>

<p>The problem is that the function has to use stack to hold number and multiply
to the value returned by the recursive function.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Also the fibonacci executing model:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-ff6b576e3a2600dd84a36f0059875404.svg" /></p>

<p>This is even worse, the complexity of fibonacci function cost $O(\phi^n)$ where
$\phi=\frac{1+\sqrt{5}}{2}$. </p>

<blockquote>
  <p>Whenever you use a returned value in your function body, there is a cost.</p>
</blockquote>

<p>We can reduce both factorial and fibonacci in tail recursion style using some
<em>accumulators</em>.</p>

<h2 id="tail-recursion">Tail recursion</h2>

<p>The common way to translate a body recursion into a tail recursion is to add a
accumulator in argument list.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fac</span> <span class="mi">0</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">acc</span>
</span><span class="line"><span class="nf">fac</span> <span class="n">n</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">fac</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>fac 5 1 = fac 4 5
        = fac 3 20
        = fac 2 60
        = fac 1 120
        = fac 0 120
        = 120
</code></pre>

<p>We reduce the execution steps from $2 n$ to $n$, and there is no stack variables
any more! Moreover, in assembly level, it only have to use <code>goto</code> to the front
of the function and no need to set up environment again.</p>

<p>Fibonacci can be transformed to tail recursive function like this<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fib&#39;</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">f1</span>
</span><span class="line"><span class="nf">fib&#39;</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="n">n</span> <span class="mi">1</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>fib' 5 1 1 = fib' 4 1 2
           = fib' 3 2 3
           = fib' 2 3 5
           = fib' 1 5 8
           = fib' 0 8 13
           = 8
</code></pre>

<p>This time we use two accumulator <code>f1</code> and <code>f2</code> to record the state and make it
more “iterative”. The original input <code>n</code> is treated as a “counter.”</p>

<blockquote>
  <p>Use multiple accumulators to make double recursion (like fibonacci) tail
recursive</p>
</blockquote>

<p>For different kinds of functional programming languages, you can abstract the
interface and hide details in language suggested ways:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haskell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="n">n</span> <span class="mi">1</span> <span class="mi">1</span>
</span><span class="line">    <span class="kr">where</span>
</span><span class="line">      <span class="n">fib&#39;</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">f1</span>
</span><span class="line">      <span class="n">fib&#39;</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Erlang </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nv">F1</span><span class="p">,</span><span class="nv">F2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">F1</span><span class="p">;</span>
</span><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span><span class="nv">F1</span><span class="p">,</span><span class="nv">F2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">F2</span><span class="p">,</span><span class="nv">F1</span><span class="o">+</span><span class="nv">F2</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Common Lisp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">rec</span> <span class="p">(</span><span class="nv">n</span> <span class="nv">f1</span> <span class="nv">f2</span><span class="p">)</span>
</span><span class="line">             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">zerop</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">f1</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">f2</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">f1</span> <span class="nv">f2</span><span class="p">)))))</span>
</span><span class="line">    <span class="p">(</span><span class="nv">rec</span> <span class="nv">n</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="returning-a-list">Returning a list</h2>

<p>When using tail recursion, we can also construct a returning list instead of a
atom:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">naive_reverse</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">naive_reverse</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">naive_reverse</span> <span class="n">xs</span><span class="p">)</span> <span class="o">++</span> <span class="n">x</span> <span class="c1">-- oops, used ++ operator!</span>
</span><span class="line">
</span><span class="line"><span class="nf">good_reverse</span> <span class="kt">[]</span>     <span class="n">acc</span> <span class="ow">=</span> <span class="n">acc</span>
</span><span class="line"><span class="nf">good_reverse</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">good_reverse</span> <span class="n">xs</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or, in common lisp:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">good-reverse</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nb">rest</span><span class="p">)</span> <span class="nv">acc</span>
</span><span class="line">      <span class="p">(</span><span class="nv">good-reverse</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">rest</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">rest</span><span class="p">)</span> <span class="nv">acc</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The key is to use <code>cons</code> (<code>:</code> in haskell, <code>|</code> in erlang) instead of list
concatenation operator (<code>++</code> in haskell and erlang.) The result of the left hand
side of the operator would be copied again and again and cause a quadratic
space and time complexity.</p>

<blockquote>
  <p>In common practices, use cons to build a reversed list, then reverse it at the
  end of recursion</p>
</blockquote>

<p>For example, if we want to return a list of fibonacci numbers<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">bad_fibs</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">fibs</span>
</span><span class="line"><span class="nf">bad_fibs</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">bad_fibs</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span> <span class="p">(</span><span class="n">fibs</span><span class="o">++</span><span class="n">f1</span><span class="p">)</span> <span class="c1">-- oops</span>
</span><span class="line">
</span><span class="line"><span class="nf">good_fibs</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">reverse</span> <span class="n">fibs</span> <span class="c1">-- here is the magic</span>
</span><span class="line"><span class="nf">good_fibs</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">good_fibs</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span> <span class="p">(</span><span class="n">f1</span><span class="kt">:</span><span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="manipulating-a-tree">Manipulating a tree</h2>

<p>This is the best part of this article, it might be a little bit hard to
understand at the first time. But once you get the idea, you’d just love it as I
did. I first saw this idea in <a href="http://www.bookshelf.jp/texi/onlisp/onlisp_5.html#SEC32">Paul Graham’s on lisp</a>. He named this
pattern as “doubly recursion.” Later on I saw people use this pattern in
<a href="http://en.literateprograms.org/Quicksort_(Erlang)">Quicksort (Erlang) - LiteratePrograms</a>, without naming the pattern. For
convenience I’d just use the term “doubly recursive” to express the idea :)</p>

<blockquote>
  <p>The key idea of doubly recursive is to use a returned accumulator as another
recursion’s accumulator</p>
</blockquote>

<p>I want to write the flattening function that takes a nested list and return a
flatten one in haskell, however different depths of list are different types and
thus you cannot simply write a general function to deal it. So I turned back to
use lisp to express it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">flatten</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">rec</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">                      <span class="p">((</span><span class="nb">atom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">x</span> <span class="nv">acc</span><span class="p">))</span>
</span><span class="line">                      <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span>
</span><span class="line">                              <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">acc</span><span class="p">))))))</span> <span class="c1">; use the returned acc as</span>
</span><span class="line">                                                     <span class="c1">; another rec&#39;s acc arg</span>
</span><span class="line">    <span class="p">(</span><span class="nv">rec</span> <span class="nv">x</span> <span class="no">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that <code>labels</code> are like <code>where</code> clause in haskell. The <code>rec</code> function will
take a input x and return a reversed order of flatten list.</p>

<p>You can also apply this pattern on quick sort<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">qsort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">partition</span> <span class="n">xs</span> <span class="kt">[]</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kt">[]</span>
</span><span class="line">    <span class="kr">where</span>
</span><span class="line">      <span class="n">partition</span> <span class="kt">[]</span> <span class="n">less</span> <span class="n">equal</span> <span class="n">greater</span> <span class="ow">=</span> <span class="n">qsort</span> <span class="n">less</span> <span class="p">(</span><span class="n">equal</span> <span class="o">++</span> <span class="p">(</span><span class="n">qsort</span> <span class="n">greater</span> <span class="n">acc</span><span class="p">))</span>
</span><span class="line">      <span class="n">partition</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="n">less</span> <span class="n">equal</span> <span class="n">greater</span>
</span><span class="line">          <span class="o">|</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">x</span>     <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="n">less</span>     <span class="n">equal</span>     <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">greater</span><span class="p">)</span>
</span><span class="line">          <span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">x</span>     <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">less</span><span class="p">)</span> <span class="n">equal</span>     <span class="n">greater</span>
</span><span class="line">          <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="n">less</span>     <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">equal</span><span class="p">)</span> <span class="n">greater</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="other-patterns">Other patterns</h2>

<h4 id="continuous-passing-style-cps">1. Continuous passing style (CPS)</h4>

<p>CPS is to pass a exit function to a function and let it call it at the end. The
concept is similar to tail recursion, but I think it is better to “make no
assumption about what user will do with your functions.” Leave your function
interface simple and elegant, because using CPS is <strong>micro optimization</strong>. </p>

<p>CPS is a powerful techniques, but you must use it wisely. For example, you can use it
in regular expression back tracing or garbage collection generation step. In
those example the function has to <em>jump</em> back to somewhere in the control flow,
and CPS can make the job done nice and clean.</p>

<p>But please don’t use CPS like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fib</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">k</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">fib-of-n-1</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">fib-of-n-2</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nf">k</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">fib-of-n-1</span> <span class="nv">fib-of-n-2</span><span class="p">)))</span> <span class="c1">; CPS</span>
</span><span class="line">              <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))</span>   <span class="c1">; inner fib</span>
</span><span class="line">       <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>         <span class="c1">; outer fib</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The CPS above will still cause $O(\phi^n)$ time and space order to do the
calculation!</p>

<h4 id="fixed-point-y-combinator">2. Fixed point y-combinator</h4>

<p>If you don’t know about y-combinator, just skip it.</p>

<p><a href="http://www.willamette.edu/~fruehr/haskell/evolution.html">The evolution of Haskell</a> suggested that fixed point
y-combinator is the fastest implementation of writing factorial in haskell, even
faster than tail recursion. However, it depends. In my benchmark it made no
differences on factorial function. And why do you want to make your function
hard to debug in a y-combinator? It is even hard to trace function calls in
Lisp’s <code>trace</code> commands.</p>

<h4 id="memoization">3. Memoization</h4>

<p>Memoization is also a powerful techniques that can benefit on rapid function
calls. It is a trade off of memory and speed. As CPS mentioned before, use it
wisely and not just for <strong>cool</strong>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There are not much design patterns on functional programming. I hope these
guidelines can be a start:</p>

<ol>
  <li>Whenever you use a returned value in your function body, there is a cost.</li>
  <li>Use multiple accumulators to make double recursion (like fibonacci) tail
recursive</li>
  <li>In common practices, use cons to build a reversed list, then reverse it at the
end of recursion</li>
  <li>The key idea of doubly recursive is to use a returned accumulator as another
recursion’s accumulator</li>
  <li>CPS and Memoization are powerful, but use it wisely</li>
</ol>

<p>Any discussion and suggestions are welcomed! Thanks!</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>In modern compiler the trivial straight recursion such as factorial will be
  optimized and make no big performance difference compare to the one written in
  tail recursion form.<a href="#fnref:1" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Take a look at how many possible ways to write 
  <a href="http://www.cliki.net/Fibonacci">fibonacci in common lisp</a>. There is also
  a way to write fibonacci in $O(log(n))$ order.<a href="#fnref:2" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The example is taken from 
  <a href="http://www.erlang.org/doc/efficiency_guide/listHandling.html">Erlang performance tuning – List handling</a>.<a href="#fnref:3" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Example taken from <a href="http://en.literateprograms.org/Quicksort_(Haskell)">Quicksort (haskell) - Literate Programs</a>.<a href="#fnref:4" rev="footnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical software verification using SPIN]]></title>
    <link href="http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN/"/>
    <updated>2012-04-10T10:31:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN</id>
    <content type="html"><![CDATA[<p>This is a note for the talk <a href="http://www.iis.sinica.edu.tw/page/events/FILE/120409.pdf">New frontiers in formal software verification</a> 
spoken by <a href="http://spinroot.com/gerard/">Gerard J. Holzmann</a>, software verification architect for 
<a href="http://www.jpl.nasa.gov/index.cfm">NASA Jet Propulsion Laboratory (JPL)</a>. He introduced a fast automatic software
verification tool for distributed software system – <a href="http://spinroot.com/spin/whatispin.html">SPIN</a>.</p>

<p><img src="http://www.idryman.org/images/graphviz/g-f44bd3841c23d32cc5d46f28821bf434.svg" />
<!-- more --></p>

<h3 id="background">Background</h3>

<p>After some ~30 years of development, formal software verification is still
rarely used on industrial applications. A typical computer science verification
proof would take 300+ of pages, much more than other mathematical proofs.</p>

<p>It is considered to be too difficult, and takes too long (months to years) to
verify a software (like UNIX, IBM360, garbage collectors…etc.) Even in safety
critical applications, software verification is often restricted to the
verification of models of software, instead of software.</p>

<blockquote>
  <p>Goal: Make software verification as simple as testing, and as fast as
  compilation.</p>
</blockquote>

<h3 id="practical-software-verification">Practical software verification</h3>

<p><a href="http://spinroot.com/gerard/">Holzmann</a> is the author of <a href="http://spinroot.com/spin/whatispin.html">SPIN</a>, a popular open-source software
tool, used for the formal verification of distributed software systems. It has
been applied at different fields:</p>

<ul>
  <li>Commercial phone switch</li>
  <li>Spacecraft for Mars mission</li>
  <li>Flood Control </li>
  <li>Toyota Camry MY05</li>
  <li>Medical device transmission protocols</li>
</ul>

<p>Back in 1999, SPIN can verify 4 million lines of code of phone switch system
within 40 minutes. And now it is used in spacecraft system and many other
mission critical softwares.</p>

<h3 id="pathstar-switch-1999">PathStar switch (1999)</h3>

<p>SPIN was designed for PathStar switch, it is</p>

<ul>
  <li>A commercial data/phone switch designed in Bell Labs research (for Lucent
Technologies)</li>
  <li>Newly written code for the core call processing engine</li>
  <li>The first commercial call processing code that is formally verified</li>
  <li>After the product is released, in decades every updates of the product 
code was proofed in fully automated procedure</li>
</ul>

<p>In a complex feature precedence relations detecting <strong>undesired feature</strong>
interaction is a serious problem. The verification system has to deal with:</p>

<ul>
  <li>feature interaction</li>
  <li>feature breakage</li>
  <li>concurrency problems</li>
  <li>race conditions</li>
  <li>deadlock scenarios</li>
  <li>non compliance with legal requirements…etc.</li>
</ul>

<p>SPIN breaks the whole verification problem into five steps<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> :</p>

<p><img src="http://www.idryman.org/images/graphviz/g-e6e8d45d4f940e9bbe1ee18190f2e7f6.svg" /></p>

<h4 id="building-the-model">Building the model</h4>

<p>The first step is one of the hardest part in SPIN system. SPIN is not a silver
bullet that can analysis any input of C code. They designed a subset of ANSI C
with <a href="http://spinroot.com/spin/Man/Manual.html">some rules</a>, to make the program as a distributed finite state
machine.</p>

<p>For example, the following code</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="err">@</span><span class="n">dial</span><span class="o">:</span>
</span><span class="line">      <span class="k">switch</span><span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nl">default:</span> <span class="k">goto</span> <span class="n">error</span><span class="p">;</span> <span class="cm">/* unexpected input */</span>
</span><span class="line">      <span class="k">case</span> <span class="n">Crdtmf</span>:         <span class="cm">/* digit collector ready */</span>
</span><span class="line">        <span class="n">x</span><span class="o">-&gt;</span><span class="n">drv</span><span class="o">-&gt;</span><span class="n">progress</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">Tdial</span><span class="p">);</span>
</span><span class="line">        <span class="n">time</span> <span class="o">=</span> <span class="n">MSEC</span><span class="p">(</span><span class="mi">16000</span><span class="p">);</span> <span class="cm">/* set timmer and wait event */</span>
</span><span class="line">
</span><span class="line">      <span class="cm">/* continue here */</span>
</span><span class="line">      <span class="err">@</span><span class="n">dial1</span><span class="o">:</span> <span class="k">switch</span><span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nl">default:</span> <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">crconn</span>: <span class="k">goto</span> <span class="n">B</span><span class="err">@</span><span class="n">lb</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">Cronhook</span>: <span class="cm">/* caller hangs up */</span>
</span><span class="line">          <span class="n">x</span><span class="o">-&gt;</span><span class="n">drv</span><span class="o">-&gt;</span><span class="n">disconnect</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">      <span class="err">@</span><span class="n">dial2</span><span class="o">:</span>  <span class="k">if</span><span class="p">(</span><span class="n">op</span><span class="o">!=</span><span class="n">Crconn</span> <span class="o">&amp;&amp;</span> <span class="n">op</span><span class="o">!=</span> <span class="n">rdis</span><span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">Aidle</span><span class="p">;</span>
</span><span class="line">            <span class="c1">// ...etc</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>can generate this FSM:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-2ba67537d29e5b408a448b873c67ff4a.svg" /></p>

<h3 id="abstraction-and-context-of-spin-model">Abstraction and context of SPIN model</h3>

<p>To verify the code we convert it into an automation: a labeled transition
system. The labels (transitions) are the basic statements from C.
Each statement can be converted via an abstraction – which is encoded as a
lookup table. While analysing the code, SPIN doesn’t care how the C code runs,
but deal with the abstracted FSM and tokenized input. This is why we call it
a “model analyser.”</p>

<p>The context of a SPIN looks like this:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-f44bd3841c23d32cc5d46f28821bf434.svg" /></p>

<p>Note that the <em>environment model</em> is not that hard to define. You just need to
declare that how many outlets of a switch: switch-to-switch, telephone inputs,
the amount of switches…etc.</p>

<h3 id="the-linear-time-temporal-logic-formulae-ltl">The linear time temporal logic formulae (LTL)</h3>

<p>For example, a requirement statement<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<blockquote>
  <p>When the phone goes <em>offhook</em>, a <em>dialtone</em> should occur.</p>
</blockquote>

<p>It can be expressed in LTL:</p>

<pre><code>!( !offhook U (offhook /\ X [] (!dialtone /\ !onhook)) )
</code></pre>

<ul>
  <li>U $\bigcup$ is strong until</li>
  <li>X $\bigcirc$ is next</li>
  <li>[] $\Box$ is always<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>

<p>You can also express it in formal symbols:</p>

<script type="math/tex; mode=display">
    \neg\left(\neg offhook \bigcup 
    \left( offhook \wedge \bigcirc \;\Box \left(\neg dialtone \bigcirc \neg onhook
    \right)\right)\right)
</script>

<p>If the requirement changed:</p>

<blockquote>
  <p>Assume, an $event_i$ should be added in between <em>offhook</em> and <em>response</em></p>
</blockquote>

<p>In LTL:</p>

<pre><code>X((eventi /\ !onhook) U (eventi /\ !onhook))
</code></pre>

<p>In formal logic:</p>

<script type="math/tex; mode=display">
    \bigcirc \left(\left(event_i \wedge \neg onhook\right) \bigcup 
    \left(event_i \wedge \neg onhook\right)\right)
</script>

<p>Once we have every thing prepared, SPIN will analysis the context using the
$\omega-automation$ technique and find out in what situations will cause bugs.</p>

<h2 id="fast-verification">Fast verification</h2>

<p>Traditionally we uses breadth first search or depth first search to iterate the
execution model for finding bugs. Since the execution is a non-determinism
model, the possible paths are in exponential order thus will cause stack
overflow before we find bugs.</p>

<p>Holzmann introduced <a href="http://spinroot.com/swarm/index.html">swarm verification preparation script</a> that can
separate the problem into small pieces of jobs and can be executed in parallel.</p>

<blockquote>
  <p>Swarm generates a script that performs many small verification jobs in
parallel, that can increase the problem coverage for very large verification
problems by about an order of magnitude compared to standard bitstate
verification runs. It is meant to be used on models for which standard
verification with exhaustive, bitstate, hash-compaction etc. either runs out
of memory, or takes more time than is available (e.g., days or weeks). Swarm
uses parallelism and search diversification to reach its objectives.</p>
</blockquote>

<blockquote>
  <p>The user can use a configuration file to define how many processing cores are
available, how much memory can be used, and how much time is maximally
available, among a range of other optional parameter settings. Based on this
information, swarm generates the script that runs as many independent jobs as
possible in parallel, without exceeding any of the user-defined constraints.
Swarm can run jobs using local CPU cores or remote machines in a grid network.</p>
</blockquote>

<hr />

<p>Holzmann also showed us swarm’s performance on NASA/JDL’s code:</p>

<ul>
  <li>11 bugs reports (50% of total) after 1 seconds. Faster than compilation!</li>
  <li>10 seconds and 90% of bugs are found.</li>
</ul>

<p>That is truly amazing!</p>

<h2 id="conclusion">Conclusion:</h2>

<p>Human brains are not perfect. It is easy to convince ourselves something is true
even it isn’t. A verification system like SPIN is not a project in ivory towel.
Instead, it can reproduce critical bugs in zero-failure missions (like mission to
Mars) or serious business programs. </p>

<p>Distributed system is a really hard problem and it is playing a important role
in cloud computing and parallel systems. For now we have bunch of map reduce
frameworks and no-SQL databases, but sometimes they just fails. How do we use a
good algorithm to check the consistency of the data? How do we verify our model
is correct? With SPIN, we can now verify the code within seconds ,and no more bug
tracing at 3:00AM. :D</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>All the plots are generated by my <a href="http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin/">graphviz plugin</a><a href="#fnref:1" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>The example is referenced from <a href="http://www.sable.mcgill.ca/~ebodde/mcs/timeline.ppt">this slide</a><a href="#fnref:2" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Check <a href="http://spinroot.com/spin/Man/ltl.html">SPIN LTL reference</a><a href="#fnref:3" rev="footnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress hacker news plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin/"/>
    <updated>2012-04-05T14:49:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin</id>
    <content type="html"><![CDATA[<h3 id="inspiration">Inspiration</h3>

<p>I found out that some cool blogs have a cute <em>hacker news like button</em> on each of its
posts. </p>

<p><img src="http://www.idryman.org/images/hn_like.png" /></p>

<p>The service is <a href="http://hnlike.com/">HN Like Button</a>, created by <a href="http://hacksandthoughts.posterous.com/">shashyal</a>.
To use it you can use the generator like so:</p>

<p><img src="http://www.idryman.org/images/gen_hn_like.png" /></p>

<p>However, we don’t want to do that every time, right? So I decided to write a
small Jekyll plugin to generate the button automatically. Hope you can enjoy it!</p>

<!-- more -->

<h3 id="the-hidden-api-of-hnlike">The hidden API of HNLike</h3>

<p>Well…not really. The generated html snippet looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;iframe</span> <span class="na">frameborder=</span><span class="s">&quot;no&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span> <span class="na">height=</span><span class="s">&quot;50px&quot;</span> <span class="na">width=</span><span class="s">&quot;350px&quot;</span>
</span><span class="line"> <span class="na">src=</span><span class="s">&quot;http://hnlike.com/upvote.php?link=http%3A%2F%2Fdryman.github.com%2Fblog%2F2012%2F04%2F04%2Fjekyll-graphviz-plugin%2F&amp;title=Jekyll%20Graphviz%20Plugin&quot;</span>
</span><span class="line"> <span class="nt">&gt;</span>iframes not supported by your browser<span class="nt">&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Observe that in the <code>src</code> after the <code>upvote.php?</code> there are only two
key valure pairs:</p>

<ol>
  <li><code>link=</code><strong>html link</strong></li>
  <li><code>&amp;title=</code><strong>title text</strong></li>
</ol>

<p>We just need to replace the <strong>html link</strong> and <strong>title text</strong> to our URL-escaped
string and it is done.</p>

<h3 id="integrate-with-jekyll">Integrate with Jekyll</h3>

<p>Jekyll/Octopress is designed to extend its functionality by users. For details
you can take a look at <a href="http://octopress.org/docs/theme/template/">Theming and Customization - Octopress</a>. Follow
the instructions, I simply added a new html snippet in <code>source/_includes/</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>hn_like.html </span><a href="https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html">link </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% if site.hn_like_button %}
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">hn_like</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">frameborder</span><span class="o">=</span><span class="s2">&quot;no&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">scrolling</span><span class="o">=</span><span class="s2">&quot;no&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="s2">&quot;28px&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;115px&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://hnlike.com/upvote.php?link=&quot;</span>
</span><span class="line">                    <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class="line">                    <span class="o">+</span> <span class="s2">&quot;&amp;title=&quot;</span>
</span><span class="line">                    <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;{{ page.title }}&quot;</span><span class="p">);</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;iframes not supported by your browser&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">twitter</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&quot;twitter-share-button&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">      <span class="nx">twitter</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span>
</span><span class="line">        <span class="nx">hn_like</span><span class="p">,</span>
</span><span class="line">        <span class="nx">twitter</span>
</span><span class="line">      <span class="p">);</span>
</span><span class="line">    <span class="p">})();</span>
</span><span class="line">  <span class="nt">&lt;/script&gt;</span>
</span><span class="line">{% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I modified the height and width otherwise it will be too big. Also I use jekyll
liquid helpers instead of <code>document.title</code> to form title text. Finally I use the
<code>twitter-share-button</code> element to position where I should insert the button in.</p>

<h3 id="installation-steps">Installation steps</h3>

<ol>
  <li>
    <p>To extend the built in snippet, download <a href="https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html">hn_like.html</a> into your 
<code>source/_includes</code> directory</p>
  </li>
  <li>
    <p>Add one line  <code>{% include hn_like.html %}</code>  into <code>source/_includes/after_footer.html</code>.</p>
  </li>
  <li>
    <p>Add</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1"># hacker news like button</span>
</span><span class="line"><span class="l-Scalar-Plain">hn_like_button</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>into your <code>_config.yml</code>.</p>

<h2 id="edit">Edit:</h2>

<p>The vote won’t update immediately. It will show up until hacker news index the
post and can be reached via HN search API.</p>

<h2 id="edit-2012-04-07">Edit: 2012-04-07</h2>

<p>I changed my domain name and all HN/Twitter/FB/G+ counts reset to zero. So I
submit the post to HN again.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress graphviz plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin/"/>
    <updated>2012-04-04T17:37:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin</id>
    <content type="html"><![CDATA[<p>I created a graphviz plugin for Octopress/Jekyll today. For example:</p>

<pre><code>{% graphviz %}
digraph G {
  compound=true;
  subgraph cluster0 {
  a -&gt; b;
  a -&gt; c;
  b -&gt; d;
  c -&gt; d;
  }
  subgraph cluster1 {
  e -&gt; g;
  e -&gt; f;
  }
  b -&gt; f [lhead=cluster1];
  d -&gt; e;
  c -&gt; g [ltail=cluster0, lhead=cluster1];
  c -&gt; e [ltail=cluster0];
  d -&gt; h;
}
{% endgraphviz %}
</code></pre>

<p>will produce:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-3feb8846aa4bb9767add244df8bed05a.svg" /></p>

<!-- more -->

<h3 id="installation">Installation:</h3>

<ol>
  <li>Download the file from <a href="https://github.com/dryman/dryman.github.com/blob/src/plugins/graphviz_block.rb">here</a>.</li>
  <li>Put it into your <code>my_octopress/plugin</code> folder.</li>
  <li>Add one line <code>source/images/graphviz</code> into your <code>.gitignore</code> file</li>
</ol>

<p>Remeber that you should have graphviz installed in your system. Else it will
raise an error.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (4)]]></title>
    <link href="http://www.idryman.org/blog/2012/04/01/persistent-red-black-tree-4/"/>
    <updated>2012-04-01T14:48:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/01/persistent-red-black-tree-4</id>
    <content type="html"><![CDATA[<h3 id="okasakis-purely-functional-red-black-tree">Okasaki’s purely functional red black tree</h3>

<p>The peristent red black tree in last post works ok, but the rotate functions and
color flip is not efficient for purely functional data sturctures.
In 1999, Okasaki introduced a new way to balance the insertion, and the function
only takes care of four unbalanced cases.</p>

<pre><code>Chris Okasaki,
"Red-Black Trees in a Functional Setting",
Journal of Functional Programming, 9(4),
pp471-477,
July 1999
</code></pre>

<p>The algorithm is easy to present in Haskell code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Okasaki&#8217;s red black tree insertion</span><a href="http://www.mew.org/~kazu/proj/red-black-tree/">Copied from Kazu Yamamoto&#8217;s website</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">data</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="o">|</span> <span class="kt">Fork</span> <span class="kt">Color</span> <span class="p">(</span><span class="kt">RBTree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">RBTree</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Color</span> <span class="ow">=</span> <span class="kt">R</span> <span class="o">|</span> <span class="kt">B</span>
</span><span class="line">
</span><span class="line"><span class="nf">insert</span> <span class="ow">::</span> <span class="kt">Ord</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">insert</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">B</span> <span class="n">d</span> <span class="n">e</span> <span class="n">f</span>
</span><span class="line">  <span class="kr">where</span>
</span><span class="line">    <span class="kt">Fork</span> <span class="kr">_</span> <span class="n">d</span> <span class="n">e</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">ins</span> <span class="n">a</span> <span class="n">b</span>
</span><span class="line">    <span class="n">ins</span> <span class="n">x</span> <span class="kt">Leaf</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="kt">Leaf</span> <span class="n">x</span> <span class="kt">Leaf</span>
</span><span class="line">    <span class="n">ins</span> <span class="n">x</span> <span class="n">t</span><span class="o">@</span><span class="p">(</span><span class="kt">Fork</span> <span class="n">c</span> <span class="n">l</span> <span class="n">y</span> <span class="n">r</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">compare</span> <span class="n">x</span> <span class="n">y</span> <span class="kr">of</span>
</span><span class="line">        <span class="kt">LT</span> <span class="ow">-&gt;</span> <span class="n">balanceL</span> <span class="n">c</span> <span class="p">(</span><span class="n">ins</span> <span class="n">x</span> <span class="n">l</span><span class="p">)</span> <span class="n">y</span> <span class="n">r</span>
</span><span class="line">        <span class="kt">GT</span> <span class="ow">-&gt;</span> <span class="n">balanceR</span> <span class="n">c</span> <span class="n">l</span> <span class="n">y</span> <span class="p">(</span><span class="n">ins</span> <span class="n">x</span> <span class="n">r</span><span class="p">)</span>
</span><span class="line">        <span class="kt">EQ</span> <span class="ow">-&gt;</span> <span class="n">t</span>
</span><span class="line">
</span><span class="line"><span class="nf">balanceL</span> <span class="ow">::</span> <span class="kt">Color</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="kt">B</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="n">c</span><span class="p">)</span> <span class="n">z</span> <span class="n">d</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="kt">B</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="n">c</span><span class="p">))</span> <span class="n">z</span> <span class="n">d</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>                           <span class="ow">=</span> <span class="kt">Fork</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>
</span><span class="line">
</span><span class="line"><span class="nf">balanceR</span> <span class="ow">::</span> <span class="kt">Color</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">))</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="n">c</span><span class="p">)</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Cool! This can be even reduced to only two cases in our <code>mtree-expand</code> and
<code>mtree-let</code> macro!</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">balance-o</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">z-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">z</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">balance-i</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="p">((</span><span class="nv">b</span> <span class="nv">z</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">y</span> <span class="nv">d</span><span class="p">))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">z</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">y-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">insert-oka</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">insert-oka</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">root</span> <span class="p">(</span><span class="k">if</span> <span class="nv">dir</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">is-red</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">                  <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">b</span> <span class="nv">dir</span><span class="p">)))</span> <span class="p">(</span><span class="nv">balance-o</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">                  <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span> <span class="p">(</span><span class="nv">balance-i</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">                  <span class="p">(</span><span class="no">T</span> <span class="nv">root</span><span class="p">))))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert</span> <span class="p">(</span><span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">setq</span> <span class="vg">*tree*</span> <span class="p">(</span><span class="nv">insert-oka</span> <span class="vg">*tree*</span> <span class="nv">data</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To test the running time:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">time</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="mi">1000000</span> <span class="nb">do</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; The original algorithm using rotate-s and rotate-d</span>
</span><span class="line">  <span class="mf">19.796</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nc">real</span> <span class="nb">time</span>
</span><span class="line">  <span class="mf">18.570645</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nv">total</span> <span class="nv">run</span> <span class="nb">time</span> <span class="p">(</span><span class="mf">17.423563</span> <span class="nv">user,</span> <span class="mf">1.147082</span> <span class="nv">system</span><span class="p">)</span>
</span><span class="line">  <span class="nv">[</span> <span class="nv">Run</span> <span class="nv">times</span> <span class="nv">consist</span> <span class="nv">of</span> <span class="mf">3.043</span> <span class="nv">seconds</span> <span class="nv">GC</span> <span class="nv">time,</span> <span class="nb">and</span> <span class="mf">15.528</span> <span class="nv">seconds</span> <span class="nv">non-GC</span> <span class="nv">time.</span> <span class="nv">]</span>
</span><span class="line">  <span class="nv">93.81%</span> <span class="nv">CPU</span>
</span><span class="line">  <span class="mi">47</span><span class="o">,</span><span class="mi">299</span><span class="o">,</span><span class="mi">915</span><span class="o">,</span><span class="mi">377</span> <span class="nv">processor</span> <span class="nv">cycles</span>
</span><span class="line">  <span class="mi">6</span><span class="o">,</span><span class="mi">522</span><span class="o">,</span><span class="mi">724</span><span class="o">,</span><span class="mi">144</span> <span class="nv">bytes</span> <span class="nv">consed</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; The Okasaki&#39;s algorithm</span>
</span><span class="line">  <span class="mf">13.005</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nc">real</span> <span class="nb">time</span>
</span><span class="line">  <span class="mf">12.193227</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nv">total</span> <span class="nv">run</span> <span class="nb">time</span> <span class="p">(</span><span class="mf">11.213534</span> <span class="nv">user,</span> <span class="mf">0.979693</span> <span class="nv">system</span><span class="p">)</span>
</span><span class="line">  <span class="nv">[</span> <span class="nv">Run</span> <span class="nv">times</span> <span class="nv">consist</span> <span class="nv">of</span> <span class="mf">2.513</span> <span class="nv">seconds</span> <span class="nv">GC</span> <span class="nv">time,</span> <span class="nb">and</span> <span class="mf">9.681</span> <span class="nv">seconds</span> <span class="nv">non-GC</span> <span class="nv">time.</span> <span class="nv">]</span>
</span><span class="line">  <span class="nv">93.76%</span> <span class="nv">CPU</span>
</span><span class="line">  <span class="mi">31</span><span class="o">,</span><span class="mi">073</span><span class="o">,</span><span class="mi">022</span><span class="o">,</span><span class="mi">018</span> <span class="nv">processor</span> <span class="nv">cycles</span>
</span><span class="line">  <span class="mi">4</span><span class="o">,</span><span class="mi">278</span><span class="o">,</span><span class="mi">336</span><span class="o">,</span><span class="mi">384</span> <span class="nv">bytes</span> <span class="nv">consed</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusions">Conclusions</h2>

<p>Lisp is designed for bottom-up programming. You first draft what you want to do,
then you can start to write some functions and macros to simplify it. When there
are more and more utilities you written, you can use it to experiment more
complicated algorithms, in a more elegant and self expressive style.</p>

<p>In purely functional structure, Haskell code  seems to be more elegant because
it has built in pattern matching, while we have to write one for Lisp. But Lisp
provides things more than functional programming, it can also be written in
procedure style, object-oriented style, or any other DSL that is best suitable
for your objective.</p>

<p>The macro system in lisp can also improve your thinking of designing a program.
Because you can always abstract your program structure as you writing it. In
other language you are trained to think top-down, while in lisp you are
encouraged to think back and forth. This process can shorten required time to
get enough experiences of programming. You don’t need a lot experiences to build
a complex algorithm in a bottom-up design process. It’s just come up naturally.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (3)]]></title>
    <link href="http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-3/"/>
    <updated>2012-03-31T16:33:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-3</id>
    <content type="html"><![CDATA[<h2 id="red-black-tree-algorithms">Red black tree algorithms</h2>

<p>There are two good articles that have good explanation on red-black tree
algorithms. For your references:</p>

<ol>
  <li><a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx">Julienne Walker’s red black tree tutorial</a></li>
  <li><a href="http://www.mew.org/~kazu/proj/red-black-tree/">Kazu Yamamoto’s purely functional left-leaning red black trees</a></li>
</ol>

<p>Julienne wrote a beautiful review article that show us not only the algorithm of
red black tree, but <em>how it is designed like so</em>. He also implemented an elegant
C program that can balance the tree in bottom-up or top-down ways. My previous
function <code>(kid root dir dir)</code> was inspired from his implementation.</p>

<p>Kazu reorganized several red black tree insertion algorithms, including Chris
Okasaki’s purely functional way. He also introduced a left-leaning insertion
algorithm that reduces one pattern matching compare to Okasaki’s one. The
programs are elegantly written in Haskell.</p>

<!-- more -->

<h3 id="orinal-red-black-tree-algorithm">Orinal red black tree algorithm</h3>

<p>In 1979, Guibas and Sedgewick published the original imperative red black trees:</p>

<pre><code>Leo J. Guibas and Robert Sedgewick.
"A dichromatic framework for balanced trees",
In Proceedings of the 19th Annual Symposium on Computer Science,
pp8-21,
IEEE Computer Society,
1978
</code></pre>

<p>The original one has eight <em>unbalanced</em> cases to deal with, while two are
reduced in “Introduction to Algorithms”. The algorithm was derived from
symmetric binary B-tree (2-3-4 tree) which was suggested by Rudof Bayer. All
paths from the root to a leaf in a SBB-tree contains the same number of nodes,
thus make it a perfectly balanced tree. However, it is not a binary search tree.
So Rober Sedgewick and Leonidas Guibas came up with a mnemonic abstraction that
can use red-nodes and black-nodes of a binary tree to simulate SBB-Tree. This is
how the algorithm is formed. To know the details, see 
<a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx">Julienne’s guide</a>.</p>

<p>Julienne modified the original bottom up algorithm to a no parent pointers
style:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Julienne&#8217;s red black tree insert implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_single</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dir</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">save</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">save</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
</span><span class="line">  <span class="n">save</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// Note that there&#39;s color changing here!</span>
</span><span class="line">  <span class="n">save</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">save</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_double</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dir</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">],</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="n">dir</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_insert_r</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class="line">    <span class="n">root</span> <span class="o">=</span> <span class="n">make_node</span> <span class="p">(</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">data</span> <span class="o">!=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">jsw_insert_r</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">],</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* Case 1 Color flip */</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* Cases 2 &amp; 3 */</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">          <span class="n">root</span> <span class="o">=</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">          <span class="n">root</span> <span class="o">=</span> <span class="n">jsw_double</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">jsw_insert</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_tree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">jsw_insert_r</span> <span class="p">(</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">  <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="implementation-in-lisp">Implementation in Lisp</h3>

<p>Julienne’s bottom-up algorithm can be easily to be re-written in purely
functional style. The ugly part is the color flipping and assign new branches to
nodes.</p>

<p>Though we can do the color flipping as</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">))</span> <span class="no">nil</span>
</span><span class="line">      <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">a</span><span class="p">))</span> <span class="no">T</span>
</span><span class="line">      <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">b</span><span class="p">))</span> <span class="no">T</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but the tree would be non-persistent. So we need to create new node with new
property of red or black.</p>

<p>I also separate the cases into two function <code>color-flip</code> and
<code>rb-insert-case-rest</code>. Thus the code would be easier to debug and profile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">node</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">            <span class="p">((</span><span class="nv">x-r</span> <span class="p">(</span><span class="nv">to-r</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class="line">            <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y-b</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x-r</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-d</span> <span class="p">(</span><span class="nv">node</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">            <span class="p">((</span><span class="nv">a-new</span> <span class="p">(</span><span class="nv">rotate-s</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span>
</span><span class="line">            <span class="p">(</span><span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a-new</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">))</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Color flipping utilities </span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">to-r</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">:red</span> <span class="no">T</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">to-b</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">:red</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">color-flip</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z</span> <span class="nv">d</span><span class="p">))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">x-r</span> <span class="p">(</span><span class="nv">to-r</span> <span class="nv">x</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nv">z-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">z</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y-b</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x-r</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert-case-rest</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span> <span class="nv">dir</span><span class="p">))</span> <span class="p">(</span><span class="nv">rotate-s</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">((</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span> <span class="p">(</span><span class="nv">rotate-d</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert-r</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">               <span class="p">((</span><span class="nv">b</span> <span class="p">(</span><span class="nv">rb-insert-r</span> <span class="nv">b</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">                <span class="p">(</span><span class="nv">root</span> <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class="line">               <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">a</span><span class="p">)</span>
</span><span class="line">                   <span class="p">(</span><span class="nv">color-flip</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>            <span class="c1">; case 1</span>
</span><span class="line">                   <span class="p">(</span><span class="nv">rb-insert-case-rest</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>  <span class="c1">; case 2 and 3</span>
</span><span class="line">                 <span class="nv">root</span><span class="p">))))))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert</span> <span class="p">(</span><span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">ret</span> <span class="p">(</span><span class="nv">rb-insert-r</span> <span class="vg">*tree*</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">ret</span><span class="p">))</span>            <span class="c1">;; Set the root node to be black</span>
</span><span class="line">         <span class="p">(</span><span class="nv">x-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">ret</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">ret</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">setf</span> <span class="vg">*tree*</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="nv">x-b</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">    <span class="vg">*tree*</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When the cases in function are separated, it is easy to tell how the program is being called:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nb">trace</span> <span class="nv">rb-insert-r</span> <span class="nv">rb-insert-case-rest</span> <span class="nv">color-flip</span> <span class="nv">rotate-s</span> <span class="nv">rotate-d</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="p">(</span><span class="nv">RB-INSERT-R</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="nv">RB-INSERT-R</span> <span class="nv">returned</span> <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="p">(</span><span class="nv">RB-INSERT-R</span> <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">      <span class="nv">2:</span> <span class="p">(</span><span class="nv">ROTATE-S</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">      <span class="nv">2:</span> <span class="nv">ROTATE-S</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">  <span class="nv">0:</span> <span class="nv">RB-INSERT-R</span> <span class="nv">returned</span>
</span><span class="line">       <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>I modified the definition of <code>rb</code> structure to make it print prettier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defstruct</span>
</span><span class="line">  <span class="p">(</span><span class="nv">rb</span> <span class="p">(</span><span class="ss">:print-function</span>
</span><span class="line">        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">p</span> <span class="nv">s</span> <span class="nv">k</span><span class="p">)</span>
</span><span class="line">          <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">k</span><span class="p">)(</span><span class="k">type</span> <span class="nc">stream</span> <span class="nv">s</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nb">format</span> <span class="nv">s</span> <span class="s">&quot;~d-~:[b~;r~]&quot;</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nv">rb-red</span> <span class="nv">p</span><span class="p">)))))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">red</span> <span class="no">T</span> <span class="ss">:read-only</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">data</span> <span class="mi">0</span> <span class="ss">:type</span> <span class="kt">fixnum</span> <span class="ss">:read-only</span> <span class="no">T</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So that when <code>Lisp</code> want to print a <code>rb</code> with data is <code>8</code> and red is <code>nil</code>, it
would print <code>8-b</code> instead of <code>#S(RB :data 8 :red nil)</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (2)]]></title>
    <link href="http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-2/"/>
    <updated>2012-03-31T09:22:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-2</id>
    <content type="html"><![CDATA[<h3 id="single-rotate">Single rotate</h3>

<p>Using the <code>kid</code> utility, we can make rotate single to be simpler too:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="c1">;;       x              y</span>
</span><span class="line"><span class="c1">;;     /   \          /   \</span>
</span><span class="line"><span class="c1">;;    y     c   =&gt;   a     x       </span>
</span><span class="line"><span class="c1">;;  /   \                 / \</span>
</span><span class="line"><span class="c1">;; a     b               b   c</span>
</span><span class="line"><span class="c1">;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">y</span> <span class="p">(</span><span class="nb">cadr</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="k">if</span> <span class="nv">dir</span>
</span><span class="line">        <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="nv">y</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">b</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">c</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">y</span> <span class="nv">a</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Observe that the two return form is nested reversed. Why not write a macro that
generate this form? Then we only need to write the right case!</p>

<!-- more -->

<h3 id="reverse-the-tree">Reverse the tree</h3>

<p>First we need to write a function that take a nested form and return it in
reversed order (also nested.) To achieve this, we use double recursion.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">tree-to-rev</span> <span class="p">(</span><span class="nv">tree</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">         <span class="p">((</span><span class="nb">consp</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nv">tree-to-rev</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">tree-to-rev</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="nv">tree-to-rev</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">tree-to-rev</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">d</span> <span class="nv">e</span><span class="p">))</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">((</span><span class="nv">E</span> <span class="nv">D</span> <span class="nv">C</span><span class="p">)</span> <span class="nv">B</span> <span class="nv">A</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Recall that we need to add <code>list</code> at the beginning of returned form. So rewrite
the function as</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">tree-to-rev-list</span> <span class="p">(</span><span class="nv">tree</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="ss">&#39;list</span> <span class="nv">acc</span><span class="p">))</span>
</span><span class="line">         <span class="p">((</span><span class="nb">consp</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nv">tree-to-rev-list</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">tree-to-rev-list</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="nv">tree-to-rev-list</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">tree-to-list</span> <span class="p">(</span><span class="nv">tree</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">   <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="ss">&#39;list</span> <span class="p">(</span><span class="nb">reverse</span> <span class="nv">acc</span><span class="p">)))</span>
</span><span class="line">         <span class="p">((</span><span class="nb">consp</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nv">tree-to-list</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nv">tree-to-list</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="nv">tree-to-list</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">tree-to-rev-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">d</span> <span class="nv">e</span><span class="p">))</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">LIST</span> <span class="p">(</span><span class="nv">LIST</span> <span class="nv">E</span> <span class="nv">D</span> <span class="nv">C</span><span class="p">)</span> <span class="nv">B</span> <span class="nv">A</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">tree-to-list</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">d</span> <span class="nv">e</span><span class="p">))</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nv">LIST</span> <span class="nv">A</span> <span class="nv">B</span> <span class="p">(</span><span class="nv">LIST</span> <span class="nv">C</span> <span class="nv">D</span> <span class="nv">E</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="macro-that-simplify-the-return-form">Macro that simplify the return form</h3>

<p>Now we write a macro that we only need to pass it the right case:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">mtree-expand</span> <span class="p">(</span><span class="nv">dir</span> <span class="nv">tree</span><span class="p">)</span>
</span><span class="line">  <span class="o">`</span><span class="p">(</span><span class="k">if</span> <span class="o">,</span><span class="nv">dir</span>
</span><span class="line">      <span class="o">,</span><span class="p">(</span><span class="nv">tree-to-list</span> <span class="nv">tree</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line">      <span class="o">,</span><span class="p">(</span><span class="nv">tree-to-rev-list</span> <span class="nv">tree</span> <span class="no">nil</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nb">macroexpand-1</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">))))</span>
</span><span class="line"><span class="p">(</span><span class="nv">IF</span> <span class="nv">DIR</span>
</span><span class="line">    <span class="p">(</span><span class="nv">LIST</span> <span class="nv">A</span> <span class="nv">Y</span> <span class="p">(</span><span class="nv">LIST</span> <span class="nv">B</span> <span class="nv">X</span> <span class="nv">C</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="nv">LIST</span> <span class="p">(</span><span class="nv">LIST</span> <span class="nv">C</span> <span class="nv">X</span> <span class="nv">B</span><span class="p">)</span> <span class="nv">Y</span> <span class="nv">A</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now the <code>insert-binary-r</code> and <code>rotate-s</code> can be re-written only in right form!</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="c1">;;       x              y</span>
</span><span class="line"><span class="c1">;;     /   \          /   \</span>
</span><span class="line"><span class="c1">;;    y     c   =&gt;   a     x       </span>
</span><span class="line"><span class="c1">;;  /   \                 / \</span>
</span><span class="line"><span class="c1">;; a     b               b   c</span>
</span><span class="line"><span class="c1">;;</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">x</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">y</span> <span class="p">(</span><span class="nb">cadr</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">insert-binary-r</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">x</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">data</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="macro-that-simplify-the-input-form">Macro that simplify the input form</h3>

<p>We also want to simplify that ugly <code>let</code> form, so we create this function and
macro:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">gen-let</span> <span class="p">(</span><span class="nv">dir</span> <span class="nv">node</span> <span class="nv">form</span> <span class="nv">dirs</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">atom</span> <span class="nv">form</span><span class="p">)</span>
</span><span class="line">    <span class="o">`</span><span class="p">((</span><span class="o">,</span><span class="nv">form</span> <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nv">kid</span> <span class="o">,</span><span class="nv">node</span> <span class="o">,</span><span class="p">(</span><span class="nb">cons</span> <span class="ss">&#39;list</span> <span class="p">(</span><span class="nb">reverse</span> <span class="nv">dirs</span><span class="p">)))))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">cons</span> <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">cadr</span> <span class="nv">form</span><span class="p">)</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cadr</span> <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nv">kid</span> <span class="o">,</span><span class="nv">node</span> <span class="o">,</span><span class="p">(</span><span class="nb">cons</span> <span class="ss">&#39;list</span> <span class="p">(</span><span class="nb">reverse</span> <span class="nv">dirs</span><span class="p">)))))</span>
</span><span class="line">          <span class="p">(</span><span class="nb">append</span> <span class="p">(</span><span class="nv">gen-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="o">`</span><span class="p">(</span><span class="nb">not</span> <span class="o">,</span><span class="nv">dir</span><span class="p">)</span> <span class="nv">dirs</span><span class="p">))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">gen-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">dir</span> <span class="nv">dirs</span><span class="p">))))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defmacro</span> <span class="nv">mtree-let</span> <span class="p">(</span><span class="nv">dir</span> <span class="nv">node</span> <span class="nv">form</span> <span class="nv">let-var</span> <span class="k">&amp;body</span> <span class="nv">body</span><span class="p">)</span>
</span><span class="line">   <span class="o">`</span><span class="p">(</span><span class="k">let</span> <span class="o">,</span><span class="p">(</span><span class="nv">gen-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="nv">form</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line">       <span class="p">(</span><span class="k">let*</span> <span class="o">,</span><span class="nv">let-var</span>
</span><span class="line">           <span class="o">,@</span><span class="nv">body</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And then you can rewrite <code>rotate-s</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">node</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">    <span class="no">nil</span>
</span><span class="line">    <span class="p">(</span><span class="nv">mtree-expand</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>See? We don’t need to write the comment to remind us the relative position of
variables. The code express itself! You can see what this code will expand
to by expanding the macro:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nb">macroexpand-1</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">                          <span class="no">nil</span>
</span><span class="line">                          <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class="line"><span class="p">(</span><span class="nv">LET</span> <span class="p">((</span><span class="nv">X</span> <span class="p">(</span><span class="nv">CADR</span> <span class="p">(</span><span class="nv">APPLY</span> <span class="nf">#&#39;</span><span class="nv">KID</span> <span class="nv">NODE</span> <span class="p">(</span><span class="nv">LIST</span><span class="p">))))</span>
</span><span class="line">      <span class="p">(</span><span class="nv">Y</span> <span class="p">(</span><span class="nv">CADR</span> <span class="p">(</span><span class="nv">APPLY</span> <span class="nf">#&#39;</span><span class="nv">KID</span> <span class="nv">NODE</span> <span class="p">(</span><span class="nv">LIST</span> <span class="p">(</span><span class="nv">NOT</span> <span class="nv">DIR</span><span class="p">)))))</span>
</span><span class="line">      <span class="p">(</span><span class="nv">A</span> <span class="p">(</span><span class="nv">APPLY</span> <span class="nf">#&#39;</span><span class="nv">KID</span> <span class="nv">NODE</span> <span class="p">(</span><span class="nv">LIST</span> <span class="p">(</span><span class="nv">NOT</span> <span class="nv">DIR</span><span class="p">)</span> <span class="p">(</span><span class="nv">NOT</span> <span class="nv">DIR</span><span class="p">))))</span>
</span><span class="line">      <span class="p">(</span><span class="nv">B</span> <span class="p">(</span><span class="nv">APPLY</span> <span class="nf">#&#39;</span><span class="nv">KID</span> <span class="nv">NODE</span> <span class="p">(</span><span class="nv">LIST</span> <span class="p">(</span><span class="nv">NOT</span> <span class="nv">DIR</span><span class="p">)</span> <span class="nv">DIR</span><span class="p">)))</span>
</span><span class="line">      <span class="p">(</span><span class="nv">C</span> <span class="p">(</span><span class="nv">APPLY</span> <span class="nf">#&#39;</span><span class="nv">KID</span> <span class="nv">NODE</span> <span class="p">(</span><span class="nv">LIST</span> <span class="nv">DIR</span><span class="p">))))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">LET*</span> <span class="p">()</span>
</span><span class="line">    <span class="p">(</span><span class="nv">MTREE-EXPAND</span> <span class="nv">DIR</span> <span class="p">(</span><span class="nv">A</span> <span class="nv">Y</span> <span class="p">(</span><span class="nv">B</span> <span class="nv">X</span> <span class="nv">C</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (1)]]></title>
    <link href="http://www.idryman.org/blog/2012/03/30/persistent-red-black-tree-in-lisp-1/"/>
    <updated>2012-03-30T13:57:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/30/persistent-red-black-tree-in-lisp-1</id>
    <content type="html"><![CDATA[<p>I’m a newbie to Lisp programing language. Lisp is one of the most oldest
programming language that is still being used today. People have a lot of
defences on programming languages, because there are too many choices to us
today. Every language has their strength and weakness. It is not easy to make
the choice.</p>

<p>In my opinion, the best way to decide what languages I must learn is to
see which kinds of people are loving it. 
For example, Ruby community does great supports for business plans; Python is
the best open sourced language for academia uses (scientific libraries, machine
learning, computer vision, statistics, visualizations…etc.) Many old school
hackers (including me) still love to use Perl; Java is widely used in big
companies; VBA is friendly for dealing excel data…etc. And <strong>Lisp</strong>, are
highly recommended by great hackers. </p>

<!-- more -->

<hr />

<p>If you are also interested in Lisp, I recommend <a href="http://www.gigamonkeys.com/book/">Practical Common
Lisp</a> written by <a href="http://www.gigamonkeys.com/">Peter Seibel</a>, and <a href="http://paulgraham.com/onlisp.html">On Lisp</a> written
by <a href="http://paulgraham.com/">Paul Graham</a>. Both of them are free, downloadable PDF files, and
there are also online version and epub format.</p>

<hr />

<h3 id="basic-thoughts">Basic thoughts</h3>

<p>Let’s begin with basic structures. At first, I design the structure similar to
what you will write in C code.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defstruct</span> <span class="nv">rb</span>
</span><span class="line">  <span class="nv">left</span>
</span><span class="line">  <span class="nv">right</span>
</span><span class="line">  <span class="nv">red</span>
</span><span class="line">  <span class="nv">data</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here we can see the power of Lisp. It does not only create the structure, but
also create constructor and accessors for the structure. Now you can create the
<code>rb</code> and access it like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">node</span>
</span><span class="line">  <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:left</span> <span class="no">nil</span> <span class="ss">:right</span> <span class="no">nil</span> <span class="ss">:red</span> <span class="no">T</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:left</span> <span class="no">nil</span> <span class="ss">:right</span> <span class="no">nil</span> <span class="ss">:red</span> <span class="no">T</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">rb-left</span> <span class="nv">node</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="no">nil</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">rb-data</span> <span class="nv">node</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="mi">3</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nv">rb-right</span> <span class="nv">node</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="mi">5</span><span class="p">))</span> <span class="c1">; Other field are default as nil</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:left</span> <span class="no">nil</span>
</span><span class="line">          <span class="ss">:right</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:left</span> <span class="no">nil</span> <span class="ss">:right</span> <span class="no">nil</span> <span class="ss">:red</span> <span class="no">nil</span> <span class="ss">:data</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line">          <span class="ss">:red</span> <span class="no">T</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This seems to be nice. But we can rewrite it in more lispy style:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defstruct</span> <span class="nv">rb</span>
</span><span class="line">  <span class="p">(</span><span class="nv">red</span> <span class="no">T</span><span class="p">)</span> <span class="c1">; default value for red</span>
</span><span class="line">  <span class="nv">data</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; A node can be represented as</span>
</span><span class="line"><span class="c1">;; (nil #S(RB :red T :data 3) nil)</span>
</span><span class="line"><span class="c1">;; To generate this:</span>
</span><span class="line"><span class="p">(</span><span class="nb">list</span> <span class="no">nil</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="p">(</span><span class="no">nil</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:red</span> <span class="no">T</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; You can also use lisp syntax candy</span>
</span><span class="line"><span class="o">`</span><span class="p">(</span><span class="nb">list</span> <span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">==&gt;</span> <span class="p">(</span><span class="no">nil</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:red</span> <span class="no">T</span> <span class="ss">:data</span> <span class="mi">3</span><span class="p">)</span> <span class="no">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The s-expression with a preceding <code>`</code> means that it is a expression that
lisp don’t evaluate, except expression inside it with a preceding <code>,</code>. It is
convenient for us to generate new list object.</p>

<p>To access the elements in a list:</p>

<ol>
  <li><code>car</code> the first</li>
  <li><code>cadr</code> the second</li>
  <li><code>caddr</code> the third</li>
</ol>

<p>And now we can wirte a persistant basic binary insert function!</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span>                            <span class="c1">; cond works like &quot;switch&quot;</span>
</span><span class="line">          <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>     <span class="c1">; make node when reach leaf</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)))</span> <span class="nv">root</span><span class="p">)</span>   <span class="c1">; return self if data is the same</span>
</span><span class="line">        <span class="p">((</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">data</span><span class="p">)))</span> <span class="c1">; case insert to right</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span>
</span><span class="line">         <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">               <span class="p">(</span><span class="nb">caddr</span> <span class="nv">root</span><span class="p">)))))</span>                      <span class="c1">; case insert to left</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>                     <span class="c1">; global variable *tree*</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">binary-insert</span> <span class="p">(</span><span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">setf</span> <span class="vg">*tree*</span> <span class="p">(</span><span class="nv">binary-insert-r</span> <span class="vg">*tree*</span> <span class="nv">data</span><span class="p">))</span> <span class="c1">; set *tree* as the returned tree</span>
</span><span class="line">  <span class="vg">*tree*</span><span class="p">)</span>                                     <span class="c1">; return *tree* value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s exam the function:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="nv">BINARY-INSERT-R</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">binary-insert</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">6</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">binary-insert</span> <span class="mi">7</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">6</span><span class="p">)</span> <span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">7</span><span class="p">)</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">binary-insert</span> <span class="mi">5</span><span class="p">)</span>
</span><span class="line"><span class="p">((</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">5</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line"> <span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">7</span><span class="p">)</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">binary-insert</span> <span class="mi">8</span><span class="p">)</span>
</span><span class="line"><span class="p">((</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">5</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">6</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">7</span><span class="p">)</span> <span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">8</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="wait-hold-on">Wait! Hold on!</h3>

<p>The code is god damn ugly! We can fix it with some utilities:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">kid</span> <span class="p">(</span><span class="nv">root</span> <span class="k">&amp;rest</span> <span class="nv">dirs</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">consp</span> <span class="nv">dirs</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">dirs</span><span class="p">)</span>
</span><span class="line">             <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">root</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">dirs</span><span class="p">))</span>
</span><span class="line">             <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nv">kid</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">root</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">dirs</span><span class="p">))))</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">node-data</span> <span class="p">(</span><span class="nv">root</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">rb-data</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>kid</code> takes a node and a series of <code>T</code> and <code>nil</code>; When it saw a <code>T</code>, it
returns the right node, or it will return the left one. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">kid</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>            <span class="c1">; left node</span>
</span><span class="line"><span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">5</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">kid</span> <span class="vg">*tree*</span> <span class="no">T</span><span class="p">)</span>              <span class="c1">; right node</span>
</span><span class="line"><span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">7</span><span class="p">)</span> <span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">8</span><span class="p">)</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">kid</span> <span class="vg">*tree*</span> <span class="no">T</span> <span class="no">T</span><span class="p">)</span>            <span class="c1">; right right node</span>
</span><span class="line"><span class="p">(</span><span class="no">NIL</span> <span class="l-Other">#S</span><span class="p">(</span><span class="nv">RB</span> <span class="ss">:RED</span> <span class="no">T</span> <span class="ss">:DATA</span> <span class="mi">8</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using <code>nil</code> and <code>T</code> as left and right dirctions, it is easier for us to rewrite
<code>binary-insert-r</code> because we can change left and right cases into variables.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">                  <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">binary-insert-r</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">data</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="k">if</span> <span class="nv">dir</span>
</span><span class="line">                 <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">                 <span class="p">(</span><span class="nb">list</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp Debugging Tools]]></title>
    <link href="http://www.idryman.org/blog/2012/03/26/lisp-debugging-tools/"/>
    <updated>2012-03-26T09:51:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/26/lisp-debugging-tools</id>
    <content type="html"><![CDATA[<h2 id="debug-in-step-mode">Debug in Step Mode</h2>

<p>I’m an old school debugger, and I love to use gdb like debug tools. The
alternative debug environment in lisp is the <code>step mode</code>. To enter it, simply
enter:</p>

<pre><code>CL-USER&gt; (step (whatever-function arg1 arg2 arg3))
step 1 --&gt; (WHATEVER-FUNCTION ARG1 ARG2 ARG3)
Step 1 [2]&gt;
</code></pre>

<p>Now you can enter most commands you are familiar in gdb and other cool stuffs
lisp provides to you. Try type <code>:h</code> and see what <a href="http://www.clisp.org/">clisp</a> outputs:</p>

<pre><code>Commands may be abbreviated as shown in the second column.
COMMAND        ABBR     DESCRIPTION
Help           :h, ?    print this command list
Error          :e       print the last error message
Inspect        :i       inspect the last error
Abort          :a       abort to the next recent input loop
Unwind         :uw      abort to the next recent input loop
Reset          :re      toggle *PACKAGE* and *READTABLE* between the
                          local bindings and the sane values
Quit           :q       quit to the top-level input loop
Where          :w       inspect this frame
Up             :u       go up one frame, inspect it
Top            :t       go to top frame, inspect it
Down           :d       go down one frame, inspect it
Bottom         :b       go to bottom (most recent) frame, inspect it
Mode mode      :m       set stack mode for Backtrace: 1=all the stack elements
             2=all the frames                         3=only lexical frames
             4=only EVAL and APPLY frames (default)   5=only APPLY frames
Frame-limit n  :fl      set the frame-limit for Backtrace. This many frames
                          will be printed in a backtrace at most.
Backtrace [mode [limit]] :bt  inspect the stack
Break+         :br+     set breakpoint in EVAL frame
Break-         :br-     disable breakpoint in EVAL frame
Redo           :rd      re-evaluate form in EVAL frame
Return value   :rt      leave EVAL frame, prescribing the return values
Step           :s       step into form: evaluate this form in single step mode
Next           :n       step over form: evaluate this form at once
Over           :o       step over this level: evaluate at once up to the next return
Continue       :c       switch off single step mode, continue evaluation
-- Step-until :su, Next-until :nu, Over-until :ou, Continue-until :cu --
           same as above, specify a condition when to stop
</code></pre>

<!-- more -->

<p><strong>Voilà!</strong> Note that <code>Step</code> will step into every S-expression and <code>Next</code> will
only evaluate the expression and return the value. The great news is you can
do any evaluations in <code>Step mode</code>. For example, you can type in a S-expression
to exam a variable, use <code>(inspect object)</code> to view detail information, or even
redefine some functions at runtime!</p>

<h2 id="basic-usage-of-trace">Basic usage of trace</h2>

<p>The <code>trace</code> macro can save you a lot of time in debugging. For simple usage:</p>

<pre><code>USER(17): (trace list-reverse-aux)
(LIST-REVERSE-AUX)
USER(18): (list-reverse '(1 2 3 4))
 0: (LIST-REVERSE (1 2 3 4))
   1: (LIST-REVERSE-AUX (1 2 3 4) NIL)
     2: (LIST-REVERSE-AUX (2 3 4) (1))
       3: (LIST-REVERSE-AUX (3 4) (2 1))
         4: (LIST-REVERSE-AUX (4) (3 2 1))
           5: (LIST-REVERSE-AUX NIL (4 3 2 1))
           5: returned (4 3 2 1)
         4: returned (4 3 2 1)
       3: returned (4 3 2 1)
     2: returned (4 3 2 1)
   1: returned (4 3 2 1)
 0: returned (4 3 2 1)
(4 3 2 1)
</code></pre>

<h3 id="advanced-usage-of-trace">Advanced usage of trace</h3>

<p>If you want more information in execution, you can tell <code>trace</code> to give your
more. </p>

<p><strong>(TRACE function-name …)</strong> makes the functions <em>function-name</em>, … traced. Each <em>function-name</em> should be either a function name or a LIST <code>(function-name &amp;KEY :SUPPRESS-IF :MAX-DEPTH :STEP-IF :BINDINGS :PRE :POST :PRE-BREAK-IF :POST-BREAK-IF :PRE-PRINT :POST-PRINT :PRINT)</code>, where</p>

<ul>
  <li><code>:SUPPRESS-IF form</code>
    no trace output as long as form is true</li>
  <li><code>:MAX-DEPTH form</code>
    no trace output as long as <code>(&gt; *trace-level* form)</code>. This is useful for
    tracing functions that are use by the tracer itself, such as PRINT-OBJECT,
    or otherwise when tracing would lead to an infinite recursion.</li>
  <li><code>:STEP-IF form</code>
    invokes the stepper as soon as form is true</li>
  <li><code>:BINDINGS ((variable form)...)</code>
    binds variables to the result of evaluation of forms around evaluation of
    all of the following forms</li>
  <li><code>:PRE form</code>
    evaluates form before calling the function</li>
  <li><code>:POST form</code>
    evaluates form after return from the function</li>
  <li><code>:PRE-BREAK-IF form</code>
    goes into the break loop before calling the function if form is true</li>
  <li><code>:POST-BREAK-IF form</code>
    goes into the break loop after return from the function if form is true</li>
  <li><code>:PRE-PRINT form</code>
    prints the values of form before calling the function</li>
  <li><code>:POST-PRINT form</code>
    prints the values of form after return from the function</li>
  <li><code>:PRINT form</code>
    prints the values of form both before calling and after return from the function</li>
</ul>

<p>In all these forms you can access the following variables:</p>

<ul>
  <li><code>EXT:*TRACE-FUNCTION*</code>
    the traced function itself</li>
  <li><code>EXT:*TRACE-ARGS*</code>
    the arguments to the function</li>
  <li><code>EXT:*TRACE-FORM*</code>
    the function/macro call as form</li>
  <li><code>EXT:*TRACE-VALUES*</code>
    after return from the function: the list of return values from the function call</li>
</ul>

<p>I copied the exapmple from <a href="http://www.clisp.org/impnotes/debugger.html#trace-call-id">25.2. Debugging Utilities</a>.</p>

<pre><code>(defun f0 (x)
  (cond ((zerop x) 1)
        ((zerop (random 2)) (* x (f0 (1- x))))
        (t (* x (f1 (1- x))))))
⇒ F0
(defun f1 (x)
  (cond ((zerop x) 1)
        ((zerop (random 2)) (* x (f0 (1- x))))
        (t (* x (f1 (1- x))))))
⇒ F1
(defvar *f0-call-count* 0)
⇒ *F0-CALL-COUNT*
(defvar *id0*)
⇒ *ID0*
(defvar *cc0*)
⇒ *CC0*
(defvar *f1-call-count* 0)
⇒ *F1-CALL-COUNT*
(defvar *id1*)
⇒ *ID1*
(defvar *cc1*)
⇒ *CC1*
(trace (f0 :bindings ((*cc0* (incf *f0-call-count*))
                      (*id0* (gensym "F0-")))
           :pre-print (list 'enter *id0* *cc0*)
           :post-print (list 'exit *id0* *cc0*))
       (f1 :bindings ((*cc1* (incf *f1-call-count*))
                      (*id1* (gensym "F1-")))
           :pre-print (list 'enter *id1* *cc1*)
           :post-print (list 'exit *id1* *cc1*)))
;; Tracing function F0.
;; Tracing function F1.
⇒ (F0 F1)
(f0 10)
1. Trace: (F0 '10)
(ENTER #:F0-2926 1)
2. Trace: (F1 '9)
(ENTER #:F1-2927 1)
3. Trace: (F0 '8)
(ENTER #:F0-2928 2)
4. Trace: (F1 '7)
(ENTER #:F1-2929 2)
5. Trace: (F1 '6)
(ENTER #:F1-2930 3)
6. Trace: (F1 '5)
(ENTER #:F1-2931 4)
7. Trace: (F1 '4)
(ENTER #:F1-2932 5)
8. Trace: (F0 '3)
(ENTER #:F0-2933 3)
9. Trace: (F1 '2)
(ENTER #:F1-2934 6)
10. Trace: (F0 '1)
(ENTER #:F0-2935 4)
11. Trace: (F1 '0)
(ENTER #:F1-2936 7)
(EXIT #:F1-2936 7)
11. Trace: F1 ==&gt; 1
(EXIT #:F0-2935 4)
10. Trace: F0 ==&gt; 1
(EXIT #:F1-2934 6)
9. Trace: F1 ==&gt; 2
(EXIT #:F0-2933 3)
8. Trace: F0 ==&gt; 6
(EXIT #:F1-2932 5)
7. Trace: F1 ==&gt; 24
(EXIT #:F1-2931 4)
6. Trace: F1 ==&gt; 120
(EXIT #:F1-2930 3)
5. Trace: F1 ==&gt; 720
(EXIT #:F1-2929 2)
4. Trace: F1 ==&gt; 5040
(EXIT #:F0-2928 2)
3. Trace: F0 ==&gt; 40320
(EXIT #:F1-2927 1)
2. Trace: F1 ==&gt; 362880
(EXIT #:F0-2926 1)
1. Trace: F0 ==&gt; 3628800
⇒ 3628800
*f0-call-count*
⇒ 4
*f1-call-count*
⇒ 7
</code></pre>

<h3 id="pretty-backtrace">Pretty backtrace</h3>

<p>The original backtrace dump message is not good enough, thanks to <a href="http://jsnell.iki.fi/blog/archive/2007-12-19-pretty-sbcl-backtraces.html">Juho’s
post</a>, you can put this in your <code>.sbclrc</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">backtrace-with-extra-info</span> <span class="p">(</span><span class="k">&amp;key</span> <span class="p">(</span><span class="nv">start</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">end</span> <span class="mi">20</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">swank-backend::call-with-debugging-environment</span>
</span><span class="line">   <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class="line">     <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="nv">start</span> <span class="nv">to</span> <span class="p">(</span><span class="nb">length</span> <span class="p">(</span><span class="nv">swank-backend::compute-backtrace</span>
</span><span class="line">                                        <span class="nv">start</span> <span class="nv">end</span><span class="p">))</span>
</span><span class="line">           <span class="nb">do</span> <span class="p">(</span><span class="nb">ignore-errors</span> <span class="p">(</span><span class="nv">print-frame</span> <span class="nv">i</span><span class="p">))))))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">print-frame</span> <span class="p">(</span><span class="nv">i</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">destructuring-bind</span> <span class="p">(</span><span class="k">&amp;key</span> <span class="nv">file</span> <span class="nb">position</span> <span class="k">&amp;allow-other-keys</span><span class="p">)</span>
</span><span class="line">      <span class="p">(</span><span class="nb">apply</span> <span class="nf">#&#39;</span><span class="nb">append</span>
</span><span class="line">             <span class="p">(</span><span class="nb">remove-if</span> <span class="nf">#&#39;</span><span class="nb">atom</span>
</span><span class="line">                        <span class="p">(</span><span class="nv">swank-backend:frame-source-location-for-emacs</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">frame</span> <span class="p">(</span><span class="nv">swank-backend::nth-frame</span> <span class="nv">i</span><span class="p">))</span>
</span><span class="line">           <span class="p">(</span><span class="nv">line-number</span> <span class="p">(</span><span class="nv">find-line-position</span> <span class="nv">file</span> <span class="nb">position</span> <span class="nv">frame</span><span class="p">)))</span>
</span><span class="line">      <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~2@a: ~s~%~</span>
</span><span class="line"><span class="s">                   ~:[~*~;~:[~2:*    At ~a (unknown line)~*~%~;~</span>
</span><span class="line"><span class="s">                             ~2:*    At ~a:~a~%~]~]~</span>
</span><span class="line"><span class="s">                   ~:[~*~;    Local variables:~%~{      ~a = ~s~%~}~]&quot;</span>
</span><span class="line">              <span class="nv">i</span>
</span><span class="line">              <span class="p">(</span><span class="nv">sb-debug::frame-call</span> <span class="p">(</span><span class="nv">swank-backend::nth-frame</span> <span class="nv">i</span><span class="p">))</span>
</span><span class="line">              <span class="nv">file</span> <span class="nv">line-number</span>
</span><span class="line">              <span class="p">(</span><span class="nv">swank-backend::frame-locals</span> <span class="nv">i</span><span class="p">)</span>
</span><span class="line">              <span class="p">(</span><span class="nb">mapcan</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
</span><span class="line">                        <span class="c1">;; Filter out local variables whose variables we</span>
</span><span class="line">                        <span class="c1">;; don&#39;t know</span>
</span><span class="line">                        <span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nb">eql</span> <span class="p">(</span><span class="nb">getf</span> <span class="nv">x</span> <span class="ss">:value</span><span class="p">)</span> <span class="ss">:&lt;not-available&gt;</span><span class="p">)</span>
</span><span class="line">                          <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">getf</span> <span class="nv">x</span> <span class="ss">:name</span><span class="p">)</span> <span class="p">(</span><span class="nb">getf</span> <span class="nv">x</span> <span class="ss">:value</span><span class="p">))))</span>
</span><span class="line">                      <span class="p">(</span><span class="nv">swank-backend::frame-locals</span> <span class="nv">i</span><span class="p">))))))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">find-line-position</span> <span class="p">(</span><span class="nv">file</span> <span class="nv">char-offset</span> <span class="nv">frame</span><span class="p">)</span>
</span><span class="line">  <span class="c1">;; It would be nice if SBCL stored line number information in</span>
</span><span class="line">  <span class="c1">;; addition to form path information by default Since it doesn&#39;t</span>
</span><span class="line">  <span class="c1">;; we need to use Swank to map the source path to a character</span>
</span><span class="line">  <span class="c1">;; offset, and then map the character offset to a line number</span>
</span><span class="line">  <span class="p">(</span><span class="nb">ignore-errors</span>
</span><span class="line">   <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">location</span> <span class="p">(</span><span class="nv">sb-di::frame-code-location</span> <span class="nv">frame</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nv">debug-source</span> <span class="p">(</span><span class="nv">sb-di::code-location-debug-source</span> <span class="nv">location</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nv">line</span> <span class="p">(</span><span class="nb">with-open-file</span> <span class="p">(</span><span class="nc">stream</span> <span class="nv">file</span><span class="p">)</span>
</span><span class="line">                  <span class="p">(</span><span class="nb">1+</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">repeat</span> <span class="nv">char-offset</span>
</span><span class="line">                            <span class="nb">count</span> <span class="p">(</span><span class="nb">eql</span> <span class="p">(</span><span class="nb">read-char</span> <span class="nc">stream</span><span class="p">)</span> <span class="sc">#\Newline</span><span class="p">))))))</span>
</span><span class="line">     <span class="p">(</span><span class="nb">format</span> <span class="no">nil</span> <span class="s">&quot;~:[~a (file modified)~;~a~]&quot;</span>
</span><span class="line">             <span class="p">(</span><span class="nb">=</span> <span class="p">(</span><span class="nb">file-write-date</span> <span class="nv">file</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nv">sb-di::debug-source-created</span> <span class="nv">debug-source</span><span class="p">))</span>
</span><span class="line">             <span class="nv">line</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now in your REPL, the following code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">declaim</span> <span class="p">(</span><span class="k">optimize</span> <span class="nv">debug</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">foo</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">y</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nv">backtrace</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nv">backtrace-with-extra-info</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defmethod</span> <span class="nv">bar</span> <span class="p">((</span><span class="nv">n</span> <span class="kt">fixnum</span><span class="p">)</span> <span class="p">(</span><span class="nv">y</span> <span class="p">(</span><span class="nb">eql</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">foo</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">y</span> <span class="nv">n</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The old backtrace would look like:</p>

<pre><code>1: (FOO 4)
2: ((SB-PCL::FAST-METHOD BAR (FIXNUM (EQL 1)))
    #&lt;unused argument&gt;
    #&lt;unused argument&gt;
    3
    1)
3: (SB-INT:SIMPLE-EVAL-IN-LEXENV (BAR 3 1) #&lt;NULL-LEXENV&gt;)
</code></pre>

<p>And the new one:</p>

<pre><code>1: FOO
   At /tmp/testlisp:5
   Local variables:
     X = 4
     Y = 7
2: (SB-PCL::FAST-METHOD BAR (FIXNUM (EQL 1)))
   At /tmp/testlisp:8
   Local variables:
     N = 3
     Y = 1
3: SB-INT:SIMPLE-EVAL-IN-LEXENV
   At /scratch/src/sbcl/src/code/evallisp:93 (file modified)
   Local variables:
     ARG-0 = (BAR 3 1)
     ARG-1 = #&lt;NULL-LEXENV&gt;
</code></pre>

<p><strong>Voilà!</strong> </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp development on Mac]]></title>
    <link href="http://www.idryman.org/blog/2012/03/24/lisp-development-on-mac/"/>
    <updated>2012-03-24T16:46:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/24/lisp-development-on-mac</id>
    <content type="html"><![CDATA[<p>Setting up a development environment is such a pain. In short, here is my final
configs:</p>

<ul>
  <li><a href="http://aquamacs.org/">Aquamacs emacs</a></li>
  <li><a href="http://common-lisp.net/project/slime/">SLIME</a> without SLDB mode</li>
  <li><a href="http://www.clisp.org/">clisp</a> with debugger commands working</li>
  <li><a href="http://www.quicklisp.org/beta/">quicklisp</a> (lisp package manager)
    <ul>
      <li><a href="http://www.cliki.net/asdf">asdf.lisp</a> that ships with <a href="http://www.quicklisp.org/beta/">quicklisp</a> (Bridge between lisp and
SLIME)</li>
    </ul>
  </li>
</ul>

<!-- more -->

<p>I also tried many other combinations. For example, <a href="http://www.sbcl.org/">sbcl</a> should be a faster
alternative to <a href="http://www.clisp.org/">clisp</a>, but I can’t make its debugger work. <a href="http://www.sbcl.org/">sbcl</a> also support
better linking to slime and sldb, but sldb isn’t working well. <a href="http://emacsformacosx.com/builds">Emacs 24</a> seems to
be a better emacs environment because it has package manager built right into
it. However, I tired <a href="https://github.com/technomancy/emacs-starter-kit">emacs starter-kit</a> and slime installation through its
package manager, and it just don’t work. Any suggestions would be greatly
welcome. ;)</p>

<hr />

<h3 id="instructions">Instructions</h3>

<ol>
  <li>Download <a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc</a> if you haven’t.</li>
  <li>Install <a href="http://mxcl.github.com/homebrew/">homebrew</a>.</li>
  <li><code>brew install clisp</code>.</li>
  <li>Setting up <a href="http://www.quicklisp.org/beta/">quicklisp</a>.
    <ol>
      <li>Download <a href="http://www.quicklisp.org/beta/">quicklisp.lisp</a></li>
      <li><code>clisp -i quicklisp.lisp</code></li>
      <li><code>[1]&gt; (quicklisp-quickstart:install)</code></li>
      <li><code>[2]&gt; (ql:add-to-init-file)</code></li>
      <li><code>[3]&gt; (quit)</code></li>
    </ol>
  </li>
  <li>Download Aquamacs emacs</li>
  <li>Install <a href="http://braeburn.aquamacs.org/plugins/">Aquamacs emacs SLIME plugin</a></li>
  <li><code>cat '(setq inferior-lisp-program "/usr/local/bin/clisp")' &gt;&gt; ~/.emacs</code></li>
</ol>

<p>Then you can use <code>trace</code>, <code>step</code> and other debug utilities in emacs SLIME. Enjoy
it!</p>

<hr />

<h3 id="update">Update</h3>

<p>I found out how to enable <code>STEP-MODE</code> in <a href="http://www.sbcl.org/">sbcl</a> form <a href="http://www.lispforum.com/viewtopic.php?f=2&amp;t=628">this post</a>. 
In short, put this in your <code>.sbclrc</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">declaim</span> <span class="p">(</span><span class="k">optimize</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and in your <code>.emacs</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">inferior-lisp-program</span> <span class="s">&quot;/usr/local/bin/sbcl&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The NLP Day]]></title>
    <link href="http://www.idryman.org/blog/2012/03/14/the-nlp-day/"/>
    <updated>2012-03-14T19:55:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/14/the-nlp-day</id>
    <content type="html"><![CDATA[<p>Yesterday (3/13) was the NLP day, and we have the honor to invite Eduard Hovy to
give us three talks about the current status and future of NLP researches.
The talks were excellent! The first talk was about how machine learning perform
so well then previous AI systems. It seems that computer can be more intelligent
not because it is smart, but to be trained trained by huge amount of data. The
second talk was “A new semantics: merging propositional and distributional
information”. Eduard introduced a new model that combine theories and
computability that can be used in machine learning. The third talk was “Text
harvesting and ontology constructing using a powerful new method.” Using a
simple “$N_p \mbox{ such as } N_p \mbox{ and } N_p * $” query and search on Google
seems to be trivial, but the results are awesomely incredible! Thus we can mark
the “is-a” relationship automatically and the data is satisfying and robust,
plus, much more than any relationships in existing wordnets! There are so many
interesting topics to write down, but for mow, I’ll focus on the second talk
first. You can find the slide for the second talk 
<a href="http://projects.ict.usc.edu/rwt2011/presentations/hovy.pdf">here</a>.</p>

<!-- more -->

<p>Though machine learning told us that “you don’t have to be smart, you just need
enough training data,” deep in our heart, we still believe that all of our human
behaviors is not a huge training table. There must be some rules that guide us,
as a theory, to know what we will do and what wouldn’t. We believe that there
are theories that can measure info contents, not only treat input strings as
meaningless characters that the only purpose is to be sent to machine to do
statistical analysis.</p>

<h3 id="defining-a-concept-in-a-new-way">Defining a concept in a new way</h3>

<p>A concept $C$ is a list of triples</p>

<script type="math/tex; mode=display">
C=\left\{(r_1w_1s_1),(r_2w_2s_2),(r_3w_3s_3)\right\}
</script>

<script type="math/tex; mode=display">
\begin{align}
\mbox{where } &r_i\varepsilon\;\{Relations\}=&\mbox{e.g., :subj, :agent, :color-of}\\
& w_i\varepsilon\;\{Words\}=&\mbox{e.g., happy, run, apple}\\
& s_i\varepsilon\;[0,1]=&\mbox{normalized weight}
\end{align}
</script>

<p>For example, a dog can be represented as <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="nf">defparameter</span> <span class="nv">*dog*</span>
</span><span class="line">  <span class="o">&#39;</span><span class="p">((</span><span class="nf">:type</span> <span class="s">&quot;Jack Russel&quot;</span> <span class="mf">0.2</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:type</span> <span class="s">&quot;Retriever&quot;</span> <span class="mf">0.4</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:color</span> <span class="s">&quot;brown&quot;</span> <span class="mf">0.4</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:color</span> <span class="s">&quot;black&quot;</span> <span class="mf">0.3</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:agent-of</span> <span class="s">&quot;eat&quot;</span> <span class="mf">0.4</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:patient-of</span> <span class="s">&quot;chase&quot;</span> <span class="mf">0.3</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And it can be expressed in a more complexed form:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="nf">defparameter</span> <span class="nv">*dog*</span>
</span><span class="line">  <span class="o">&#39;</span><span class="p">((</span><span class="nf">:type</span> <span class="p">((</span><span class="s">&quot;Retriever&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;Jack Russel&quot;</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;Terrier&quot;</span> <span class="mf">0.4</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:color</span> <span class="p">((</span><span class="s">&quot;brown&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;black&quot;</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;patched&quot;</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;white&quot;</span> <span class="mf">0.2</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:name</span> <span class="p">((</span><span class="s">&quot;Spot&quot;</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;Lassie&quot;</span> <span class="mf">0.2</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:agent-of</span> <span class="p">((</span><span class="s">&quot;eat&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;run&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;bark&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;pant&quot;</span> <span class="mf">0.3</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nf">:patient-of</span> <span class="p">((</span><span class="s">&quot;chase&quot;</span> <span class="mf">0.3</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;walk&quot;</span> <span class="mf">0.4</span><span class="p">)</span> <span class="p">(</span><span class="s">&quot;love&quot;</span> <span class="mf">0.4</span> <span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which we can visualize it as below:
<img src="http://www.idryman.org/images/nlp-day/dog-context-1.png" title="'An example of dog context'" /></p>

<p>Furthermore, since every node itself can be another context, we can generate a
graph! <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>
<img src="http://www.idryman.org/images/nlp-day/dog-context-2.png" title="'An another example of dog context'" /></p>

<h3 id="the-main-questions-to-address">The main questions to address</h3>

<ul>
  <li>Construction
    <ul>
      <li>Do we really need tensors? Or are vectors enough?</li>
      <li>How to build them?</li>
      <li>Which relations to use? Which scores?</li>
      <li>How do we evaluate this?</li>
    </ul>
  </li>
  <li>Compositionally: How to ‘add’ tensors to obtain new, more complex, meanings
that are still tensors?</li>
  <li>Dependency: How to represent and manage the underlying interconnections across
tensor elements?</li>
  <li>Logical operators: How to handle negation, quantification models (can,
must…), etc.?</li>
</ul>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I use the syntax of common lisp to express the relationship<a href="#fnref:1" rev="footnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>The copyright of the images belongs to Eduard Hovy<a href="#fnref:2" rev="footnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[handcraft algorithm environment in kramdown]]></title>
    <link href="http://www.idryman.org/blog/2012/03/13/handcraft-algorithm-environment-in-kramdown/"/>
    <updated>2012-03-13T09:13:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/13/handcraft-algorithm-environment-in-kramdown</id>
    <content type="html"><![CDATA[<p>I love $\LaTeX$. The typesetting in $\LaTeX$ is so beautiful that that no other
typesetting system can compete with. Unfortunately, I cannot write $\LaTeX$ for blog
post. I have to use <a href="http://kramdown.rubyforge.org/">kramdown</a> or other
wiki/markup languages, because $\LaTeX$ doesn’t perform well in HTML output.
However, I missed some features in $\LaTeX$. One of those is <a href="http://en.wikibooks.org/wiki/LaTeX/Algorithms_and_Pseudocode">Algorithm and
Pseudocode packages</a>.
So, I discovered some tricks to form algorithm-like typesettings.</p>

<!-- more -->

<ol>
  <li>Use <code>\begin{align}</code> to align the lines.</li>
  <li>Use <code>\mbox{text...}</code> to put descriptions in.</li>
  <li>Use <code>\quad</code> and <code>\qquad</code> to make indentions.</li>
</ol>

<p>Here is the example input:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="sb">$$</span><span class="nb" />
</span><span class="line"><span class="nv">\begin</span><span class="nb">{align}</span>
</span><span class="line"><span class="nb">   Q</span><span class="o">=</span><span class="nb">&amp; </span><span class="nv">\mbox</span><span class="nb">{On input string $w$:} </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="m">1</span><span class="nb">.</span><span class="nv">\;</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{Construct the following Turing machine $P_w$} </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="nv">\quad</span><span class="nb">    P_w </span><span class="o">=</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{On any input:} </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="nv">\qquad</span><span class="nb">   </span><span class="m">1</span><span class="nb">.</span><span class="nv">\;</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{Erase input.} </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="nv">\qquad</span><span class="nb">   </span><span class="m">2</span><span class="nb">.</span><span class="nv">\;</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{Write w on the tape.} </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="nv">\qquad</span><span class="nb">   </span><span class="m">3</span><span class="nb">.</span><span class="nv">\;</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{Halt.}  </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nb">     &amp; </span><span class="m">2</span><span class="nb">.</span><span class="nv">\;</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{Output }</span><span class="nv">\langle</span><span class="nb"> P_w</span><span class="nv">\rangle</span><span class="nb">  </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nv">\end</span><span class="nb">{align}</span>
</span><span class="line"><span class="s">$$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and <strong>Voilà</strong>!</p>

<script type="math/tex; mode=display">
\begin{align}
   Q=& \mbox{On input string $w$:} \\
     & 1.\; \mbox{Construct the following Turing machine $P_w$} \\
     & \quad    P_w = \mbox{On any input:} \\
     & \qquad   1.\; \mbox{Erase input.} \\
     & \qquad   2.\; \mbox{Write w on the tape.} \\
     & \qquad   3.\; \mbox{Halt.}  \\
     & 2.\; \mbox{Output }\langle P_w\rangle  \\
\end{align}
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The recursion theorem]]></title>
    <link href="http://www.idryman.org/blog/2012/03/12/the-recursion-theorem/"/>
    <updated>2012-03-12T08:42:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/12/the-recursion-theorem</id>
    <content type="html"><![CDATA[<p>I’m studying theorem of computation myself. Theorem of computation is an
interesting field. It addresses questions as: What is a theorem? What is a
proof? What is truth? Can an algorithm decide which statements are true? Can
a computer calculates everything in the universe? These questions are linked by
the question:</p>

<blockquote>
  <p>What are the fundamental capabilities and limitations of computers?</p>
</blockquote>

<p>This question goes back to the 1930s when mathematical logicians first began to
explore the meaning of computation. Thus, three major theorem of computation has
born: <em>automata</em>, <em>computability</em>, and <em>complexity</em>. There are a lot of algebras
and proofs in this field. Of all the theorems, I love the <strong>recursion
theorem</strong> the most.</p>

<!-- more -->

<hr />

<h3 id="self-reference">SELF-REFERENCE</h3>

<p>First we introduce a Turing Machine that <em>ignores its input and prints out a
copy of its own description</em>. We call this machine $SELF$.</p>

<dl>
  <dt><strong>LEMMA</strong></dt>
  <dd>There is a computable function $q: \Sigma^\ast\longrightarrow\Sigma^\ast$,</dd>
  <dd>where if $w$ is any string, $q(w)$ is the description of a Turing machine $P_w$</dd>
  <dd>that prints out $w$ and then halts.</dd>
  <dt><strong>PROOF</strong></dt>
  <dd>The following TM $Q$ computes $q(w)$</dd>
</dl>

<script type="math/tex; mode=display">
\begin{align}
   Q=& \mbox{On input string $w$:} \\
     & 1.\; \mbox{Construct the following Turing machine $P_w$} \\
     & \quad    P_w = \mbox{On any input:} \\
     & \qquad   1.\; \mbox{Erase input.} \\
     & \qquad   2.\; \mbox{Write w on the tape.} \\
     & \qquad   3.\; \mbox{Halt.}  \\
     & 2.\; \mbox{Output }\langle P_w\rangle  \\
\end{align}
</script>

<p>Now we construct $SELF$ in two parts $A$ and $B$. We want $SELF$ to print out
$\langle SELF\rangle = \langle AB\rangle$.</p>

<script type="math/tex; mode=display">
\begin{align}
A=&P_{\langle B\rangle}, \\
B=&\mbox{On input $\langle M\rangle$, where $M$ is a portion of a TM:}\\
  & 1.\;\mbox{Compute $q(\langle M\rangle)$.} \\
  & 2.\;\mbox{Combine the result with $\langle M\rangle$ to make a complete TM.} \\
  & 3.\;\mbox{Print the description of this TM and halt.} \\
\end{align}
</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing math equations on Octopress]]></title>
    <link href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/"/>
    <updated>2012-03-10T16:23:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress</id>
    <content type="html"><![CDATA[<p>Octopress is a wonderful blogging framework for hackers, but it does not support
math typesetting by default. What hacker doesn’t use Latex math?</p>

<p>The followings are configs to make you write latex math equations in Octopress.
Then you can translate this</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="sb">$$</span><span class="nb" />
</span><span class="line"><span class="nv">\begin</span><span class="nb">{align}</span>
</span><span class="line"><span class="nv">\mbox</span><span class="nb">{Union: } &amp; A</span><span class="nv">\cup</span><span class="nb"> B </span><span class="o">=</span><span class="nb"> </span><span class="nv">\{</span><span class="nb">x</span><span class="nv">\mid</span><span class="nb"> x</span><span class="nv">\in</span><span class="nb"> A </span><span class="nv">\mbox</span><span class="nb">{ or } x</span><span class="nv">\in</span><span class="nb"> B</span><span class="nv">\}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nv">\mbox</span><span class="nb">{Concatenation: } &amp; A</span><span class="nv">\circ</span><span class="nb"> B  </span><span class="o">=</span><span class="nb"> </span><span class="nv">\{</span><span class="nb">xy</span><span class="nv">\mid</span><span class="nb"> x</span><span class="nv">\in</span><span class="nb"> A </span><span class="nv">\mbox</span><span class="nb">{ and } y</span><span class="nv">\in</span><span class="nb"> B</span><span class="nv">\}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nv">\mbox</span><span class="nb">{Star: } &amp; A^</span><span class="nv">\star</span><span class="nb">  </span><span class="o">=</span><span class="nb"> </span><span class="nv">\{</span><span class="nb">x_</span><span class="m">1</span><span class="nb">x_</span><span class="m">2</span><span class="nv">\ldots</span><span class="nb"> x_k </span><span class="nv">\mid</span><span class="nb">  k</span><span class="nv">\geq</span><span class="nb"> </span><span class="m">0</span><span class="nb"> </span><span class="nv">\mbox</span><span class="nb">{ and each } x_i</span><span class="nv">\in</span><span class="nb"> A</span><span class="nv">\}</span><span class="nb"> </span><span class="nv">\\</span><span class="nb" />
</span><span class="line"><span class="nv">\end</span><span class="nb">{align}</span>
</span><span class="line"><span class="s">$$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>into this</p>

<script type="math/tex; mode=display">
\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
</script>

<!-- more -->

<p><strong>Voilà!</strong></p>

<hr />

<h2 id="here-are-the-instructions">Here are the instructions:</h2>

<ol>
  <li>Use <a href="http://kramdown.rubyforge.org/">kramdown</a> instead of rdiscount</li>
</ol>

<p>kramdown is a free GPL-licensed Ruby library for parsing and converting a
superset of Markdown. It is completely written in Ruby, supports standard
Markdown and latex math equations.</p>

<pre><code>gem install kramdown
</code></pre>

<ol>
  <li>Change settings in <code>_config.yml</code></li>
</ol>

<p><code>_config.yml</code> is configurations for Jekyll’s settings. find <code>markdown</code> and
change <code>rdiscount</code> to <code>kramdown</code></p>

<ol>
  <li>
    <p>Change <code>gem 'ridiscount'</code> to <code>gem 'kramdown</code> in <code>Gemfile</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>
  </li>
  <li>
    <p>Put <a href="http://www.mathjax.org/">MathJax</a> CDN and configs in
<code>source/_layouts/default.html</code>.</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">  <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span> <span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class="line">  <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">    <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span> <span class="s1">&#39;$$&#39;</span><span class="p">]],</span>
</span><span class="line">    <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="line">    <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">  <span class="p">},</span>
</span><span class="line">  <span class="nx">messageStyle</span><span class="o">:</span> <span class="s2">&quot;none&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">preferredFont</span><span class="o">:</span> <span class="s2">&quot;TeX&quot;</span><span class="p">,</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;STIX&quot;</span><span class="p">,</span><span class="s2">&quot;TeX&quot;</span><span class="p">]</span> <span class="p">}</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Fix <a href="http://www.mathjax.org/">MathJax</a> right-click bug</li>
</ol>

<p>I found the solution on <a href="http://luikore.github.com/2011/09/good-things-learned-from-octopress/">luikore’s blog</a>. The problem was when you right-click on a MathJax formula, the whole browser becomes white. To fix it, open <code>sass/base/_theme.scss</code> and change the div under body from</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nt">body</span> <span class="p">{</span>
</span><span class="line">  <span class="o">&gt;</span> <span class="nt">div</span> <span class="p">{</span>
</span><span class="line">    <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>to</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scss"><span class="line"><span class="nt">body</span> <span class="p">{</span>
</span><span class="line">  <span class="o">&gt;</span> <span class="nt">div</span><span class="nn">#main</span> <span class="p">{</span>
</span><span class="line">    <span class="na">background</span><span class="o">:</span> <span class="nv">$sidebar-bg</span> <span class="nv">$noise-bg</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and it is done.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>It’s useful if you want to depoloy your code on differnt machines.<a href="#fnref:1" rev="footnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Octopress configs]]></title>
    <link href="http://www.idryman.org/blog/2012/03/10/my-octopress-configs/"/>
    <updated>2012-03-10T16:12:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/10/my-octopress-configs</id>
    <content type="html"><![CDATA[<h2 id="installation-note">installation note</h2>

<p>This is an installation note for <a href="http://octopress.org">Octopress</a> blogging framework. My configuration is developed on OSX with ruby 1.9.2, and xcode 4.2.</p>

<!-- more -->

<h2 id="required-developement-tools">Required developement tools</h2>

<ol>
  <li><a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc installer</a></li>
  <li>install <a href="http://mxcl.github.com/homebrew/">homebrew</a> if not yet installed</li>
</ol>

<h2 id="manage-rubies-with-rvmhttpbeginrescueendcom">Manage Rubies with <a href="http://beginrescueend.com/">RVM</a></h2>

<p>Install RVM</p>

<pre><code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>Reload your Shell environment:</p>

<pre><code>source ~/.bash_profile
</code></pre>

<p>Install ruby:</p>

<pre><code>rvm install 1.9.2 --with-gcc=gcc-4.2
</code></pre>

<p>Note: Octopress requires ruby 1.9.2</p>

<p>Use ruby 1.9.2</p>

<pre><code>rvm use 1.9.2 --default
</code></pre>

<h2 id="setup-octopresshttpoctopressorg">Setup <a href="http://octopress.org">Octopress</a></h2>

<pre><code>git clone git://github.com/imathis/octopress.git your-blog
cd your-blog
gem install bundler
bundle install
rake install
</code></pre>

<h2 id="setup-github-pages">Setup github pages</h2>
<p>add new repository as <em>your-name.github.com</em></p>

<pre><code>rake setup_github_pages
Enter the read/write url for your repository: git@github.com:your-name/your-name.github.com.git
rake generate
rake deploy
</code></pre>

<p>Now you can go to github.com/your-name.github.com to see your repository</p>

<pre><code>git add .
git commit -m 'blog init'
git push origin source
</code></pre>

<p>Wait about 10 minutes and you can see your inited blog on your-name.github.com!</p>
]]></content>
  </entry>
  
</feed>
