<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-11-22T16:10:27+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C ARC best practices and pitfalls]]></title>
    <link href="http://www.idryman.org/blog/2012/11/22/arc-best-practices-and-pitfalls/"/>
    <updated>2012-11-22T09:28:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/11/22/arc-best-practices-and-pitfalls</id>
    <content type="html"><![CDATA[<p>Objective-C is a really cool programming language that is designed for Mac OSX and
iOS software development. TIOBE has announced November Haedline: <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">Objective-C on
its way to become “language of the year” again</a>. It is popular not only because
the platform, but also its great performance on mobile devices. Objective-C
featured in its manually memory management instead of garbage collection. Yet,
its not that <em>manual</em> in modern Objective-C. Apple introduced Automatic
Reference Counting, ARC, that inserts memory management code for you on compile
time. In most cases of Objective-C development, it JUST WORKS. However, it
is often confusing when you mix ARC code with Core Foundation objects (low level
C references on apple’s platform). Today, I’ll talk about pitfalls and concepts
of ARC especially when gluing CF objects with <strong>toll-free bridging</strong>.</p>

<!-- more -->

<h2 id="daily-arc">Daily ARC</h2>

<p>I’ll first make a quick go through of ARC in two major uses: Objective-C
properties and ARC type qualifiers. Then we’ll cut deep into memory management
of Core Foundation Framework.</p>

<h3 id="arc-and-objective-c-properties">ARC and Objective-C properties</h3>

<ul>
  <li>object instance variables which needs to be retained should use <code>strong</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">id</span> <span class="n">childObject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>To break reference cycle, use <code>weak</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">weak</span><span class="p">)</span> <span class="kt">id</span> <span class="n">delegate</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>use <code>assign</code> for scalar properties </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">width</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">height</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>use <code>copy</code> for immutable containers, strings and block. Avoid using mutable
containers in properties (<code>NSMutableArray</code>…etc.) If you use mutable
containers, use <code>strong</code>.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">components</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span> <span class="n">job</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">badPatterns</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>In dealloc
    <ul>
      <li>remove observers</li>
      <li>unregister notifications</li>
      <li>disable timers that use this object</li>
    </ul>
  </li>
  <li>IBOutlets should generally be <code>weak</code> except File’s Owner to top-level objects
in a nib file. If you set it to <code>strong</code>, you should set it to <code>nil</code> in
<code>-(void)viewDidUnload</code>.</li>
</ul>

<h3 id="arc-specific-type-qualifiers">ARC specific type qualifiers</h3>

<p>About type qualifier rules, you can see my <a href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/">previous post</a>. There
are four ARC specific type qualifiers introduced by Apple:</p>

<ol>
  <li><code>__strong</code> is the default. An object remains <strong>alive</strong> as long as there is a strong
  pointer to it.</li>
  <li><code>__weak</code> specifies a reference that does not keep the referenced object alive. A
  weak reference is set to <code>nil</code> when there are no strong references to the object.</li>
  <li><code>__unsafe_unretained</code> specifies a reference that does not keep the referenced
  object alive and is not set to <code>nil</code> when there are no strong references to the
  object. If the object it references is deallocated, the pointer is left
  dangling.</li>
  <li><code>__autoreleasing</code> is used to denote arguments that are passed by reference <code>(id *)</code>
  and are autoreleased on return.</li>
</ol>

<p>Beware that ARC type qualifiers are used for POINTER TYPE. That is, you must put
the qualifier at the right hand side of the star. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">MyClass</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// correct</span>
</span><span class="line"><span class="n">MyClass</span> <span class="n">__weak</span> <span class="o">*</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong! May cause serious bugs!</span>
</span><span class="line"><span class="n">__weak</span> <span class="n">MyClass</span> <span class="o">*</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong!</span>
</span><span class="line">
</span><span class="line"><span class="n">__weak</span> <span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line"><span class="c1">// correct, will expand to (See gcc manual of typeof)</span>
</span><span class="line"><span class="c1">// __weak (MyClass *) w_self = self;</span>
</span><span class="line">
</span><span class="line"><span class="n">typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span> <span class="c1">// correct, its safer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might wonder that there is so many wrong format on the internet. But
[Apple officially] said so:</p>

<blockquote>
  <p>You should decorate variables correctly. When using qualifiers in an object
variable declaration, the correct format is:
<code>ClassName * qualifier variableName;</code></p>
</blockquote>

<h2 id="arc-and-toll-free-bridging">ARC and toll-free bridging</h2>

<p>The biggest problem of ARC occurs when you mix it with Core Foundation
references. The rules of thumb are</p>

<ul>
  <li>When you transfer an Objective-C object to a CF reference, you
retain it.</li>
  <li>When you transfer a CF reference to an Objective-C object, you
release it.</li>
  <li>It is dangerous if you didn’t change ownership of objects. Sometimes Clang
corrects it for you, sometimes don’t.</li>
  <li>There is no autorelease in Core Foundation, and you must follow the Core
Foundation memory management naming convention:
    <ul>
      <li>Those object returned from function with <code>Create</code> or <code>Copy</code>, you <strong>own</strong> the
object, thus you must release it.</li>
      <li>If the function name contains the word <code>Get</code>, you do not own the object. Do
not release it.</li>
    </ul>
  </li>
</ul>

<p>There are two ways to retain a CF object: a type casting like syntax
<code>(__birdge_retained)</code> or C function <code>CFBridgingRetain</code>.  Though clang show up
diagnostics to use the former syntax, I prefer to use the latter one because it
is easier to read for me. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">CFArrayRef</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">CFBridgingRetain</span><span class="p">(</span> <span class="err">@</span><span class="p">[</span><span class="s">@&quot;abc&quot;</span><span class="p">,</span> <span class="s">@&quot;def&quot;</span><span class="p">,</span> <span class="err">@</span><span class="mf">3.14</span><span class="p">]</span> <span class="p">);</span>
</span><span class="line"><span class="c1">// or CFArrayRef arr = (__bridge_retained CFArrayRef)@[...];</span>
</span><span class="line"><span class="c1">// do stuffs..</span>
</span><span class="line"><span class="n">CFRelease</span><span class="p">(</span><span class="n">arr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you get an object from Core Foundation with name containing <code>Create</code> or
<code>Copy</code>, use <code>(__bridge_transfer)</code> or <code>CFBridgingRelease</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">logFirstNameOfPerson:</span><span class="p">(</span><span class="n">ABRecordRef</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFBridgingRelease</span><span class="p">(</span><span class="n">ABRecordCopyValue</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="n">kABPersonFirstNameProperty</span><span class="p">));</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Person&#39;s first name: %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-in-toll-free-bridging">Pitfalls in toll-free bridging</h2>

<p>When you see a code like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Beware! It might crash at any time. Since we do not hold the reference of
UIColor, it would be released right after you create it! The CGColor it owns
would be released as well and thus cause a crash. There are three ways to fix
it:</p>

<ul>
  <li>Use <code>__autorelease</code> type qualifier. UIColor would be released at the end of
current run loop. It can fix the crash.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">getFooColor</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="k">return</span> <span class="p">[</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Use Core Foundation naming convention and change the owner ship to the
 receiver.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">fooColorCopy</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span><span class="o">*</span> <span class="n">color</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">];</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">CFRetain</span><span class="p">([</span><span class="n">color</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="n">obj</span> <span class="n">fooColorCopy</span><span class="p">];</span>
</span><span class="line"><span class="c1">// do stuffs</span>
</span><span class="line"><span class="n">CFRelease</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Owns the CF object by self. If self is dealloced, the reference would still
cause a crash.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span><span class="nf">getFooColor</span> <span class="p">{</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">myColor</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-on-block-and-arc">Pitfalls on block and ARC</h2>

<p>When you use a ivar in self owned block, it will implicitly contain self in your
block and thus cause a retain cycle:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">id</span> <span class="n">child</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonautomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">void</span><span class="p">))</span> <span class="n">job</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">job</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">child</span> <span class="n">work</span><span class="p">];</span>
</span><span class="line">        <span class="c1">// will expand to [self-&gt;child work]</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The only way to implement this safely is to use weak reference of self, and
setup a strong reference to weak self only in the scope of this block. The
reason we need to use a strong reference in scope is weak reference can be zero
out at any time. We must claim we own the object when we are using it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">foo</span> <span class="p">{</span>
</span><span class="line">    <span class="n">MyClass</span><span class="o">*</span> <span class="n">__weak</span> <span class="n">w_self</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">block</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">MyClass</span><span class="o">*</span> <span class="n">s_self</span> <span class="o">=</span> <span class="n">w_self</span><span class="p">;</span> <span class="c1">// self retained, but only in this scope!</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">s_self</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="p">[</span><span class="n">s_self</span><span class="o">-&gt;</span><span class="n">child</span> <span class="n">work</span><span class="p">];</span>
</span><span class="line">            <span class="c1">// do other stuffs</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pitfalls-on-nserror">Pitfalls on NSError</h2>

<p>If you are implementing methods that take NSError, be sure to use the correct
format of type qualifier!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doStuffWithError:</span><span class="p">(</span><span class="n">NSError</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span> <span class="c1">// correct</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doStuffWithError:</span><span class="p">(</span><span class="n">__autoreleasing</span> <span class="n">NSError</span> <span class="o">**</span><span class="p">)</span><span class="nv">error</span><span class="p">;</span> <span class="c1">// wrong!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Actually, when you craete a NSError object, it is always best to declare it is
an autoreleasing object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="n">NSError</span><span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// correct</span>
</span><span class="line"><span class="n">__autoreleasing</span> <span class="n">NSError</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// wrong</span>
</span><span class="line"><span class="n">NSError</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span> <span class="c1">// Will be corrected by clang</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="summary">Summary</h2>

<p>ARC is handy, but not easy. When you facing complex memory ownership model,
wrting some testing code to know how retain count being managed is still a
recommanded pactice.  The below snippet is how I test retain count when mixing
CF object, block, and objective-c object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="obj-c"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testCGColorRetainCount1</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">s_ref</span><span class="p">;</span>
</span><span class="line">    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">        <span class="n">UIColor</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">shadowColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="nl">colorWithRed:</span><span class="mf">0.12</span> <span class="nl">green:</span><span class="mf">0.12</span> <span class="nl">blue:</span><span class="mf">0.12</span> <span class="nl">alpha:</span><span class="mf">1.0</span><span class="p">];</span>
</span><span class="line">        <span class="n">s_ref</span> <span class="o">=</span> <span class="n">shadowColor</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class="line">        <span class="n">CFRetain</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by us&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">CGColorRef</span><span class="p">(</span><span class="o">^</span><span class="n">strangeBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">CGColorCreateCopy</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">CGColorRef</span> <span class="n">myCopy</span> <span class="o">=</span> <span class="n">strangeBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">2L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by block and us&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">s_ref</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">s_ref</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by block&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">STAssertEquals</span><span class="p">(</span><span class="n">CFGetRetainCount</span><span class="p">(</span><span class="n">myCopy</span><span class="p">),</span> <span class="mi">1L</span><span class="p">,</span> <span class="s">@&quot;retain count owned by us&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">myCopy</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope these helps! Comments and sharing are welcome!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deep C: Integer Promotion]]></title>
    <link href="http://www.idryman.org/blog/2012/11/21/integer-promotion/"/>
    <updated>2012-11-21T14:15:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/11/21/integer-promotion</id>
    <content type="html"><![CDATA[<p>Almost every programmer has learned about C, and a lot of them use it for their
career. It is certainly one of the most popular programming languages on
<a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE</a> (first place in November 2012). Yet, C can be really tricky and
behave unexpectedly sometimes. One of those dodgy side of C is <strong>integer
promotion</strong>. See the following example that illustrate the issue:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">;</span> <span class="c1">// true, or false?</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;C: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You might think the output is <code>1</code>, yet the answer is <code>0</code>. Oops.</p>

<!--more-->

<h2 id="c99-spec">C99 SPEC</h2>

<p>In the prior implementation of K&amp;R and C89, arithmetic operands on <code>short</code>
and <code>char</code> fell into two major camps and may produce different results from the
above C snippet. In C99, integer promotion is clearly defined in following rule
(6.3.1.1):</p>

<blockquote>
  <p>If an int can represent all values of the original type, the value is converted
to an int; otherwise, it is converted to an unsigned int. These are called the
integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>

<p>Recall that the range of integer types:</p>

<ul>
  <li>signed char: -127 to 127</li>
  <li>unsigned char: 0 to 255</li>
  <li>signed short: -32767 to 32767</li>
  <li>unsigned short: 0 to 65535</li>
  <li>signed int: -2147483647 to 2147483647</li>
</ul>

<p>You can see that signed and unsigned char, short all can be represented in
signed int, so they are all converted to signed int when doing arithmetic
operations.</p>

<p>In the previous example, <code>unsigned char a = 0xff</code> is presenting <em>255</em>. However,
<code>char b = 0xff</code> is presenting <em>-1</em>. When both converted to int type, <code>a</code>
remains <em>255</em>, or <code>0x000000ff</code>; <code>b</code> will be <code>0xffffffff</code> which is <em>-1</em>
represented in int type. You can see how it works in this C snippet:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;A: %08x, B: %08x</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The output would be:</p>

<pre><code>A: 000000ff, B: ffffffff
</code></pre>

<p>This is why the result of expression <code>a==b</code> is <code>0</code>.</p>

<h2 id="understand-it-at-assembly-level">Understand it at assembly level</h2>

<p>When I first understood integer promotion rules, I got even more confused: why
is this rule so awkward? To understand why it is designed like so, you must dig
into compiled assembly code.</p>

<p>Let’s start with an easy example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">a</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="mh">0xff</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The compiled assembly is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="nf">movl</span>    <span class="no">$0</span><span class="p">,</span> <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>        <span class="c"># The return value of main is 0</span>
</span><span class="line"><span class="nf">movb</span>    <span class="no">$-1</span><span class="p">,</span> <span class="p">-</span><span class="mi">5</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>       <span class="c"># unsigned char a = 0xff;</span>
</span><span class="line"><span class="nf">movb</span>    <span class="no">$-1</span><span class="p">,</span> <span class="p">-</span><span class="mi">6</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>       <span class="c"># char b = 0xff;</span>
</span><span class="line"><span class="nf">movzbl</span>  <span class="p">-</span><span class="mi">5</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%eax</span>
</span><span class="line"><span class="nf">movsbl</span>  <span class="p">-</span><span class="mi">6</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%ecx</span>
</span><span class="line"><span class="nf">addl</span>    <span class="nv">%eax</span><span class="p">,</span> <span class="nv">%ecx</span>          <span class="c"># int c = a + b</span>
</span><span class="line"><span class="nf">movl</span>    <span class="nv">%ecx</span><span class="p">,</span> <span class="p">-</span><span class="mi">12</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>     <span class="c"># store c onto the stack</span>
</span><span class="line"><span class="nf">movl</span>    <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">),</span> <span class="nv">%eax</span>
</span><span class="line"><span class="nf">popq</span>    <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">ret</span>                         <span class="c"># return value 0 from eax</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you are not familiar with GAS syntax, you can check out 
<a href="http://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax">X86 Assembly/GAS Syntax</a>. GAS assembly instructions are generally suffixed
with the letters “b”, “s”, “w”, “l”, “q” or “t” to determine what size operand
is being manipulated.</p>

<ul>
  <li>b = byte (8 bit)</li>
  <li>s = short (16 bit integer) or single (32-bit floating point)</li>
  <li>w = word (16 bit)</li>
  <li>l = long (32 bit integer or 64-bit floating point)</li>
  <li>q = quad (64 bit)</li>
  <li>t = ten bytes (80-bit floating point)</li>
</ul>

<p>GAS convention is to push parameter from left-to-right. For instance, 
<code>movl $0, -4(%rbp)</code> means to move <code>0x00000000</code> to address <code>-4(%rbp)</code>.</p>

<p>The instruction <code>movzbl</code> means moving a byte to long (32 bit int) with <strong>zero
fill</strong>.  <code>movzbl -5(%rbp), %eax</code> take <code>0xff</code> to <code>%eax</code> and fill the rest with
zero.  <code>%eax</code> is now <code>0x000000ff</code>.</p>

<p>The instruction <code>movsbl</code> means moving a byte to long with <strong>signed fill</strong>. 
<code>movsbl -6(%rbp), %ecx</code> take <code>0xff</code> to <code>%eax</code> and fill the rest with signed
value, which will cause <code>%ecx</code> to be <code>0xffffffff</code>.  Finally, <code>addl %eax, %ecx</code>
do the add operation, and <code>movl %ecx, -12(%rbp)</code> store the result onto the
stack.</p>

<p>Now, you understand that integer promotion is a rule how C types being mapped
directly to machine instructions. All arithmetics operands are applied to
smaller integers <strong>after</strong> they are transformed into int with <em>signed</em> or
<em>unsigned fill</em>.  You can think it this way: though <code>short</code> and <code>char</code> are stored
in one or two byte, they are treated as int when you use it with arithmetic
operations. The rule how they are transformed to int is called <strong>integer
promotion</strong>.</p>

<h2 id="summary">Summary</h2>

<p>Typically, CPUs are fastest at operating on integers of their native integer
size. On x86, 32-bit arithmetics are can be twice as fast compare to 16-bit
operands. C is a language focused on performance, so it will do the integer
promotion to make the program as fast as possible. Though, you need to
keep the integer promotion rule in mind to prevent some integer overflow
vulnerability issues.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dance with Objective-C dynamic types]]></title>
    <link href="http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types/"/>
    <updated>2012-10-30T13:58:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types</id>
    <content type="html"><![CDATA[<p>Objective-C is a super set of C language. The entire language is a preprocessor
skin added to C language and a powerful runtime system. With this runtime system,
one can have full featured object oriented programming interface, functional
programming environment, and magical dynamic typing system. </p>

<p>In this post, I’ll go through common tasks you can do with Objective-C typing
system, including querying normal <code>NSObject</code> types, packing static type with
<code>NSValue</code>, testing core foundation references, and validating if a pointer is a
valid object pointer.</p>

<!-- more -->

<h2 id="objective-c-type-system">Objective-C type system</h2>

<p>To determine an Objective-C object type is super easy. Just use <code>isKindOfClass</code>
method and it is done.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testObjectType:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// do something with number</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// do something with values...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why do we need this mechanism? One application is implementing key value coding
with some known range of types. For example, Core Animation listed these
properties are animatable:</p>

<ul>
  <li>anchorPoint</li>
  <li>backgroundColor</li>
  <li>backgroundFilters</li>
  <li>borderColor</li>
  <li>borderWidth</li>
  <li>bounds</li>
  <li>compositingFilter</li>
  <li>contents</li>
  <li>contentsRect</li>
  <li>cornerRadius</li>
  <li>doubleSided</li>
  <li>filters</li>
  <li>frame</li>
  <li>hidden</li>
  <li>mask</li>
  <li>masksToBounds</li>
  <li>opacity</li>
  <li>position</li>
  <li>shadowColor</li>
  <li>shadowOffset</li>
  <li>shadowOpacity</li>
  <li>shadowRadius</li>
  <li>sublayers</li>
  <li>sublayerTransform</li>
  <li>transform</li>
  <li>zPosition</li>
</ul>

<p>These properties are categorized in several types includes <code>CGPoint</code>, <code>CGRect</code>,
<code>CGFloat</code>, <code>CGImageRef</code>, <code>CGColorRef</code>, and even <code>BOOL</code>. Each kind of type
require individual implementation to operate its value. Thankfully,
Objective C dynamic type system allows us to pass-in the value with generic type
<code>id</code> and determine the actual type at runtime. <code>id</code> is simply a void
pointer. The objective c object itself is a struct which have a <code>isa</code> pointer
points to actual class which defines its instance variables, methods, and class
inheritances.</p>

<h2 id="packaging-static-c-types-with-nsvalue">Packaging static C types with NSValue</h2>

<p>Objective C is a skin language based on C, so it is very often to use C types
like int, float, pointer to struct…etc. However, these static types violate
Objective-C’s dynamic typing idioms. Apple introduced <code>NSValue</code> as a container
for a single C or Objective-C data item. It can hold any C types such as int,
float, char, pointers, structures, and object ids. It not only wrap the item
into an Objective-C object, but also encode the type information of the original
object.</p>

<p>To create an <code>NSValue</code> object, you pass it a pointer to the item, along with the
encoded type information generated by <code>@encode()</code> keyword.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">CGPoint</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line"><span class="n">NSValue</span> <span class="o">*</span> <span class="n">originValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithBytes:</span><span class="o">&amp;</span><span class="n">origin</span> <span class="nl">objCType:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>@encode()</code> is a compiler directive which can accepts all types that can be used
as an argument of C <code>sizeof()</code> operator. <code>@encode()</code> returns a <code>const char*</code>
string encoding that type. The encoding is specified in 
<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective-C runtime type encodings</a>.</p>

<p>To illustrate this, see the following examples:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span> <span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{^^i}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{CGPoint=ff}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;^{CGColor=}&quot;</span>
</span><span class="line"><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">NSObject</span><span class="p">)</span>
</span><span class="line"><span class="c1">// ==&gt; &quot;{NSObject=#}&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With this encoded type information, it only takes few steps to determine which
type it is at runtime:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSValue</span><span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span> <span class="n">obj</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="nf">strcmp</span><span class="p">([</span><span class="n">value</span> <span class="n">objCType</span><span class="p">],</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">CGPoint</span> <span class="n">origin</span><span class="p">;</span>
</span><span class="line">        <span class="p">[</span><span class="n">value</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">origin</span><span class="p">];</span>
</span><span class="line">        <span class="c1">// do things with origin...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="uikit-addition-to-nsvalue">UIKit addition to NSValue</h3>

<p>UIKit added a <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/NSValue_UIKit_Additions/Reference/Reference.html">category for NSValue</a> to represent iOS related
geometry-based data. You can use these method instead of encoding <code>CGPoint</code>,
<code>CGRect</code>, and else every time.</p>

<h2 id="bridging-with-core-foundation-objects">Bridging with Core Foundation objects</h2>

<p>Though <code>NSValue</code> covers many kind of types, in practice there are still some
types don’t fit this solution for dynamic typing. More specifically,
<code>CGColorRef</code>, <code>CGImageRef</code> and other Core Foundation types that can be treated
as Objective-C object through <a href="http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free briding</a> are the types we
don’t pack with <code>NSValue</code>.</p>

<p>A core foundation references is also a void pointer as same as <code>id</code> is.
To find out the type of an unknown <code>CFTypeRef</code>, you can query it with C function
<code>CFGetTypeID</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">),</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">    <span class="n">CGImageRef</span> <span class="n">imgRef</span> <span class="o">=</span> <span class="n">CFBridgingRetain</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class="line">    <span class="c1">// do things with imgRef</span>
</span><span class="line">    <span class="n">CFRelease</span><span class="p">(</span><span class="n">imgRef</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A CFTypeRef marked as <code>id</code> type can also accept basic objective C messages like
<code>isKindOfType:</code>. Hence testing an <code>id</code> typed object is quite safe as long as it
is either a <code>NSObject</code>, <code>NSValue</code>, <code>CFTypeRef</code>, <code>CGColorRef</code> or any other
Objective-C object/Core Foundation reference.</p>

<h2 id="testing-if-a-pointer-is-a-valid-nsobject">Testing if a pointer is a valid NSObject</h2>

<p>There is a blog post on Cocoa with love about
<a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a>.
In my point of view, programmer <em>should</em> pass in a valid object for sure. If it
is not a valid object, just let it crash.</p>

<h2 id="puting-it-all-together">Puting it all together</h2>

<p>This piece of code is part of my project <a href="https://github.com/dryman/FCAnimationFactory">FCAnimationFactory</a> for the
purpose of interpolating different kinds of value with respect to their types.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>FCAnimationFactory.m  </span><a href="https://github.com/dryman/FCAnimationFactory/blob/master/FCEasingAnimation/FCAnimationFactory.m">link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">float</span><span class="p">))</span><span class="nf">makeValueScalingBlockFromValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">fromValue</span> <span class="nf">ToValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">toValue</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">fromValue</span><span class="o">==</span><span class="nb">nil</span> <span class="o">||</span> <span class="n">toValue</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span> <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;fromValue and toValue must not be nil&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">fromValue</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * single float is handled in NSNumber</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">v1</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">v2</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">        <span class="kt">float</span> <span class="n">diffValue</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">            <span class="kt">float</span> <span class="n">result</span> <span class="o">=</span> <span class="n">factor</span><span class="o">*</span><span class="n">diffValue</span> <span class="o">+</span> <span class="n">v1</span><span class="p">;</span>
</span><span class="line">            <span class="k">return</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">result</span><span class="p">];</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/*</span>
</span><span class="line"><span class="cm">     * NSValue handles CGPoint, CGSize, CGRect, and CATransform3D</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">objCType</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span> <span class="n">objCType</span><span class="p">];</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGPoint</span> <span class="n">pt0</span><span class="p">,</span> <span class="n">pt1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">pt0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">pt1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGSize</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGSize</span> <span class="n">size0</span><span class="p">,</span> <span class="n">size1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">size0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">size1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGSize:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">CGRect</span> <span class="n">rect0</span><span class="p">,</span> <span class="n">rect1</span><span class="p">;</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">rect0</span><span class="p">];</span>
</span><span class="line">            <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">rect1</span><span class="p">];</span>
</span><span class="line">            <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class="line">                <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class="line">                <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CATransform3D type currently not supported&quot;</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">            <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;Unknown NSValue type %s&quot;</span><span class="p">,</span><span class="n">objCType</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGColorGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">fromColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">fromValue</span><span class="p">;</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">toColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">toValue</span><span class="p">;</span>
</span><span class="line">            <span class="n">size_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">CGColorGetNumberOfComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class="line">            <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">fromComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class="line">            <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">toComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">toColor</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">            <span class="n">CGFloat</span> <span class="n">newComp</span><span class="p">[</span><span class="n">num</span><span class="p">];</span> <span class="c1">// same as malloca</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="n">newComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">toComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="n">factor</span> <span class="o">+</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="n">CGColorRef</span> <span class="n">retColor</span> <span class="o">=</span> <span class="n">CGColorCreate</span><span class="p">(</span><span class="n">CGColorGetColorSpace</span><span class="p">(</span><span class="n">fromColor</span><span class="p">),</span> <span class="n">newComp</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">            <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">retColor</span><span class="p">;</span>
</span><span class="line">        <span class="p">};</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class="line">        <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CGImageRef should be handled in another class&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;value type unknown&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;};</span>    <span class="c1">// turn off compiler warnings</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>It is amazing that a langauge so close to C can create such a rich type system
without byte code, VM, or complex sybol tricks (like what C++ does). Though
handling differnt types can be a bit painful sometimes, but it brings powerful
polimorphsm to the language. Thus programmer can create highly abstract API
and framework with differnt data types that share the same methods.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a></li>
  <li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective C type encoding</a></li>
  <li><a href="http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/Inspecting.html">Inspecting core foundation object</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type Qualifiers and friends]]></title>
    <link href="http://www.idryman.org/blog/2012/10/29/type-qualifiers/"/>
    <updated>2012-10-29T08:55:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/10/29/type-qualifiers</id>
    <content type="html"><![CDATA[<p>Type qualifiers are heavily used in C and Objective C. In C99 there are three
type qualifiers: <code>const</code>, <code>restrict</code>, and <code>volatile</code>. In objective C,
Apple introduced <code>__weak</code>, <code>__strong</code>, <code>__unsafe_unretained</code>, and
<code>__autoreleasing</code> for automatic reference counting.</p>

<p>It is easy to get confused with complicated type qualifiers. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">char</span><span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>  <span class="c1">// x is a pointer to const pointer to char</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this post I’ll go through what type qualifiers are, and how do we read and
write it in correct way.</p>

<!-- more -->

<h2 id="names-and-definitions">Names and definitions</h2>

<p>Type qualifiers should not be confused with <strong>storage specifiers</strong> like <code>static</code>
<code>auto</code>, <code>extern</code> and <code>register</code>. To illustrate this, allow me to use Mike Ash’s
example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here, <code>static</code> is a storage specifier to tell complier how <code>x</code> is stored, and
<code>const</code> is a type qualifier to tell complier <strong>the type</strong> of x is read-only
data. Since <code>const</code> is part of the type, you can write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MyInt</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but you cannot write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">MyInt</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is because <code>static</code> is not part of the type.</p>

<p>You might wonder: is <code>__block</code> a type qualifier or storage specifier?  The 
<a href="http://clang.llvm.org/docs/BlockLanguageSpec.txt">clang block language spec</a> said that it is a <strong>storage qualifier</strong>.
Don’t get confused.  <code>__block</code> is a <em>storage qualifer/specifer</em> which modifies
how variable is stored.  For more curious on <code>__block</code>, you can check out my
previous post <a href="http://www.idryman.org/blog/2012/09/29/c-objc-block-byref-internals/">Block byref internals</a>.</p>

<h3 id="arc-ownership-qualifiers">ARC ownership qualifiers</h3>

<p>What about <code>__strong</code>, <code>__weak</code>, <code>__unsafe_unretained</code>, and <code>__autoreleasing</code>?
You <em>can</em> use it with <code>typedef</code>, and they are truly part of the type. However, they
are a bit different from C type qualifiers. ARC generated code have an runtime
API supports it. You can manually use some of those: <code>objc_storeWeak</code>,
<code>objc_destroyWeak</code>…etc. In Clang specification, these qualifiers are named
<strong>ownership qualifiers</strong>. Luckily, they share the same rule of type
qualifiers.</p>

<h2 id="the-grammar">The grammar</h2>

<p>C declaration can be really complicated. In this section I’ll just cover the
basics and the most commonly seen ones.</p>

<ul>
  <li>Rule 1: find the identifier (the variable), read from right to left.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">x</span><span class="p">;</span>                <span class="c1">// x is int</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>              <span class="c1">// x is a &#39;pointer to&#39; int</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>            <span class="c1">// x is a &#39;pointer to&#39; &#39;pointer to&#39; int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When there is a type qualifier, it applies to its immediate left:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="k">const</span> <span class="n">x</span><span class="p">;</span>          <span class="c1">// x is a const int</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">x</span><span class="p">;</span>        <span class="c1">// x is a &#39;const pointer to&#39; int</span>
</span><span class="line"><span class="kt">int</span> <span class="k">const</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>        <span class="c1">// x is a &#39;pointer to&#39; const int</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>      <span class="c1">// x is a &#39;pointer to&#39; &#39;const pointer to&#39; int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Rule 2: If next to type specifier, it applies to type-specifier</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">const</span> <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>          <span class="c1">// x is a const int</span>
</span><span class="line"><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="n">x</span><span class="p">;</span>  <span class="c1">// x is a &#39;const pointer to&#39; const int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Rule 3: If there are parenthesis or bracelets, reorder it to postfix form:</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="p">(</span> <span class="o">*</span> <span class="n">p</span><span class="p">)();</span>
</span><span class="line"><span class="c1">// postfix: p * () * const * int</span>
</span><span class="line"><span class="c1">// p is a pointer to a function returning a</span>
</span><span class="line"><span class="c1">// pointer to const-pointer-to-int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more curious, checkout <a href="http://www.vineetgupta.com/2011/03/deciphering-complex-c-declarations/">Deciphering Complex C Declarations</a> and
<a href="http://cdecl.org">cdecl</a>.</p>

<h2 id="volatile-restrict">volatile, restrict</h2>

<h3 id="volatile">volatile</h3>

<blockquote>
  <p>Every reference to the variable will reload the contents from memory rather
than take advantage of situations where a copy can be in a register.</p>
</blockquote>

<p>The <code>volatile</code> qualifier maintains consistency of memory access to data objects.
Volatile variable are read from memory each time their values is needed, and
writen back to memory each time they are changed. However, volatile variables
are not automic. If you want to write thread safe operation, you can write
something like:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>OSAtomic.h </span><a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/libkern/OSAtomic.h">link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">__inline</span> <span class="n">bool</span> <span class="nf">OSAtomicCompareAndSwapInt</span><span class="p">(</span><span class="kt">int</span> <span class="n">oldi</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newi</span><span class="p">,</span> <span class="kt">int</span> <span class="k">volatile</span> <span class="o">*</span><span class="n">dst</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">original</span> <span class="o">=</span> <span class="n">InterlockedCompareExchange</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span> <span class="n">newi</span><span class="p">,</span> <span class="n">oldi</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">original</span> <span class="o">==</span> <span class="n">oldi</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is a function that is thread and multiprocessor safe to swap/update an integer.
Objective-C runtime uses these functions defined in <a href="http://www.opensource.apple.com/source/xnu/xnu-1456.1.26/libkern/libkern/OSAtomic.h">OSAtomic.h</a> to
manage retain counts.</p>

<h3 id="restrict">restrict</h3>

<p><code>restrict</code> is a keyword purely for the purpose of optimization. </p>

<blockquote>
  <p>In the C programming language, as of the C99 standard, restrict is a keyword
that can be used in pointer declarations. The restrict keyword is a
declaration of intent given by the programmer to the compiler. It says that
for the lifetime of the pointer, only it or a value directly derived from it
(such as <code>pointer + 1</code>) will be used to access the object to which
it points. This limits the effects of pointer aliasing, aiding caching
optimizations.</p>
</blockquote>

<p><code>restrict</code> is a qualifier for pointers. It claims that the memory that pointer
points to can only be accessed by this pointer.  Consider this case:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">char</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="o">*</span><span class="n">dst</span><span class="p">;</span>
</span><span class="line"><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="n">dst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the <code>*dst</code> overlapped with <code>*src</code>, compiler can only generate code that load a
small piece of memory and operate it once at a time. Fortran does not have this
problem because it does not have pointers. Thus Fortran can do ambitious optimization
to load a big chunck of memory and operate it all at once. <code>restrict</code> is a new
keyword defined in C99 to address this problem. The original code can be
rewritten as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="o">*</span><span class="n">memcpy</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">s1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">s2</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">n</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>and compiler can optimize this code like Fortran does!</p>

<p>Note that <code>restrict</code> is a type qualifier for <strong>pointers</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="o">*</span> <span class="kr">restrict</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// correct</span>
</span><span class="line"><span class="kt">int</span> <span class="kr">restrict</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// wrong</span>
</span><span class="line"><span class="kr">restrict</span> <span class="kt">int</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// wrong</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="arc-ownership-qualifiers-1">ARC ownership qualifiers</h2>

<p>If you understand all the above, then Objective-C Automatic Reference Counting
qualifiers should be easy to you! Here is the definition from Apple:</p>

<ol>
  <li><code>__strong</code> is the default. An object remains <strong>alive</strong> as long as there is a strong
  pointer to it.</li>
  <li><code>__weak</code> specifies a reference that does not keep the referenced object alive. A
  weak reference is set to <code>nil</code> when there are no strong references to the object.</li>
  <li><code>__unsafe_unretained</code> specifies a reference that does not keep the referenced
  object alive and is not set to <code>nil</code> when there are no strong references to the
  object. If the object it references is deallocated, the pointer is left
  dangling.</li>
  <li><code>__autoreleasing</code> is used to denote arguments that are passed by reference <code>(id *)</code>
  and are autoreleased on return.</li>
</ol>

<p>All ownership qualifiers should decorate on Objective-C object pointers.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">MyClass</span> <span class="o">*</span> <span class="n">__weak</span> <span class="n">_weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// correct</span>
</span><span class="line"><span class="n">MyClass</span> <span class="n">__weak</span> <span class="o">*</span> <span class="n">_weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong! May cause serious bugs!</span>
</span><span class="line"><span class="n">__weak</span> <span class="n">MyClass</span> <span class="o">*</span> <span class="n">_weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>    <span class="c1">// wrong!</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Explicitly transfer CGColorRef ownership from UIColor to layer&#39;s backgroundColor</span>
</span><span class="line"><span class="n">CALayer</span><span class="o">*</span> <span class="n">layer</span> <span class="o">=</span> <span class="p">[</span><span class="n">CALayer</span> <span class="n">layer</span><span class="p">];</span>
</span><span class="line"><span class="n">CGColorRef</span> <span class="n">redRef</span><span class="p">;</span>
</span><span class="line"><span class="err">@</span><span class="n">autorelease</span><span class="p">{</span>
</span><span class="line">    <span class="n">UIColor</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="n">redColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">.5f</span><span class="p">];</span>
</span><span class="line">    <span class="n">redRef</span> <span class="o">=</span> <span class="n">CFRetain</span><span class="p">([</span><span class="n">redColor</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// UIColor released</span>
</span><span class="line"><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="n">redRef</span><span class="p">;</span>
</span><span class="line"><span class="n">CFRelease</span><span class="p">(</span><span class="n">redRef</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more curious on why do we need to write verbose code for <code>CGColor</code>, you can
take a look at Big Nerd Ranch’s 
<a href="http://weblog.bignerdranch.com/296-arc-gotcha-unexpectedly-short-lifetimes/">ARC Gotcha – Unexpectedly Short Lifetimes</a> and Amatten’s
<a href="http://amattn.com/2011/12/07/arc_best_practices.html">ARC Best Practices</a>.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.vineetgupta.com/2011/03/deciphering-complex-c-declarations/">Deciphering complex c declarations</a></li>
  <li><a href="http://www.mikeash.com/pyblog/friday-qa-2009-06-26-type-qualifiers-in-c-part-1.html">Mike Ash Friday QA: Type qualifiers in C part 1</a></li>
  <li><a href="http://weblog.bignerdranch.com/296-arc-gotcha-unexpectedly-short-lifetimes/">ARC Gotcha – Unexpectedly Short Lifetimes</a> and Amatten’s</li>
  <li><a href="http://amattn.com/2011/12/07/arc_best_practices.html">ARC Best Practices</a></li>
  <li><a href="http://clang.llvm.org/docs/BlockLanguageSpec.txt">Block language spec</a></li>
  <li><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html">Clang ARC spec</a></li>
  <li><a href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">Transitioning to ARC Release Notes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block and debugger]]></title>
    <link href="http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger/"/>
    <updated>2012-09-30T14:32:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger</id>
    <content type="html"><![CDATA[<p>In the last post, we discussed block byref internal structures and showed the
sample code of how to <code>printf</code> it. However, we don’t want to write that much
helper functions every time! Thanks for
<a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a>, we can now load
<code>gdb</code>/<code>lldb</code> plugins and no need to do that anymore! ;D</p>

<!-- more -->

<h2 id="gdb">GDB</h2>

<p>Add these line into your <code>~.gdbinit</code> file. It was originally created by Big Nerd
Ranch Inc.
I renamed the functions from <code>dump-block-literal</code> and <code>dump-block-byref</code> to
<code>pblock</code> and <code>pbyref</code>.</p>

<pre><code>define pblock
    printf "%s", (const char*)_Block_dump($arg0)
end

document pblock
    Dumps runtime information about the supplied block reference
    Argument is the name or address of a block literal
end

define pbyref
    printf "%s", (const char*)_Block_byref_dump((char*)&amp;$arg0 - 2*sizeof(int) - 2*sizeof(void*))
end

document pbyref
    Dumps runtime information about the supplied __block variable
    Argument is a pointer to the variable embeded in a block byref structure
end
</code></pre>

<p>To use it, you just simply type <code>pbyref</code> and <code>pblock</code> followed by a variable in <code>gdb</code>.</p>

<pre><code>(gdb) pbyref x
byref data block 0x7fff5fbff480 contents:
  forwarding: 0x7fff5fbff480
  flags: 0x0
  size: 32

(gdb) pblock localBlock
^0x7fff5fbff450 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="lldb">LLDB</h2>

<p>I made a <code>lldb</code> version this weekend. You can find it on <a href="https://github.com/dryman/lldb-block-helper">Github</a>.
I tried to use <code>command alias</code> or <code>command regex</code> at first, but it just won’t
work. So I just write a python plugin for lldb and load it in <code>.lldbinit</code>. The
code is quite trivial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>blockHelper.py</span><a href="https://github.com/dryman/lldb-block-helper/blob/master/blockHelper.py">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="py"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">lldb</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">commands</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">pbyref</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class="line">    <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;expr (void)printf(</span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">,(const char*)_Block_byref_dump((char*)&amp;&quot;</span> <span class="o">+</span> \
</span><span class="line">    <span class="n">command</span> <span class="o">+</span> <span class="s">&quot;- 2*sizeof(int) - 2*sizeof(void *)));&quot;</span>
</span><span class="line">    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">pblock</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class="line">    <span class="n">cmd</span> <span class="o">=</span> <span class="s">&quot;expr (void)printf(</span><span class="se">\&quot;</span><span class="si">%s</span><span class="se">\&quot;</span><span class="s">,(const char*)_Block_dump(&quot;</span> <span class="o">+</span> <span class="n">command</span> <span class="o">+</span> <span class="s">&quot;));&quot;</span>
</span><span class="line">    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">__lldb_init_module</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class="line">    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="s">&#39;command script add -f blockHelper.pbyref pbyref&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="s">&#39;command script add -f blockHelper.pblock pblock&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;The &quot;pbyref&quot; command has been installed and is ready of use.&#39;</span>
</span><span class="line">    <span class="k">print</span> <span class="s">&#39;The &quot;pblock&quot; command has been installed and is ready of use.&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="install">INSTALL</h3>

<ul>
  <li>Download this git repostory to your home directory as <code>.lldb</code>.</li>
</ul>

<pre><code>git clone https://github.com/dryman/lldb-block-helper.git ~/.lldb
</code></pre>

<ul>
  <li>add this line into your <code>~/.lldbinit</code>.</li>
</ul>

<pre><code>command script import ~/.lldb/blockHelper.py 
</code></pre>

<h3 id="usage">USAGE</h3>

<pre><code>(lldb) pbyref x
&lt;no result&gt;
byref data block 0x100713f90 contents:
  forwarding: 0x100713f90
  flags: 0x1000004
  size: 32

(lldb) pblock localBlock
&lt;no result&gt;
^0x7fff5fbff480 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://lldb.llvm.org/python-reference.html">lldb python references</a></li>
  <li><a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block byref internals]]></title>
    <link href="http://www.idryman.org/blog/2012/09/29/c-objc-block-byref-internals/"/>
    <updated>2012-09-29T15:21:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/29/c-objc-block-byref-internals</id>
    <content type="html"><![CDATA[<p>In the last post, I mentioned that <code>__block</code> variable (here we named it block
byref) will be retained if multiple blocks referenced it. Here are some sample
code to show how runtime deals with reference counts.</p>

<!-- more -->

<p>In order to <em>move</em> the <code>__block</code> variable to the heap, the compiler must rewrite
access to such a variable to be indirect through the structures forwarding
pointer.  For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="kt">int</span> <span class="n">__block</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class="line">    <span class="n">i</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>would be rewritten to be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="k">struct</span> <span class="n">_block_byref_i</span> <span class="p">{</span>
</span><span class="line">      <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class="line">      <span class="k">struct</span> <span class="n">_block_byref_i</span> <span class="o">*</span><span class="n">forwarding</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>   <span class="c1">//refcount;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class="line">      <span class="kt">int</span> <span class="n">captured_i</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="n">i</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">_block_byref_i</span><span class="p">),</span> <span class="mi">10</span> <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">i</span><span class="p">.</span><span class="n">forwarding</span><span class="o">-&gt;</span><span class="n">captured_i</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="print-runtime-information">Print runtime information</h2>

<p>As long as we know how block byref is structured, we can access the memory and
dump it with internal function <code>_Block_byref_dump</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>more_curious.c </span><a href="https://github.com/dryman/C-ObjC-block-quiz/blob/master/more_curious.c">source</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * clang -Wall -fblocks -framework Foundation more_curious.c -o more_curious</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;Block.h&gt;</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">Block_byref</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="o">*</span><span class="n">isa</span><span class="p">;</span>
</span><span class="line">    <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">forwarding</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span> <span class="cm">/* refcount; */</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">byref_keep</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">byref_destroy</span><span class="p">)(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="p">);</span>
</span><span class="line">    <span class="cm">/* long shared[0]; */</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kr">__inline</span> <span class="k">struct</span> <span class="n">Block_byref</span><span class="o">*</span> <span class="nf">derefBlockVar</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">src</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span><span class="o">*</span><span class="p">)</span> <span class="p">(</span><span class="n">src</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">extern</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">_Block_dump</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">block</span><span class="p">);</span>
</span><span class="line"><span class="k">extern</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="k">struct</span> <span class="n">Block_byref</span> <span class="o">*</span><span class="n">src</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">BoringBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">boringBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="n">BoringBlock</span> <span class="nf">blockRefCountTest</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Before local block:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="n">derefBlockVar</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)));</span>
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">localBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Execute block:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="n">derefBlockVar</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)));</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x is %d, &amp;x is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;After local block generated:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="n">derefBlockVar</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)));</span>
</span><span class="line">
</span><span class="line">    <span class="n">boringBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;After first block copy:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="n">derefBlockVar</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)));</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">retBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;After second block copy:</span><span class="se">\n</span><span class="s">%s</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">_Block_byref_dump</span><span class="p">(</span><span class="n">derefBlockVar</span><span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">x</span><span class="p">)));</span>
</span><span class="line">    <span class="k">return</span> <span class="n">retBlock</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">retBlock</span> <span class="o">=</span> <span class="n">blockRefCountTest</span><span class="p">();</span>
</span><span class="line">    <span class="n">boringBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">Block_release</span><span class="p">(</span><span class="n">boringBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">retBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">Block_release</span><span class="p">(</span><span class="n">retBlock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The execution result is</p>

<pre><code>$ ./more_curious 
Before local block:
byref data block 0x7fff6e8034f0 contents:
  forwarding: 0x7fff6e8034f0
  flags: 0x0
  size: 32


After local block generated:
byref data block 0x7fff6e8034f0 contents:
  forwarding: 0x7fff6e8034f0
  flags: 0x0
  size: 32


After first block copy:
byref data block 0x7fc191c13f60 contents:
  forwarding: 0x7fc191c13f60
  flags: 0x1000004
  size: 32


After second block copy:
byref data block 0x7fc191c13f60 contents:
  forwarding: 0x7fc191c13f60
  flags: 0x1000006
  size: 32


Execute block:
byref data block 0x7fc191c13f60 contents:
  forwarding: 0x7fc191c13f60
  flags: 0x1000004
  size: 32

x is 2, &amp;x is 0x7fc191c13f78
Execute block:
byref data block 0x7fc191c13f60 contents:
  forwarding: 0x7fc191c13f60
  flags: 0x1000002
  size: 32

x is 3, &amp;x is 0x7fc191c13f78
</code></pre>

<h2 id="what-does-it-mean">What does it mean?</h2>

<p>We can find some interesting things in this log:</p>

<ol>
  <li>Block byref flags and address doesn’t change until first copy.</li>
  <li>After copy, the flag becomes <code>0x1000004</code>. There’s a <code>(1 &lt;&lt; 24)</code> flag in the
front.</li>
  <li>Block releases does decrease flag number in times of 2.</li>
</ol>

<p>The <code>(1 &lt;&lt; 24)</code> flag (the number one in <code>0x100xxxxx</code>) means <code>BLOCK_NEEDS_FREE</code>
in this <code>enum</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Block_private.h </span><a href="http://opensource.apple.com/source/libclosure/libclosure-38/Block_private.h">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">enum</span> <span class="p">{</span>
</span><span class="line">    <span class="n">BLOCK_REFCOUNT_MASK</span> <span class="o">=</span>     <span class="p">(</span><span class="mh">0xffff</span><span class="p">),</span>
</span><span class="line">    <span class="n">BLOCK_NEEDS_FREE</span> <span class="o">=</span>        <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">),</span>
</span><span class="line">    <span class="n">BLOCK_HAS_COPY_DISPOSE</span> <span class="o">=</span>  <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">25</span><span class="p">),</span>
</span><span class="line">    <span class="n">BLOCK_HAS_CTOR</span> <span class="o">=</span>          <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">26</span><span class="p">),</span> <span class="cm">/* Helpers have C++ code. */</span>
</span><span class="line">    <span class="n">BLOCK_IS_GC</span> <span class="o">=</span>             <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">27</span><span class="p">),</span>
</span><span class="line">    <span class="n">BLOCK_IS_GLOBAL</span> <span class="o">=</span>         <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">28</span><span class="p">),</span>
</span><span class="line">    <span class="n">BLOCK_HAS_DESCRIPTOR</span> <span class="o">=</span>    <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">29</span><span class="p">)</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, flag changes until first copy makes sense, because block byref doesn’t need
free until it is copied to heap.</p>

<p>The reference count is actually taken out from flags like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="n">refcount</span> <span class="o">=</span> <span class="n">shared_struct</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I didn’t find out why reference count is in times of two. The actual code that
increase and decrease reference count is this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>runtime.c </span><a href="http://opensource.apple.com/source/libclosure/libclosure-38/runtime.c">source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">latching_incr_int</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">where</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">old_value</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">where</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">((</span><span class="n">old_value</span> <span class="o">&amp;</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">OSAtomicCompareAndSwapInt</span><span class="p">(</span><span class="n">old_value</span><span class="p">,</span> <span class="n">old_value</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">where</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">old_value</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">latching_decr_int</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">where</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">old_value</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">where</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">((</span><span class="n">old_value</span> <span class="o">&amp;</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="p">((</span><span class="n">old_value</span> <span class="o">&amp;</span> <span class="n">BLOCK_REFCOUNT_MASK</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">OSAtomicCompareAndSwapInt</span><span class="p">(</span><span class="n">old_value</span><span class="p">,</span> <span class="n">old_value</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">where</span><span class="p">))</span> <span class="p">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">old_value</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>OSAtomicCompareAndSwapInt</code> is a function that can change value of a <code>int</code>
thread and multiprocessor safe.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Block seems magical at the first seen. With block we no longer have to do the
<em>function pointer + struct cast + void*</em> tricks. Block automatically captures
variables for us, and we can use <code>__block</code> storage qualifier to declare mutable
ones. Behind the scene is really cool hack to make all this happen. However, it
not quite easy to debug blocks and byrefs. We’d need to write some helper
functions for <code>gdb</code> or <code>lldb</code>. These will be discussed in my next post.</p>

<h2 id="references">References:</h2>

<ul>
  <li><a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">BNR Advanced Mac OSX programming: Blocks Internals</a></li>
  <li><a href="http://clang.llvm.org/docs/BlockLanguageSpec.txt">Block language spec</a></li>
  <li><a href="http://clang.llvm.org/docs/Block-ABI-Apple.txt">Block ABI Apple</a></li>
  <li><a href="http://opensource.apple.com/source/libclosure/libclosure-38/Block_private.h">Block private header</a></li>
  <li><a href="http://opensource.apple.com/source/libclosure/libclosure-38/runtime.c">Block runtime</a></li>
  <li><a href="http://developer.apple.com/library/ios/#documentation/System/Conceptual/ManPages_iPhoneOS/man3/OSAtomicCompareAndSwapInt.3.html">Mac OS X Manual Page For OSAtomicCompareAndSwapInt</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block quizzes]]></title>
    <link href="http://www.idryman.org/blog/2012/09/29/c-objc-block-quizzes/"/>
    <updated>2012-09-29T12:15:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/29/c-objc-block-quizzes</id>
    <content type="html"><![CDATA[<p>Apple introduced blocks (anonymous functions or lambdas) as C extensions for its
parallel programming model <a href="https://developer.apple.com/documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch</a>. Unlike ordinary C
functions, blocks can capture surrounding variable contexts. The captured
variables are casts to <code>const</code> by default, and for mutable variables you can mark
it with <code>__block</code> storage qualifier. However, there is a lot of pitfalls in
<code>__block</code> variables.  Can you identify all of them?</p>

<!-- more -->

<script language="javascript">
function toggle(divId) {
  var div = document.getElementById(divId);
  var link = document.getElementById(divId+"_a");
  if (div.style.display == "block") {
    div.style.display = "none";
    link.innerHTML = "Show answer";
  } else {
    div.style.display = "block";
    link.innerHTML = "Toggle answer";
  }
}
</script>

<h2 id="testing-environment">Testing environment</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * clang -Wall -fblocks -framework Foundation quiz.c -o quiz</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#include &lt;Block.h&gt;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">BoringBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line"><span class="n">BoringBlock</span> <span class="n">boringBlock</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">quiz_1</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{...}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">quiz_2</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{...}</span>
</span><span class="line"><span class="p">...</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">quiz_1</span><span class="p">()</span>
</span><span class="line">    <span class="n">boringBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">Block_release</span><span class="p">(</span><span class="n">boringBlock</span><span class="p">);</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The above is compile configuration and the program structure of the quiz.
You can download and test the code form <a href="https://github.com/dryman/C-ObjC-block-quiz">Github</a>.</p>

<h2 id="quiz-1">Quiz 1</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">quiz_1</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x address is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">localBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">x</span><span class="o">++</span><span class="p">;</span> <span class="c1">// Dummy use of x</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of quiz 1</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="n">boringBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;after copy, x address is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What would be printed if we execute <code>quiz_1()</code> then <code>boringBlock()</code>? Would <code>&amp;x</code> be
printed in same address or different addresses?</p>

<p><a id="quiz_1_a" href="javascript:toggle('quiz_1')">Show answer</a></p>

<div id="quiz_1" style="display: none;">
    <p> In block implementation spec, captured <code>__block</code> variable
    <code>x</code> will be moved to heap after we execute <code>Block_copy</code>.
    On my machine it prints: </p>

<pre><code>x address is 0x7fff613d04f8
after copy, x address is 0x7fe9a1c13f78
End of quiz 1
</code></pre>

    <p> Memory allocation on stack is much faster then heap, so variable and block
    literal are both allocated on stack by default. It is copied to heap only when
    necessary. </p>
</div>

<h2 id="quiz-2">Quiz 2</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">quiz_2</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">localBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of quiz 2</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="n">boringBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, if we change the variable <code>x</code> in <code>quiz_2()</code> scope, would captured variable
<code>x</code> also changes its value?</p>

<p><a id="quiz_2_a" href="javascript:toggle('quiz_2')">Show answer</a></p>

<div id="quiz_2" style="display: none;">
    <p> Actually it does! Though <code>x</code> is in different memory address,
    we can just use it as normal <code>int</code> value, and it behaves just as
    expected.  On my machine it prints:</p>

<pre><code>x is 2
End of quiz 2
</code></pre>
</div>

<h2 id="quiz-3">Quiz 3</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">quiz_3</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">localBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x is %d, *ptr is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of quiz 3</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="n">boringBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Would <code>x</code> and <code>*ptr</code> be the same value?</p>

<p><a id="quiz_3_a" href="javascript:toggle('quiz_3')">Show answer</a></p>

<div id="quiz_3" style="display: none;">

    <p>Well, if you are lucky, it would print</p>

<pre><code>x is 2, *ptr is 1
End of quiz 3
</code></pre>

    <p> Though <code>ptr</code> and <code>x</code> are both moved to the heap,
    <code>ptr</code> still points to the original address of <code>x</code>.
    Thus, the value in <code>*ptr</code> is garbage.  If there are other
    functions that use the stack before you use <code>boringBlock()</code>.  It
    would print:</p>

<pre><code>clean up stack
x is 2, *ptr is 24
End of quiz 3
</code></pre>
<p><strong>Oops</strong></p>
</div>

<h2 id="quiz-4">Quiz 4</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">quiz_4</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">localBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x[0] is %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of quiz 4</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What about array?</p>

<p><a id="quiz_4_a" href="javascript:toggle('quiz_4')">Show answer</a></p>

<div id="quiz_4" style="display: none;">

    <p> Actually, complier won&#8217;t let you compile this. C array and
    <code>struct</code> contains C array are both invalid with
    <code>__block</code>. </p>
</div>

<h2 id="quiz-5">Quiz 5</h2>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">BoringBlock</span> <span class="nf">quiz_5</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">__block</span> <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x address is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">localBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">x</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x is %d, &amp;x is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">    <span class="n">boringBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x address is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">BoringBlock</span> <span class="n">retBlock</span> <span class="o">=</span> <span class="n">Block_copy</span><span class="p">(</span><span class="n">localBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;x address is %p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">retBlock</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Block execution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="n">BoringBlock</span> <span class="n">retBlock</span> <span class="o">=</span> <span class="n">quiz_5</span><span class="p">();</span>
</span><span class="line">    <span class="n">boringBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">retBlock</span><span class="p">();</span>
</span><span class="line">    <span class="n">Block_release</span><span class="p">(</span><span class="n">boringBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">Block_release</span><span class="p">(</span><span class="n">retBlock</span><span class="p">);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;End of quiz 5</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What if we copied the block twice. Would the address change twice also?</p>

<p><a id="quiz_5_a" href="javascript:toggle('quiz_5')">Show answer</a></p>

<div id="quiz_5" style="display: none;">

<p>The address of <code>x</code> only changes once in first copy:</p>

<pre><code>x address is 0x7fff613d04f8
x address is 0x7fe9a1c13f78
x address is 0x7fe9a1c13f78
x is 2, &amp;x is 0x7fe9a1c13f78
x is 3, &amp;x is 0x7fe9a1c13f78
End of quiz 5
</code></pre>

    <p> So, how does memory management work? Actually, compiler use reference
    counting on <code>__block</code> variables instead of block literals. For
    more curious, see my next post.</p>
</div>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">BNR Advanced Mac OSX programming: Blocks Internals</a></li>
  <li><a href="http://clang.llvm.org/docs/BlockLanguageSpec.txt">Block language spec</a></li>
  <li><a href="http://clang.llvm.org/docs/Block-ABI-Apple.txt">Block ABI Apple</a></li>
</ul>

<h2 id="source-code">Source code:</h2>

<p>You can download source code of this quiz from <a href="https://github.com/dryman/C-ObjC-block-quiz">Github</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block syntax explained]]></title>
    <link href="http://www.idryman.org/blog/2012/09/21/c-slash-objc-c-block-syntax-explained/"/>
    <updated>2012-09-21T20:33:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/21/c-slash-objc-c-block-syntax-explained</id>
    <content type="html"><![CDATA[<p>Block is heavily used in objective-c  APIs. If you want to
write concurrent and responsive interface, you will need blocks and grand
central dispatch. Blocks also bring many goods form functional programming to cocoa.
It is just awesome.</p>

<p>However, when I first learn blocks I found the syntax confuses me a lot. 
This is why I wrote this article. Hope this article can help people who have the
same problem as I did.</p>

<!-- more -->

<h2 id="declare-a-block-variable">Declare a block variable</h2>

<p>Block syntax inherited form C’s function pointers. To declare a block variable,
you write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">multiply</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="p">};</span>
</span><span class="line">  <span class="c1">//^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^^^^^^^^  ^^^^^^^^^^^^^^^</span>
</span><span class="line">  <span class="c1">//  declare block variable          block          block body</span>
</span><span class="line">  <span class="c1">//  &quot;multiply&quot;                      argument</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 15</span>
</span><span class="line">  <span class="c1">// execute a block</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It is similar to function pointer:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="kt">int</span> <span class="n">mutiply</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">functionPt</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">mutiply</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">functionPt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 15</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="block-literal-syntax-shortcut">Block literal syntax shortcut</h3>

<p>Block literal can be written in various ways:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{...};</span>
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{...};</span>   <span class="c1">// same</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{...};</span>
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>          <span class="c1">// same</span>
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>              <span class="c1">// same</span>
</span><span class="line">
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>             <span class="c1">// valid</span>
</span><span class="line">    <span class="p">(</span><span class="o">^</span><span class="n">myBLock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>                  <span class="c1">// invalid</span>
</span><span class="line">    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>               <span class="c1">// invalid</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="anonymous-block">Anonymous block</h3>

<p>You don’t need a block variable to use a block. A block without a block variable
is called <em>anonymous block</em>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="c1">// An anonymous block</span>
</span><span class="line">    <span class="o">^</span><span class="kt">int</span> <span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">)</span> <span class="p">{...};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Many objective-c methods accepts anonymous block:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingComparator:</span>
</span><span class="line">        <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">){</span>
</span><span class="line">            <span class="p">...</span>
</span><span class="line">        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="compare-with-function-pointer">Compare with function pointer</h3>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="k">struct</span> <span class="n">s_data</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">        <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSInteger</span> <span class="n">compareFunction</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">context</span><span class="p">){</span>
</span><span class="line">        <span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="p">)</span> <span class="n">context</span><span class="p">;</span>
</span><span class="line">        <span class="c1">// do things</span>
</span><span class="line">    <span class="p">};</span>
</span><span class="line">
</span><span class="line">    <span class="n">sturct</span> <span class="n">s_data</span> <span class="o">*</span><span class="n">my_data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">s_data</span><span class="p">));</span>
</span><span class="line">    <span class="n">s_data</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span><span class="line">    <span class="n">s_data</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">s_data</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class="line">    <span class="kt">void</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">my_data</span><span class="p">;</span>
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingFunction:</span> <span class="n">compareFunction</span>
</span><span class="line">                                                           <span class="nl">context:</span><span class="n">context</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What does above mean? Well, if you want to pass a callback function to
elsewhere, sometimes you might also need to pass data. To do that, you first
pack your data into a <code>struct</code>, and use a <code>void</code> pointer points to it. Then you
pass the callback function and the <code>void</code> pointer to the function. Finally you
dereference the <code>void</code> pointer back to the <code>struct</code>.</p>

<p>With block, all variables in it are captured. You no longer need to do that type
casting hack to pass data.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="n">NSNumber</span> <span class="o">*</span><span class="n">num</span> <span class="o">=</span> <span class="err">@</span><span class="mi">3</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingComparator:</span>
</span><span class="line">        <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">){</span>
</span><span class="line">            <span class="k">return</span> <span class="p">[</span><span class="n">num</span> <span class="nl">compare:</span> <span class="n">obj1</span><span class="p">];</span>
</span><span class="line">            <span class="c1">// num is retained inside the block</span>
</span><span class="line">        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="typedef">Typedef</h2>

<p>We can use <code>typedef</code> to define a reusable type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="k">typedef</span> <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlockType</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">MyBlockType</span> <span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="type-cast">Type cast</h2>

<p>As other types, you can also type cast a block. The syntax is a little weired,
though.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="kt">void</span><span class="o">*</span> <span class="n">someContext</span><span class="p">;</span> <span class="c1">// Probably comes from a function&#39;s argument;</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span><span class="n">someContext</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// block</span>
</span><span class="line">
</span><span class="line">    <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">myFnPt</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span><span class="n">someContext</span><span class="p">;</span>
</span><span class="line">    <span class="c1">// function pointer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="block-in-objective-c-class">Block in Objective-C class</h2>

<h3 id="property">property</h3>

<p>Block in objective C is quite trivial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="accessors-and-method-arguments">Accessors and method arguments</h3>

<p>However, it’s strange in method declaration and accessors.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span> <span class="nf">getMyBlock</span><span class="p">;</span>
</span><span class="line"><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setMyBlock:</span> <span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">))</span> <span class="n">inputBlock</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The syntax is weird because Apple uses type cast syntax as type declaration syntax.
This is now the only way to use anonymous type in Objective-C method argument
instead of using <code>typedef</code>. This syntax won’t work in other places, either.</p>

<h2 id="other-syntaxs">Other syntaxs</h2>

<h3 id="array">Array</h3>

<p>You can define a chunk of blocks like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="n">myBlocks</span><span class="p">[</span><span class="mi">5</span><span class="p">])(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">myBlocks</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...};</span>
</span><span class="line">    <span class="n">myBlocks</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// excecute</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="nested-blocks">Nested blocks</h3>

<p>Nested block syntax is ugly:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="o">^</span><span class="n">myNestedBlock</span><span class="p">)())();</span>
</span><span class="line">
</span><span class="line">    <span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">VoidBlock</span><span class="p">)();</span>
</span><span class="line">    <span class="n">VoidBlock</span><span class="p">(</span><span class="o">^</span><span class="n">myNestedBlock</span><span class="p">)();</span> <span class="c1">// same, better</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Readability of nested block without <code>typedef</code> is so horrible. <code>typedef</code> is
strongly recommended.</p>

<p>That’s all for block syntax! There are still topics to discuss like memory
management and grand central dispatch. I’ll discuss them in next few posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taiwan Typhoon App (2)]]></title>
    <link href="http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-2/"/>
    <updated>2012-09-16T17:30:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-2</id>
    <content type="html"><![CDATA[<p>I start from a single view application with <strong>MKMapView</strong>. Remeber to link
<code>MapKit.framework</code> in project setting.</p>

<p>This is just a prototyping app, so everything will be handled in
<code>FCViewController</code>, including</p>

<ul>
  <li><code>NSURLConnection</code> delegate: handle request and incoming data stream.</li>
  <li>Read data as string, and process it with regular expression and JSON parsing.</li>
  <li><code>MKMapView</code> delegate: create and draw annotations and overlays.</li>
</ul>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>https://github.com/dryman/Taiwan-Typhoon-iOS/blob/master/TyphoonTW/FCViewController.h FCViewController.h </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">    #import &lt;UIKit/UIKit.h&gt;</span>
</span><span class="line"><span class="cp">    #import &lt;MapKit/MapKit.h&gt;</span>
</span><span class="line"><span class="cp">    #import &lt;CoreLocation/CoreLocation.h&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="k">@interface</span> <span class="nc">FCViewController</span> : <span class="nc">UIViewController</span> <span class="o">&lt;</span><span class="n">MKMapViewDelegate</span><span class="p">,</span><span class="n">CLLocationManagerDelegate</span><span class="p">,</span> <span class="n">NSURLConnectionDataDelegate</span><span class="o">&gt;</span>
</span><span class="line">    <span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">MKMapView</span> <span class="o">*</span><span class="n">mapView</span><span class="p">;</span>
</span><span class="line">    <span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">clManager</span><span class="p">;</span>
</span><span class="line">    <span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURLConnection</span> <span class="o">*</span><span class="n">connection</span><span class="p">;</span>
</span><span class="line">    <span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">connectionData</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="nsurlconnection">NSURLConnection</h2>

<p>I use <em>NSURLConnection</em> for networking. There are three common ways to use it:</p>

<ol>
  <li>Synchronous request (Not recommended.)</li>
  <li>Asynchronous request using block.</li>
  <li>Asynchronous request using delegate to handle respond data.</li>
</ol>

<p>I use third method for this app. To use it, you</p>

<ol>
  <li>make sure your class support <code>NSURLConnectionDataDelegate</code> protocol.</li>
  <li>alloc <code>NSURLConnection</code> object, set <code>self</code> as delegate and start
immediately (or setup some configurations like assign custom queues, and
start manually)</li>
  <li>Finally, implement these methods: 
    <ul>
      <li><code>- (void) connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response</code> </li>
      <li><code>- (void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data</code> </li>
      <li><code>- (void) connectionDidFinishLoading:(NSURLConnection *)connection</code></li>
      <li><code>- (void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error</code></li>
    </ul>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">connection</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSURLConnection</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRequest:</span><span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://www.cwb.gov.tw/V7/prevent/typhoon/Data/PTA_NEW/js/datas/ty_infos.js&quot;</span><span class="p">]]</span>
</span><span class="line">                                          <span class="nl">delegate:</span><span class="n">self</span>
</span><span class="line">                                          <span class="nl">startImmediately:</span><span class="n">YES</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="cp">#pragma mark NSURLConnection delegate</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="nf">didReceiveResponse:</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="nv">response</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">connectionData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableData</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="nf">didReceiveData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">connectionData</span> <span class="nl">appendData:</span><span class="n">data</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connectionDidFinishLoading:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="c1">// process connection data here.</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span> <span class="nf">didFailWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">connectionData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="process-data">Process data</h2>

<ol>
  <li>Read data as string.</li>
  <li>Get JSON from JavaScript using regular expression.</li>
  <li>Use <code>NSJSONSerialization</code> to parse JSON</li>
  <li>Parsed data is combination of <code>NSArray</code>, <code>NSDictionary</code>, <code>NSString</code>,
<code>NSNumber</code>, and <code>NSNull</code>.</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connectionDidFinishLoading:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">ty_infos</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">connectionData</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class="line">    <span class="n">connectionData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">    <span class="n">NSRegularExpression</span> <span class="o">*</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="s">@&quot;</span><span class="se">\\</span><span class="s">[.+?</span><span class="se">\\</span><span class="s">];&quot;</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSRange</span> <span class="n">range_of_match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">rangeOfFirstMatchInString:</span><span class="n">ty_infos</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ty_infos</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">ty_infos</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range_of_match</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">range_of_match</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class="line">    <span class="n">NSArray</span><span class="o">*</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">typhoon</span> <span class="k">in</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// Use autoreleasepool to release temporary objects</span>
</span><span class="line">        <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class="line">            <span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="p">[[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;fcst&quot;</span><span class="p">]</span> <span class="n">count</span><span class="p">]</span> <span class="o">+</span> <span class="p">[[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;best_track&quot;</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span>
</span><span class="line">            <span class="n">CLLocationCoordinate2D</span> <span class="o">*</span><span class="n">line_points</span> <span class="o">=</span> <span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">length</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">));</span>
</span><span class="line">
</span><span class="line">            <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">track</span> <span class="k">in</span> <span class="p">[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;best_track&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                <span class="n">CGFloat</span> <span class="n">lat</span> <span class="o">=</span> <span class="p">[[</span><span class="n">track</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lat&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">                <span class="n">CGFloat</span> <span class="n">lon</span> <span class="o">=</span> <span class="p">[[</span><span class="n">track</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lon&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">                <span class="n">CLLocationCoordinate2D</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">);</span>
</span><span class="line">                <span class="n">line_points</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class="line">                <span class="n">MKPointAnnotation</span> <span class="o">*</span><span class="n">centerPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPointAnnotation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">                <span class="n">centerPoint</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class="line">                <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addAnnotation:</span><span class="n">centerPoint</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span><span class="o">*</span> <span class="n">fcst</span> <span class="k">in</span> <span class="p">[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;fcst&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class="line">                <span class="n">CGFloat</span> <span class="n">lat</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lat&quot;</span><span class="p">]</span>  <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">                <span class="n">CGFloat</span> <span class="n">lon</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lon&quot;</span><span class="p">]</span>  <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">                <span class="n">CGFloat</span> <span class="n">rad</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;pr70&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class="line">                <span class="n">CLLocationCoordinate2D</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">);</span>
</span><span class="line">                <span class="n">line_points</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">location</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">                <span class="n">MKCircle</span> <span class="o">*</span><span class="n">cir</span> <span class="o">=</span> <span class="p">[</span><span class="n">MKCircle</span> <span class="nl">circleWithCenterCoordinate:</span> <span class="n">location</span>
</span><span class="line">                                                              <span class="nl">radius:</span> <span class="n">rad</span><span class="o">*</span><span class="mi">1000</span><span class="p">];</span>
</span><span class="line">                <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addOverlay:</span><span class="n">cir</span><span class="p">];</span>
</span><span class="line">                <span class="n">MKPointAnnotation</span> <span class="o">*</span><span class="n">centerPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPointAnnotation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class="line">                <span class="n">centerPoint</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class="line">                <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addAnnotation:</span><span class="n">centerPoint</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">            <span class="n">MKPolyline</span> <span class="o">*</span><span class="n">line</span> <span class="o">=</span> <span class="p">[</span><span class="n">MKPolyline</span> <span class="nl">polylineWithCoordinates:</span><span class="n">line_points</span> <span class="nl">count:</span><span class="n">length</span><span class="p">];</span>
</span><span class="line">            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addOverlay:</span><span class="n">line</span><span class="p">];</span>
</span><span class="line">            <span class="n">free</span><span class="p">(</span><span class="n">line_points</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mapkit">MapKit</h2>

<p>MapKit is simular to most UI elements. You setup a MKMapView, add data
(MKAnnotation, MKOverlay, …etc.) to it, and handle drawing delegate methods.
This is a prototype app, so I only use built-in <code>MKPointAnnotation</code> and
<code>MKPolyline</code> overlay. If you want to assign custom properties to annotation or
overlays, you can subclass them and implement drawing functions in delegate.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="cp">#pragma mark Map View Delegate methods</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">MKOverlayView</span><span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">viewForOverlay:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">MKOverlay</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">overlay</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">MKCircle</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">MKCircleView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKCircleView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCircle:</span><span class="n">overlay</span><span class="p">];</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.02</span><span class="p">];</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.15</span><span class="p">];</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">MKPolyline</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class="line">        <span class="n">MKPolylineView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPolylineView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPolyline:</span><span class="n">overlay</span><span class="p">];</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.2</span><span class="p">];</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="n">MKAnnotationView</span><span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mView</span> <span class="nf">viewForAnnotation:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">MKAnnotation</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">annotation</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;pinView&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="n">MKAnnotationView</span> <span class="o">*</span><span class="n">annotationView</span> <span class="o">=</span> <span class="p">(</span><span class="n">MKAnnotationView</span><span class="o">*</span><span class="p">)[</span><span class="n">mView</span> <span class="nl">dequeueReusableAnnotationViewWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">annotationView</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">annotationView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKAnnotationView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAnnotation:</span><span class="n">annotation</span> <span class="nl">reuseIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class="line">        <span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;typh.png&quot;</span><span class="p">];</span>
</span><span class="line">        <span class="n">annotationView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">img</span><span class="p">;</span>
</span><span class="line">        <span class="n">annotationView</span><span class="p">.</span><span class="n">canShowCallout</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">annotationView</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s it. Now we have a native interface to show typhoon prediction!</p>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/typhoon_tw/typhoon-09-16.png" /></p>

<h2 id="source-code">Source code</h2>

<p>The source code is on <a href="https://github.com/dryman/Taiwan-Typhoon-iOS">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taiwan Typhoon App (1)]]></title>
    <link href="http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1/"/>
    <updated>2012-09-16T16:11:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1</id>
    <content type="html"><![CDATA[<p>Taiwan is an island next to Pacific ocean, and one kind of serious disaster in
Taiwan is typhoon. Fortunately, We have best typhoon researches in the world,
and I want to make a step further to let people read typhoon predictions on iOS.</p>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/typhoon_tw/typhoon-08-23.png" /></p>

<!-- more -->

<p>There are two main resources that we can get typhoon prediction. One is 
<a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">Central Weather Bureau, Taiwan (CWB)</a>, and the other is 
<a href="http://jtwccdn.appspot.com/JTWC/">Joint Typhoon Warning Center (JTWC)</a>. Here I’ll focus on <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> data.</p>

<h2 id="setup-inspect-environment">Setup inspect environment</h2>

<p>At the first scene, <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> seems hard to parse because it uses images
to show potential track area instead of using JSON API and google map.</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/cwb_pta.png" alt="cwb pta" title="figure 2" /></p>

<p>The html code is quite dirty and hard to inspect. The tip is to find the <code>iframe</code>
element from the inspector.</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/inspect_iframe.png" alt="inspect iframe" title="figure 3" /></p>

<p>Then, open the direct link in another window.</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/cwb_pta_iframe.png" alt="cwb iframe" title="figure 4" /></p>

<p>Now we have a relatively cleaner html to inspect.</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/inspector.png" alt="inspector" title="figure 5" /></p>

<h3 id="get-the-information-source">Get the information source</h3>

<p>I’m lucky. The source is right in JavaScript file.</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/ty_infos.png" alt="ty info" title="figure 6" /></p>

<p>Though it’s not JSON, but almost (lol). The direct link is</p>

<p><img src="http://www.idryman.org/images/typhoon_tw/ty_infos_dir.png" alt="ty info dir" title="figure 7" /></p>

<p>The parameter of the link seems to be a clue that we can query history records,
but it doesn’t. With or without the parameter it always gives us the newest
information of typhoons.</p>

<h2 id="parse">Parse</h2>

<p>We only interested in <code>var typhs= [...]</code>. It’s easy to get data out using regular
expression.</p>

<p>I tested regular expression with Perl before I actually implement it in
Objective-C. If you need a tool to do text processing, Perl is always the best
choice. I strongly recommend people to learn Perl, it’s worthy.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>https://github.com/dryman/Taiwan-Typhoon-iOS/blob/master/parse.pl source </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line">    <span class="c1">#!/usr/bin/env perl</span>
</span><span class="line">    <span class="k">use</span> <span class="mf">5.010</span><span class="p">;</span>
</span><span class="line">    <span class="k">use</span> <span class="n">English</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="nb">undef</span> <span class="nv">$INPUT_RECORD_SEPARATOR</span><span class="p">;</span>  <span class="c1"># disable input seprator &quot;\n&quot;</span>
</span><span class="line">    <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&quot;ty_infos.js&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nv">$_</span> <span class="o">=</span> <span class="sr">&lt;$fh&gt;</span><span class="p">;</span>                     <span class="c1"># read endire file as string into $_</span>
</span><span class="line">
</span><span class="line">    <span class="sr">/\[.+?\];/s</span><span class="p">;</span>                    <span class="c1"># /s modifier let &#39;.&#39; match &quot;\n&quot;</span>
</span><span class="line">                                    <span class="c1"># +? match not greedly</span>
</span><span class="line">    <span class="n">say</span> <span class="nv">$MATCH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Beware that not to match greedly, else you won’t get what you want. Now we can
write it in much more verbose Objective-C.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line">    <span class="n">NSRegularExpression</span> <span class="o">*</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="s">@&quot;</span><span class="se">\\</span><span class="s">[.+?</span><span class="se">\\</span><span class="s">];&quot;</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">err</span><span class="p">];</span>
</span><span class="line">    <span class="n">NSRange</span> <span class="n">range_of_match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">rangeOfFirstMatchInString:</span><span class="n">ty_infos</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ty_infos</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class="line">    <span class="n">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">ty_infos</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range_of_match</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">range_of_match</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class="line">    <span class="n">NSArray</span><span class="o">*</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Earthquake early warning prototype]]></title>
    <link href="http://www.idryman.org/blog/2012/09/15/earthquake-early-warning-prototype/"/>
    <updated>2012-09-15T14:48:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/15/earthquake-early-warning-prototype</id>
    <content type="html"><![CDATA[<p>I made a  prototype of earthquake early warning system in one week. The scenario
goes as follows: We use a Friendly ARM SBC (Single-Board Computer) as an
earthquake signal collector and processor. If the signal was identified as
serious earthquake, it would send a message to our server. Then our server will
authenticate the message and use Apple Push Notification Service (APNS) to
notify some iPhone registered for the notifications.</p>

<p>The demo video:</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/jpXXkftFtI4" frameborder="0" allowfullscreen=""></iframe>

<!-- more -->

<h2 id="apple-push-notification-service-apns">Apple Push Notification Service (APNS)</h2>

<p>There are two ways to show up a notification even if app wasn’t active. One is
local notification and the other is server-pushed notification.</p>

<blockquote>
  <p>Local notification are scheduled by an iOS application. It’s iOS only.</p>
</blockquote>

<blockquote>
  <p>Push notification are sent by a remote server to Apple Push Notification
   service, which pushes the notification to devices on which the application is
   installed.</p>
</blockquote>

<p>There are a lot of limitation in alert message. So one must use it wisely. The
maximum size allowed for a notification payload is <em>256 bytes</em>. APNS refuses any
notification that exceeds this limit. The notification is encoded in a JSON
string, the properties go as follows:</p>

<ul>
  <li><strong>alert</strong> If this property is included, iOS display a standard alert. This
property can be a string or a dictionary. If it was a dictionary, below are
the properties of <strong>alert</strong>.
    <ul>
      <li><strong>body</strong> The text of the alert message</li>
      <li><strong>action-loc-key</strong> Display an alert with two buttons. The right buttons’s
title would be this key.</li>
      <li><strong>loc-key</strong> A key to an alert-message string in a <code>Localizable.strings</code>
file for the current localization.</li>
      <li><strong>loc-args</strong> Variable string to appear in place of format specifiers 
in <strong>loc-key</strong>.</li>
      <li><strong>launch-image</strong> The file name of an image in application bundle, which
will be shown on the display message.</li>
    </ul>
  </li>
  <li><strong>badge</strong> The number to display as the badge of the application icon.</li>
  <li><strong>sound</strong> The name of the sound in the application bundle. Set the property to
<em>default</em> then the default sound is played.</li>
</ul>

<p>To develop and deploy the provider side of a client/server application, you must
get SSL certificatates from Apple Dev Center. Apple has a <a href="http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ProvisioningDevelopment/ProvisioningDevelopment.html#//apple_ref/doc/uid/TP40008194-CH104-SW1">guide for
this</a>.</p>

<p>After setting up provisioning on Dev Center, you can get the certificate and key
in <code>.pem</code> format, with following commands.</p>

<pre><code>openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12
openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12
</code></pre>

<p>Remember to setup your bundle identifier and code sign as same as your
provisioning profile uploaded to apple.</p>

<p>Sometimes you might bump into bugs that your code sign wouldn’t work when you
renew your bundle identifier. If so, just restart XCode.</p>

<h2 id="server-cgi-script">Server CGI script</h2>

<p>I use Perl to be cgi server. There are already a lot of APNS plugins that you
can find in most popular languages. So just pick what is comfortable to you
for implementing server side application.</p>

<p>My script that handles APNS looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="perl"><span class="line"><span class="c1">#!/usr/bin/env perl</span>
</span><span class="line"><span class="k">use</span> <span class="nn">Net::</span><span class="n">APNS</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">my</span> <span class="nv">$apns</span> <span class="o">=</span> <span class="nn">Net::</span><span class="n">APNS</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
</span><span class="line"><span class="k">my</span> <span class="nv">$notifier</span> <span class="o">=</span> <span class="nv">$apns</span><span class="o">-&gt;</span><span class="n">notify</span><span class="p">({</span>
</span><span class="line">  <span class="n">cert</span> <span class="o">=&gt;</span> <span class="s">&quot;cert.pem&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="n">key</span> <span class="o">=&gt;</span> <span class="s">&quot;key.pem&quot;</span><span class="p">,</span>
</span><span class="line">  <span class="n">passwd</span> <span class="o">=&gt;</span> <span class="s">&quot;passwd&quot;</span><span class="p">,</span>
</span><span class="line"><span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="n">devicetoken</span><span class="p">(</span><span class="s">&quot;202154bb3b92e71f02b011183dfc7ad1261b69007346b52d1c8bcdb5aef9f4dd&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="n">message</span><span class="p">(</span><span class="s">&quot;Earthquake!!&quot;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="n">badge</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="n">sound</span><span class="p">(</span><span class="s">&#39;default&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="n">sandbox</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line"><span class="nv">$notifier</span><span class="o">-&gt;</span><span class="nb">write</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The device token is generated by your app. You will first register when your app
launch, then get the token from method <code>- (void)application:(UIApplication
*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData
*)deviceToken</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@implementation</span> <span class="nc">FCAppDelegate</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerForRemoteNotificationTypes:</span>
</span><span class="line">        <span class="p">(</span><span class="n">UIRemoteNotificationTypeAlert</span><span class="o">|</span>
</span><span class="line">         <span class="n">UIRemoteNotificationTypeBadge</span><span class="o">|</span>
</span><span class="line">         <span class="n">UIRemoteNotificationTypeSound</span><span class="p">)];</span>
</span><span class="line">    <span class="c1">// Override point for customization after application launch.</span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">deviceToken</span> <span class="p">{</span>
</span><span class="line">    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;My token is %@&quot;</span><span class="p">,</span> <span class="n">deviceToken</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="arm-board">ARM board</h2>

<p>I use Friendly ARM 6410 for prototyping.</p>

<p><img src="http://www.idryman.org/images/mini6410.jpg" alt="mini6410" title="figure 1" /></p>

<p>Here are some configuration details:</p>

<h3 id="booting">booting</h3>

<p>In <code>minicom</code> remote shell:</p>

<pre><code>&gt; boot-args:
&gt; root=/dev/mtdblock2 rootfstype=yaffs2 init=/linuxrc console=ttySAC0,115200
</code></pre>

<p>The boot args is quite important else you won’t get the shell from the device or
you may not boot it successfully. It took me a while to find the correct boot
args.</p>

<h3 id="cross-compile">cross compile</h3>

<p>If some desired library are not included in the board, you can cross compile
it from source. However, the configuration is a bit complex then normal
compilation:</p>

<pre><code>$ ./configure --host=arm-linux-gnu --target=arm-linux CC=arm-linux-gcc \
$ AR=arm-linux-ar LD=arm-linux-ld RANLIB=arm-linux-ranlib \
$ --prefix=/opt/curl --without-ssl
</code></pre>

<p>The cross compiled library can be uploaded to ARM board via ftp:</p>

<pre><code>$ ncftp -u user -p passwd $IP
&gt; put curl.tar.gz
</code></pre>

<p>You can find the <code>$IP</code> in minicom remote shell by <code>ifconfig</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grand central dispatch vs OpenMP]]></title>
    <link href="http://www.idryman.org/blog/2012/08/05/grand-central-dispatch-vs-openmp/"/>
    <updated>2012-08-05T12:41:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/08/05/grand-central-dispatch-vs-openmp</id>
    <content type="html"><![CDATA[<p>In 2009 Apple released a new task parallelism technology called 
<a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch (GCD)</a>. Apple worked hard on tuning GCD; stated that only 15
instructions are required to queue up a work unit in GCD, while creating a
traditional thread could easily require several hundred instructions.<br />
The main advantage of GCD is that programmer/user does not required to choose
how many thread for application that optimize the most. It can save a lot of
time for programmers because getting the most power out of CPUs requires a lot
of measurement. With GCD, let the operating system decide it for you, <em>it just
works.</em></p>

<!-- more -->

<p>Most GCD documentation provided by Apple take focus on user applications:
background process, asynchronous callbacks, non-blocking UI, dispatched IOs
…etc. GCD and c/obj-c blocks works pretty good in those scenarios, but we
want a more general comparison between GCD and traditional thread models. <strong>Which
is faster?</strong>
Currently no one has made a general benchmark for this. I targeted to use an
industry standard benchmark for GCD vs threads, and I ended up by picking 
<a href="http://en.wikipedia.org/wiki/Conjugate_gradient_method">Conjugate Gradient</a> computation in 
<a href="http://www.nas.nasa.gov/publications/npb.html">NAS Parallel Benchmark (NPB) maintained by NASA</a> as my benchmark model.</p>

<p>I uses <a href="http://openmp.org/wp/">OpenMP</a> implementation in CG problem. It is an shared memory
threading API which is much easier to use then POSIX thread. However it is still
required for programmer/user to pick thread number in run time or in compile time.
NASA only provide fortran code, so I uses <a href="http://jason.cse.ohio-state.edu/examples/npb/index.html">Ohio’s C implementation</a>.</p>

<h2 id="benchmark-result">Benchmark result</h2>

<p><img src="http://www.idryman.org/images/npb_cg.png" alt="NPB CG" title="figure 1" /></p>

<p>The result is quite promising! Problem sizes in NPB are predefined and indicated
as different classes: </p>

<ul>
  <li>Class W: vector size: 7000, iterations: 15 (90’s workstation size, now likely
too small)</li>
  <li>Class A: vector size: 14000, iterations: 15</li>
  <li>Class B: vector size: 75000, iterations: 75</li>
</ul>

<p>I tested OpenMP with different thread numbers and it performs differently on
different problem size. It not quite obvious to choose a correct thread number
for the problem, and GCD implementations beats them all.</p>

<h2 id="bottleneck-implementation">Bottleneck implementation</h2>

<p>The OpenMP implementation looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="cp">#pragma omp parallel {  </span><span class="c1">// Spawn threads for all computations in the block</span>
</span><span class="line">    <span class="cm">/* </span>
</span><span class="line"><span class="cm">      some other code... </span>
</span><span class="line"><span class="cm">    */</span>
</span><span class="line">
</span><span class="line">    <span class="cp">#pragma omp for private(i,k)  </span><span class="c1">// Bottleneck</span>
</span><span class="line">      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">lastrow</span><span class="o">-</span><span class="n">firstrow</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">iresidue</span><span class="p">;</span>
</span><span class="line">        <span class="kt">double</span> <span class="n">sum1</span><span class="p">,</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">        <span class="n">iresidue</span> <span class="o">=</span> <span class="p">(</span><span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="n">sum1</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">        <span class="n">sum2</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">iresidue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">iresidue</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>   <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="p">]];</span>
</span><span class="line">          <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum2</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">          <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="cm">/* more code */</span>
</span><span class="line">      <span class="p">}</span> <span class="cm">/* end parallel */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Other code instead of bottleneck are basically vector initialization, copy,
multiply and norm computations. I tested all of these, but they don’t make
big differences between OpenMP, GCD, and BLAS1 functions.</p>

<p>GCD implementation looks much like the original code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">      <span class="c1">// c_queue is a concurrent queue</span>
</span><span class="line">      <span class="n">dispatch_apply</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="n">c_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span><span class="p">){</span>
</span><span class="line">        <span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">        <span class="kt">double</span> <span class="n">sum1</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">sum2</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">        <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">        <span class="kt">size_t</span> <span class="n">iresidue</span> <span class="o">=</span> <span class="p">(</span><span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">iresidue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">iresidue</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>   <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="p">]];</span>
</span><span class="line">          <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum2</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What a great news! It is much easier then I thought to transfer the original
code into GCD.</p>

<h2 id="parallel-reduction-in-openmp-gcd-and-blas">Parallel reduction in OpenMP, GCD, and BLAS</h2>

<p>As I concluded before, it doesn’t make big difference between three of these.
The implementations are:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>OpenMP  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="cp">#pragma omp parallel private (i,j,k)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="cp">#pragma omp single nowait</span>
</span><span class="line">      <span class="n">rho</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">    <span class="cp">#pragma omp for reduction(+:rho)</span>
</span><span class="line">      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">NA</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">rho</span> <span class="o">=</span> <span class="n">rho</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>GCD  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="cm">/* clang -fblocks -O3 -DCACHE_LINE_SIZE=$(shell sysctl -n hw.cachelinesize) */</span>
</span><span class="line">    <span class="cp">#include &lt;dispatch/dispatch.h&gt;</span>
</span><span class="line">    <span class="cp">#define STRIDE (1024*(CACHE_LINE_SIZE/sizeof(double)))</span>
</span><span class="line">    <span class="cp">#define DIVIDE (NA/STRIDE)</span>
</span><span class="line">    <span class="cp">#define RESIDUE (NA%STRIDE)</span>
</span><span class="line">
</span><span class="line">    <span class="n">__block</span> <span class="kt">double</span> <span class="n">rho</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">s_queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span>
</span><span class="line">      <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">DIVIDE</span><span class="o">*</span><span class="n">STRIDE</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">NA</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        <span class="n">rho</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">    <span class="n">dispatch_apply</span><span class="p">(</span><span class="n">DIVIDE</span><span class="p">,</span> <span class="n">c_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span><span class="p">){</span>
</span><span class="line">      <span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="n">STRIDE</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line">      <span class="kt">size_t</span> <span class="n">j_e</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">STRIDE</span><span class="p">;</span>
</span><span class="line">      <span class="kt">double</span> <span class="n">sum</span><span class="o">=</span><span class="mf">0.0</span><span class="p">;</span>
</span><span class="line">      <span class="k">do</span> <span class="p">{</span>
</span><span class="line">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">      <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">j_e</span><span class="p">);</span>
</span><span class="line">      <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">s_queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span>
</span><span class="line">        <span class="n">rho</span> <span class="o">+=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>CBLAS  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="cm">/* clang -lcblas </span>
</span><span class="line"><span class="cm">       when linking */</span>
</span><span class="line">    <span class="cp">#include &lt;Accelerate/Accelerate.h&gt; </span><span class="c1">// header for OSX</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// rho = x.x</span>
</span><span class="line">    <span class="c1">//               size, vectorX,  incX, vectorY, incY</span>
</span><span class="line">    <span class="n">rho</span> <span class="o">=</span> <span class="n">cblas_ddot</span><span class="p">(</span>  <span class="n">NA</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>  <span class="mi">1</span>  <span class="p">,</span>  <span class="o">&amp;</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>    <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I think it does not make difference because those operations are all one
dimensional BLAS1 problems.</p>

<h4 id="note-on-cache-line-size">Note on cache line size</h4>

<p>I thought that cache line size matters when I start implementing GCD version of
parallel reduction. But it ended up that you just need to give it a large enough
size for compiler to generate SIMD optimization. Note that you can get the CPU
cache line size by command <code>sysctl -n hw.cachelinesize</code> from shell.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I think the best practice so far is to use BLAS whenever you can. It’s cleaner
and highly optimized by libraries developed by Apple, Intel, or other HPC
foundations. For other operation that BLAS don’t support, GCD is a good choice
and easy to migrate to. The pros and cons go as follows:</p>

<h4 id="openmp-over-gcd">OpenMP over GCD</h4>

<ul>
  <li>Supported by gcc, while clang doesn’t.</li>
  <li>Can be used on C, CPP, and Fortran (and many more?)</li>
  <li>Many existing numerical code uses OpenMP</li>
  <li>Easier to get start with. eg. <code>#omp parallel for</code></li>
  <li>Better syntax in reduction: <code>#omp reduction (+:sum)</code></li>
</ul>

<h4 id="gcd-over-openmp">GCD over OpenMP</h4>

<ul>
  <li>Much easier to tune performance.</li>
  <li>Tighter logic construction. Everything is encapsulated in blocks.</li>
  <li>No separated thread spawns and private variables like OpenMP.</li>
  <li>Much less parameters to adjust in compile time and run time.</li>
  <li>Highly optimized in any kinks of problem sizes.</li>
  <li>Works on iOS (OpenMP does not)</li>
</ul>

<p>I think the greatest advantage you can gain from GCD is that it is highly optimized 
on different problem sizes, because operating system takeovers task load balancing. 
It surprised me that on class W problem, OpenMP version with 16 threads is twice
as slow compares to 1 thread version. With GCD, you no longer need to handle
this unexpected result! Cheers.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handle touch events in UIWebView]]></title>
    <link href="http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview/"/>
    <updated>2012-06-18T17:53:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview</id>
    <content type="html"><![CDATA[<p>This is an annoying problem that related to my recent project. The goal is
simple: </p>

<blockquote>
  <p>handle <strong>single touch event</strong> in <code>UIWebView</code> and let it handle other touch
events as defaults.</p>
</blockquote>

<p>However this is really hard to achive…</p>

<h3 id="edit-620">Edit: 6/20</h3>

<p>I found this post:<a href="http://mithin.in/2009/08/26/detecting-taps-and-events-on-uiwebview-the-right-way/">DETECTING TAPS AND EVENTS ON UIWEBVIEW – THE RIGHT
WAY</a>.
He handles touch event via <code>- (void) sendEvent:(UIEvent*) event</code> instead of
UIGesutreRecognizer. His approach is more general and less hacky than mine. Have
a look at it also!</p>

<!-- more -->

<h3 id="responder-chain">responder chain</h3>

<p>First we need to review cocoa event responder chain, aka event delivery paths.
According to apple <a href="http://developer.apple.com/library/ios/#documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/EventsiPhoneOS/EventsiPhoneOS.html#//apple_ref/doc/uid/TP40009541-CH2-SW1">Event Handling Guide for iOS</a>:</p>

<blockquote>
  <p>The window object uses hit-testing and the responder chain to find the view to
receive the touch event. In hit-testing, a window calls <code>hitTest:withEvent:</code> on
the top-most view of the view hierarchy; this method proceeds by recursively
calling <code>pointInside:withEvent:</code> on each view in the view hierarchy that returns
<code>YES</code>, proceeding down the hierarchy until it finds the subview within whose
bounds the touch took place. That view becomes the hit-test view.</p>
</blockquote>

<p>For example, we have a single view application with a <code>UIWebView</code> in it. The
touch event on UIWebView will be delivered in following order:</p>

<ol>
  <li>UIWebView</li>
  <li>Container view</li>
  <li>Custom view controller</li>
  <li>Singleton application delegate</li>
</ol>

<p>Even if we added a <code>UIGestureRecognizer</code> on top of <code>UIWebVIew</code> in Interface
Builder, it would not be on the event deliver path.</p>

<h3 id="add-uigesturerecognizer-programmatically">Add <code>UIGestureRecognizer</code> programmatically</h3>

<p>The standard way to add touch event listener goes as follows:</p>

<ol>
  <li>alloc and init <code>UITapGestureRecognizer</code>, setup tap count and delegate</li>
  <li>attach the recognizer to container view</li>
  <li>adopt <code>&lt;UIGestureRecognizerDelegate&gt;</code> protocol and return <code>YES</code> on method <code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGesture    Recognizer:(UIGestureRecognizer *)otherGestureRecognizer</code></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class="line">    <span class="c1">// init your view here</span>
</span><span class="line">    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// UIGestureRecognizerDelegate</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherGestureRecognizer</span><span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The last step we let cocoa event system pass the event through every possible
handler in the responder chain. Thus both <code>UIWebView</code> and
<code>UITapGestureRecognizer</code> will handle the touch event. Now we only have to make
sure it handles single tap event, not long touch, double tap, or drag event.</p>

<h3 id="problem-of-uitapgesturerecognizer">Problem of <code>UITapGestureRecognizer</code></h3>

<p>At first, I tried to implement my event handler with cocoa target action
mechanism, and use <code>requireGestureRecognizerToFail</code> to tell cocoa that I don’t
want it to trigger double tap nor triple tap events.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class="line">    <span class="c1">// Touch event handler</span>
</span><span class="line">    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tripleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap:</span><span class="p">)];</span>
</span><span class="line">    <span class="n">tripleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class="line">    <span class="n">doubleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="n">tripleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="n">doubleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">doubleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class="line">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];{</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">singleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="n">gesture</span> <span class="p">{</span>
</span><span class="line"><span class="c1">// handle event</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, <strong>it just don’t work!!</strong> It always triggered the <code>singleTap:</code> method
when I tapped twice or more. I need to find another way to fix the problem.</p>

<h3 id="hack-on-uigesturerecognizerdelegate">Hack on <code>&lt;UIGestureRecognizerDelegate&gt;</code></h3>

<p>There are two useful instance method in <code>&lt;UIGestureRecognizerDelegate&gt;</code>:</p>

<ol>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch</code>
  return <code>YES</code> (the default) to allow the gesture recognizer to examine the touch object,
  NO to prevent the gesture recognizer from seeing this touch object.
  This method is called before <code>touchesBegan:withEvent:</code> is called on the gesture
  recognizer for a new touch.</p>
  </li>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer</code>
  return <code>YES</code> to allow both gestureRecognizer and otherGestureRecognizer to recognize
  their gestures simultaneously. The default implementation returns <code>NO</code>—-no two
  gestures can be recognized simultaneously. This method would be called
  frequently during long touch, drag, double tapped or any other kinds of
  events.</p>
  </li>
</ol>

<p>The <code>(UITouch *) touch</code> in first method has property <code>tapCount</code>, which is what
we want. Sadly this method is called immediately as user tap on the device.
That is, if we log out the message like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class="line">      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;gestureRecognizer shouldReceiveTouch: tapCount = %d&quot;</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And tap twice, it will print out</p>

<pre><code>gestureRecognizer shouldReceiveTouch: tapCount = 1
gestureRecognizer shouldReceiveTouch: tapCount = 2
</code></pre>

<p>because <code>gestureRecognizer shouldReceiveTouch:</code> will be triggered every time
you touch the screen.</p>

<p>The way to differ single tap and others is to use a <code>NSTimer</code> that triggers the
handler later and cancel the timer if <code>tapCount &gt;= 2</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">@interface</span> <span class="nc">WTViewController</span> <span class="p">()</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class="line"><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">assign</span><span class="p">)</span> <span class="n">UIGestureRecognizerState</span> <span class="n">gestureState</span><span class="p">;</span>
</span><span class="line"><span class="k">@end</span>
</span><span class="line">
</span><span class="line"><span class="k">@implementation</span> <span class="nc">WTViewController</span>
</span><span class="line"><span class="k">@synthesize</span> <span class="n">timer</span><span class="p">;</span>
</span><span class="line"><span class="k">@synthesize</span> <span class="n">gestureState</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">timerWithTimeInterval:</span><span class="mf">0.5</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSingleTap:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>
</span><span class="line">        <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer:</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="nl">forMode:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">;</span>
</span><span class="line">        <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class="line">        <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">otherGestureRecognizer</span><span class="p">{</span>
</span><span class="line">    <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">gestureRecognizer</span><span class="p">.</span><span class="n">state</span><span class="p">;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Handler will be called from timer</span>
</span><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleSingleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">gestureState</span><span class="o">==</span><span class="n">UIGestureRecognizerStateRecognized</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="s">@&quot;SingleTap&quot;</span> <span class="nl">message:</span><span class="s">@&quot;Oh yes!&quot;</span> <span class="nl">delegate:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span><span class="s">@&quot;OK&quot;</span> <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class="line">        <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The timer can solve multiple taps issue, but it cannot recognize long touch. The
long touch cannot be recognized in <code>gestureRecognizer shouldReceiveTouch:</code>
method, but can be detected in
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> method. If the touch went
too long, the <code>gestureRecognizer.state</code> would be
<code>UIGestureRecognizerStateFailed</code>. Thus I record the state and check it when the
timer finished.</p>

<p>There is one more thing that I should mentioned:
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> may not be called as
frequently as we might expected. If we tap once, wait, and long touch the
device, <code>handleSingleTap</code> may still recognize the event to be a quick tap
because <code>self.gestureState</code> may still be <code>UIGestureRecognizerStateRecognized</code> at
the time. The way to prevent this result is to reset <code>self.gestureState</code>
every time we start the timer.</p>

<h3 id="source-code">Source code</h3>

<p>You can find the source code on my <a href="https://github.com/dryman/UIWebTouch">github page</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug UIWebView in your iOS app]]></title>
    <link href="http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app/"/>
    <updated>2012-06-17T15:44:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app</id>
    <content type="html"><![CDATA[<p>It is often to embed a UIWebView in an iOS app. However it doesn’t provide the
powerful webkit inspector by default. Nathan de Vries has written a
<a href="http://atnan.com/blog/2011/11/17/enabling-remote-debugging-via-private-apis-in-mobile-safari/">post</a> to solve the problem, but the solution didn’t work on my XCode
4 with Clang front end.</p>

<!-- more -->

<p>This is Nathan’s solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Nathan&#8217;s solution </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// ...Snipped...</span>
</span><span class="line">    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;WebView&quot;</span><span class="p">)</span> <span class="n">_enableRemoteInspector</span><span class="p">];</span>
</span><span class="line">    <span class="c1">// ...Snipped...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The compiler will complain that you can’t force <code>WebView</code> to perform private
method <code>_enableRemoteInspector</code>. Thus, I use <code>performSelector:@selector()</code> instead
of direct method call. Guess what? The compiler accept the hack. Awesome!</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class="line"><span class="cp">    // enable the hack only when we use simulator</span>
</span><span class="line"><span class="cp">#if (TARGET_IPHONE_SIMULATOR)</span>
</span><span class="line">    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;WebView&quot;</span><span class="p">)</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">_enableRemoteInspector</span><span class="p">)];</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">    <span class="c1">// ...Snipped...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now simply run your iphone simulator and open the url <code>localhost:9999</code> to view your inspector. <strong>Voilà!</strong></p>

<h3 id="edit">Edit</h3>

<p><a href="https://github.com/brainlock">brainlock</a> shared his <a href="https://github.com/brainlock/ios-remote-inspector">remote inspector</a> that can use proxy
to debug on the device. However, I prefer to use simple and stupid solution
after all. ;)</p>

<p>For more curious, The <code>#if (TARGET_IPHONE_SIMULATOR)</code> macro will ensure the hack
of accessing WebKit’s private api won’t ship with your production code.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursion best practices]]></title>
    <link href="http://www.idryman.org/blog/2012/04/14/recursion-best-practices/"/>
    <updated>2012-04-14T08:26:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/14/recursion-best-practices</id>
    <content type="html"><![CDATA[<p>There are many programming languages that support recursion. However, recursion
is hard to write, and even harder to write it well.</p>

<blockquote>
  <p>To iterate is human, to recurse, divine.</p>
</blockquote>

<p>If you also surveyed deeply in FP area, you will find a lot of patterns, such as
tail recursion, continuous passing style, combination of higher order functions,
fixed point y-combinator, memoization, and many more. You can see that a simple
factorial can be written in <a href="http://www.willamette.edu/~fruehr/haskell/evolution.html">23 different forms</a>. How do we
pick a better one?</p>

<blockquote>
  <p>In short, the only pattern you should use heavily is <em>tail recursion</em>. Use
other patterns only when necessary.</p>
</blockquote>

<!-- more -->

<h2 id="straight-body-recursion-the-problem">Straight (body) recursion, the problem</h2>

<p>Let’s begin with mostly seen recursions: factorial and fibonacci.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haskell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fac</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fac</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">n</span> <span class="o">*</span> <span class="n">fac</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span> <span class="mi">0</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fib</span> <span class="mi">1</span> <span class="ow">=</span> <span class="mi">1</span>
</span><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When you are programming in functional style, keep in mind of “non-functional”
execution.</p>

<pre><code>fac (5) = 5 * fac (4)
        = 5 * 4 * fac (3)
        = 5 * 4 * 3 * fac (2)
        = 5 * 4 * 3 * 2 * fac (1)
        = 5 * 4 * 3 * 2 * 1 * fac (0)
        = 5 * 4 * 3 * 2 * 1 * 1
        = 5 * 4 * 3 * 2 * 1
        = 5 * 4 * 3 * 2
        = 5 * 4 * 6
        = 5 * 24
        = 120
</code></pre>

<p>The problem is that the function has to use stack to hold number and multiply
to the value returned by the recursive function.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Also the fibonacci executing model:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-ff6b576e3a2600dd84a36f0059875404.svg" /></p>

<p>This is even worse, the complexity of fibonacci function cost $O(\phi^n)$ where
$\phi=\frac{1+\sqrt{5}}{2}$. </p>

<blockquote>
  <p>Whenever you use a returned value in your function body, there is a cost.</p>
</blockquote>

<p>We can reduce both factorial and fibonacci in tail recursion style using some
<em>accumulators</em>.</p>

<h2 id="tail-recursion">Tail recursion</h2>

<p>The common way to translate a body recursion into a tail recursion is to add a
accumulator in argument list.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fac</span> <span class="mi">0</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">acc</span>
</span><span class="line"><span class="nf">fac</span> <span class="n">n</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">fac</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>fac 5 1 = fac 4 5
        = fac 3 20
        = fac 2 60
        = fac 1 120
        = fac 0 120
        = 120
</code></pre>

<p>We reduce the execution steps from $2 n$ to $n$, and there is no stack variables
any more! Moreover, in assembly level, it only have to use <code>goto</code> to the front
of the function and no need to set up environment again.</p>

<p>Fibonacci can be transformed to tail recursive function like this<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fib&#39;</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">f1</span>
</span><span class="line"><span class="nf">fib&#39;</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="n">n</span> <span class="mi">1</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<pre><code>fib' 5 1 1 = fib' 4 1 2
           = fib' 3 2 3
           = fib' 2 3 5
           = fib' 1 5 8
           = fib' 0 8 13
           = 8
</code></pre>

<p>This time we use two accumulator <code>f1</code> and <code>f2</code> to record the state and make it
more “iterative”. The original input <code>n</code> is treated as a “counter.”</p>

<blockquote>
  <p>Use multiple accumulators to make double recursion (like fibonacci) tail
recursive</p>
</blockquote>

<p>For different kinds of functional programming languages, you can abstract the
interface and hide details in language suggested ways:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haskell </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">fib</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="n">n</span> <span class="mi">1</span> <span class="mi">1</span>
</span><span class="line">    <span class="kr">where</span>
</span><span class="line">      <span class="n">fib&#39;</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">f1</span>
</span><span class="line">      <span class="n">fib&#39;</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="ow">=</span> <span class="n">fib&#39;</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Erlang </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="erlang"><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span>
</span><span class="line">
</span><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nv">F1</span><span class="p">,</span><span class="nv">F2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">F1</span><span class="p">;</span>
</span><span class="line"><span class="nf">fib</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span><span class="nv">F1</span><span class="p">,</span><span class="nv">F2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">fib</span><span class="p">(</span><span class="nv">N</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">F2</span><span class="p">,</span><span class="nv">F1</span><span class="o">+</span><span class="nv">F2</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Common Lisp </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">fib</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">rec</span> <span class="p">(</span><span class="nv">n</span> <span class="nv">f1</span> <span class="nv">f2</span><span class="p">)</span>
</span><span class="line">             <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">zerop</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">f1</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">1-</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">f2</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">f1</span> <span class="nv">f2</span><span class="p">)))))</span>
</span><span class="line">    <span class="p">(</span><span class="nv">rec</span> <span class="nv">n</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="returning-a-list">Returning a list</h2>

<p>When using tail recursion, we can also construct a returning list instead of a
atom:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">naive_reverse</span> <span class="kt">[]</span>     <span class="ow">=</span> <span class="kt">[]</span>
</span><span class="line"><span class="nf">naive_reverse</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">naive_reverse</span> <span class="n">xs</span><span class="p">)</span> <span class="o">++</span> <span class="n">x</span> <span class="c1">-- oops, used ++ operator!</span>
</span><span class="line">
</span><span class="line"><span class="nf">good_reverse</span> <span class="kt">[]</span>     <span class="n">acc</span> <span class="ow">=</span> <span class="n">acc</span>
</span><span class="line"><span class="nf">good_reverse</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">good_reverse</span> <span class="n">xs</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">acc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Or, in common lisp:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">good-reverse</span> <span class="p">(</span><span class="nb">rest</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">null</span> <span class="nb">rest</span><span class="p">)</span> <span class="nv">acc</span>
</span><span class="line">      <span class="p">(</span><span class="nv">good-reverse</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nb">rest</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">car</span> <span class="nb">rest</span><span class="p">)</span> <span class="nv">acc</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The key is to use <code>cons</code> (<code>:</code> in haskell, <code>|</code> in erlang) instead of list
concatenation operator (<code>++</code> in haskell and erlang.) The result of the left hand
side of the operator would be copied again and again and cause a quadratic
space and time complexity.</p>

<blockquote>
  <p>In common practices, use cons to build a reversed list, then reverse it at the
  end of recursion</p>
</blockquote>

<p>For example, if we want to return a list of fibonacci numbers<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">bad_fibs</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">fibs</span>
</span><span class="line"><span class="nf">bad_fibs</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">bad_fibs</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span> <span class="p">(</span><span class="n">fibs</span><span class="o">++</span><span class="n">f1</span><span class="p">)</span> <span class="c1">-- oops</span>
</span><span class="line">
</span><span class="line"><span class="nf">good_fibs</span> <span class="mi">0</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">reverse</span> <span class="n">fibs</span> <span class="c1">-- here is the magic</span>
</span><span class="line"><span class="nf">good_fibs</span> <span class="n">n</span> <span class="n">f1</span> <span class="n">f2</span> <span class="n">fibs</span> <span class="ow">=</span> <span class="n">good_fibs</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">f2</span> <span class="p">(</span><span class="n">f1</span><span class="o">+</span><span class="n">f2</span><span class="p">)</span> <span class="p">(</span><span class="n">f1</span><span class="kt">:</span><span class="n">fibs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="manipulating-a-tree">Manipulating a tree</h2>

<p>This is the best part of this article, it might be a little bit hard to
understand at the first time. But once you get the idea, you’d just love it as I
did. I first saw this idea in <a href="http://www.bookshelf.jp/texi/onlisp/onlisp_5.html#SEC32">Paul Graham’s on lisp</a>. He named this
pattern as “doubly recursion.” Later on I saw people use this pattern in
<a href="http://en.literateprograms.org/Quicksort_(Erlang)">Quicksort (Erlang) - LiteratePrograms</a>, without naming the pattern. For
convenience I’d just use the term “doubly recursive” to express the idea :)</p>

<blockquote>
  <p>The key idea of doubly recursive is to use a returned accumulator as another
recursion’s accumulator</p>
</blockquote>

<p>I want to write the flattening function that takes a nested list and return a
flatten one in haskell, however different depths of list are different types and
thus you cannot simply write a general function to deal it. So I turned back to
use lisp to express it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">flatten</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">labels</span> <span class="p">((</span><span class="nv">rec</span> <span class="p">(</span><span class="nv">x</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)</span>
</span><span class="line">                      <span class="p">((</span><span class="nb">atom</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">x</span> <span class="nv">acc</span><span class="p">))</span>
</span><span class="line">                      <span class="p">(</span><span class="no">t</span> <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">x</span><span class="p">)</span>
</span><span class="line">                              <span class="p">(</span><span class="nv">rec</span> <span class="p">(</span><span class="nb">cdr</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">acc</span><span class="p">))))))</span> <span class="c1">; use the returned acc as</span>
</span><span class="line">                                                     <span class="c1">; another rec&#39;s acc arg</span>
</span><span class="line">    <span class="p">(</span><span class="nv">rec</span> <span class="nv">x</span> <span class="no">nil</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that <code>labels</code> are like <code>where</code> clause in haskell. The <code>rec</code> function will
take a input x and return a reversed order of flatten list.</p>

<p>You can also apply this pattern on quick sort<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">qsort</span> <span class="kt">[]</span>     <span class="n">acc</span> <span class="ow">=</span> <span class="n">acc</span>
</span><span class="line"><span class="nf">qsort</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>    <span class="n">acc</span> <span class="ow">=</span> <span class="n">x</span><span class="kt">:</span><span class="n">acc</span>   <span class="c1">-- one element case</span>
</span><span class="line"><span class="nf">qsort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">acc</span> <span class="ow">=</span> <span class="n">partition</span> <span class="n">xs</span> <span class="kt">[]</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="kt">[]</span>
</span><span class="line">    <span class="kr">where</span>
</span><span class="line">      <span class="n">partition</span> <span class="kt">[]</span> <span class="n">less</span> <span class="n">equal</span> <span class="n">greater</span> <span class="ow">=</span> <span class="n">qsort</span> <span class="n">less</span> <span class="p">(</span><span class="n">equal</span> <span class="o">++</span> <span class="p">(</span><span class="n">qsort</span> <span class="n">greater</span> <span class="n">acc</span><span class="p">))</span>
</span><span class="line">      <span class="n">partition</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="n">less</span> <span class="n">equal</span> <span class="n">greater</span>
</span><span class="line">          <span class="o">|</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">x</span>     <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="n">less</span>     <span class="n">equal</span>     <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">greater</span><span class="p">)</span>
</span><span class="line">          <span class="o">|</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">x</span>     <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">less</span><span class="p">)</span> <span class="n">equal</span>     <span class="n">greater</span>
</span><span class="line">          <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">partition</span> <span class="n">ys</span> <span class="n">less</span>     <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">equal</span><span class="p">)</span> <span class="n">greater</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="other-patterns">Other patterns</h2>

<h4 id="continuous-passing-style-cps">1. Continuous passing style (CPS)</h4>

<p>CPS is to pass a exit function to a function and let it call it at the end. The
concept is similar to tail recursion, but I think it is better to “make no
assumption about what user will do with your functions.” Leave your function
interface simple and elegant, because using CPS is <strong>micro optimization</strong>. </p>

<p>CPS is a powerful techniques, but you must use it wisely. For example, you can use it
in regular expression back tracing or garbage collection generation step. In
those example the function has to <em>jump</em> back to somewhere in the control flow,
and CPS can make the job done nice and clean.</p>

<p>But please don’t use CPS like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scheme"><span class="line"><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fib</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nf">k</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">fib-of-n-1</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nf">fib</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">fib-of-n-2</span><span class="p">)</span>
</span><span class="line">                <span class="p">(</span><span class="nf">k</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">fib-of-n-1</span> <span class="nv">fib-of-n-2</span><span class="p">)))</span> <span class="c1">; CPS</span>
</span><span class="line">              <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">2</span><span class="p">)))</span>   <span class="c1">; inner fib</span>
</span><span class="line">       <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>         <span class="c1">; outer fib</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The CPS above will still cause $O(\phi^n)$ time and space order to do the
calculation!</p>

<h4 id="fixed-point-y-combinator">2. Fixed point y-combinator</h4>

<p>If you don’t know about y-combinator, just skip it.</p>

<p><a href="http://www.willamette.edu/~fruehr/haskell/evolution.html">The evolution of Haskell</a> suggested that fixed point
y-combinator is the fastest implementation of writing factorial in haskell, even
faster than tail recursion. However, it depends. In my benchmark it made no
differences on factorial function. And why do you want to make your function
hard to debug in a y-combinator? It is even hard to trace function calls in
Lisp’s <code>trace</code> commands.</p>

<h4 id="memoization">3. Memoization</h4>

<p>Memoization is also a powerful techniques that can benefit on rapid function
calls. It is a trade off of memory and speed. As CPS mentioned before, use it
wisely and not just for <strong>cool</strong>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There are not much design patterns on functional programming. I hope these
guidelines can be a start:</p>

<ol>
  <li>Whenever you use a returned value in your function body, there is a cost.</li>
  <li>Use multiple accumulators to make double recursion (like fibonacci) tail
recursive</li>
  <li>In common practices, use cons to build a reversed list, then reverse it at the
end of recursion</li>
  <li>The key idea of doubly recursive is to use a returned accumulator as another
recursion’s accumulator</li>
  <li>CPS and Memoization are powerful, but use it wisely</li>
</ol>

<p>Any discussion and suggestions are welcomed! Thanks!</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>In modern compiler the trivial straight recursion such as factorial will be
  optimized and make no big performance difference compare to the one written in
  tail recursion form.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>Take a look at how many possible ways to write 
  <a href="http://www.cliki.net/Fibonacci">fibonacci in common lisp</a>. There is also
  a way to write fibonacci in $O(log(n))$ order.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>The example is taken from 
  <a href="http://www.erlang.org/doc/efficiency_guide/listHandling.html">Erlang performance tuning – List handling</a>.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>Example taken from <a href="http://en.literateprograms.org/Quicksort_(Haskell)">Quicksort (haskell) - Literate Programs</a>.<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical software verification using SPIN]]></title>
    <link href="http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN/"/>
    <updated>2012-04-10T10:31:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN</id>
    <content type="html"><![CDATA[<p>This is a note for the talk <a href="http://www.iis.sinica.edu.tw/page/events/FILE/120409.pdf">New frontiers in formal software verification</a> 
spoken by <a href="http://spinroot.com/gerard/">Gerard J. Holzmann</a>, software verification architect for 
<a href="http://www.jpl.nasa.gov/index.cfm">NASA Jet Propulsion Laboratory (JPL)</a>. He introduced a fast automatic software
verification tool for distributed software system – <a href="http://spinroot.com/spin/whatispin.html">SPIN</a>.</p>

<p><img src="http://www.idryman.org/images/graphviz/g-f44bd3841c23d32cc5d46f28821bf434.svg" />
<!-- more --></p>

<h3 id="background">Background</h3>

<p>After some ~30 years of development, formal software verification is still
rarely used on industrial applications. A typical computer science verification
proof would take 300+ of pages, much more than other mathematical proofs.</p>

<p>It is considered to be too difficult, and takes too long (months to years) to
verify a software (like UNIX, IBM360, garbage collectors…etc.) Even in safety
critical applications, software verification is often restricted to the
verification of models of software, instead of software.</p>

<blockquote>
  <p>Goal: Make software verification as simple as testing, and as fast as
  compilation.</p>
</blockquote>

<h3 id="practical-software-verification">Practical software verification</h3>

<p><a href="http://spinroot.com/gerard/">Holzmann</a> is the author of <a href="http://spinroot.com/spin/whatispin.html">SPIN</a>, a popular open-source software
tool, used for the formal verification of distributed software systems. It has
been applied at different fields:</p>

<ul>
  <li>Commercial phone switch</li>
  <li>Spacecraft for Mars mission</li>
  <li>Flood Control </li>
  <li>Toyota Camry MY05</li>
  <li>Medical device transmission protocols</li>
</ul>

<p>Back in 1999, SPIN can verify 4 million lines of code of phone switch system
within 40 minutes. And now it is used in spacecraft system and many other
mission critical softwares.</p>

<h3 id="pathstar-switch-1999">PathStar switch (1999)</h3>

<p>SPIN was designed for PathStar switch, it is</p>

<ul>
  <li>A commercial data/phone switch designed in Bell Labs research (for Lucent
Technologies)</li>
  <li>Newly written code for the core call processing engine</li>
  <li>The first commercial call processing code that is formally verified</li>
  <li>After the product is released, in decades every updates of the product 
code was proofed in fully automated procedure</li>
</ul>

<p>In a complex feature precedence relations detecting <strong>undesired feature</strong>
interaction is a serious problem. The verification system has to deal with:</p>

<ul>
  <li>feature interaction</li>
  <li>feature breakage</li>
  <li>concurrency problems</li>
  <li>race conditions</li>
  <li>deadlock scenarios</li>
  <li>non compliance with legal requirements…etc.</li>
</ul>

<p>SPIN breaks the whole verification problem into five steps<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> :</p>

<p><img src="http://www.idryman.org/images/graphviz/g-e6e8d45d4f940e9bbe1ee18190f2e7f6.svg" /></p>

<h4 id="building-the-model">Building the model</h4>

<p>The first step is one of the hardest part in SPIN system. SPIN is not a silver
bullet that can analysis any input of C code. They designed a subset of ANSI C
with <a href="http://spinroot.com/spin/Man/Manual.html">some rules</a>, to make the program as a distributed finite state
machine.</p>

<p>For example, the following code</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">    <span class="err">@</span><span class="n">dial</span><span class="o">:</span>
</span><span class="line">      <span class="k">switch</span><span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nl">default:</span> <span class="k">goto</span> <span class="n">error</span><span class="p">;</span> <span class="cm">/* unexpected input */</span>
</span><span class="line">      <span class="k">case</span> <span class="n">Crdtmf</span>:         <span class="cm">/* digit collector ready */</span>
</span><span class="line">        <span class="n">x</span><span class="o">-&gt;</span><span class="n">drv</span><span class="o">-&gt;</span><span class="n">progress</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">Tdial</span><span class="p">);</span>
</span><span class="line">        <span class="n">time</span> <span class="o">=</span> <span class="n">MSEC</span><span class="p">(</span><span class="mi">16000</span><span class="p">);</span> <span class="cm">/* set timmer and wait event */</span>
</span><span class="line">
</span><span class="line">      <span class="cm">/* continue here */</span>
</span><span class="line">      <span class="err">@</span><span class="n">dial1</span><span class="o">:</span> <span class="k">switch</span><span class="p">(</span><span class="n">op</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="nl">default:</span> <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">crconn</span>: <span class="k">goto</span> <span class="n">B</span><span class="err">@</span><span class="n">lb</span><span class="p">;</span>
</span><span class="line">        <span class="k">case</span> <span class="n">Cronhook</span>: <span class="cm">/* caller hangs up */</span>
</span><span class="line">          <span class="n">x</span><span class="o">-&gt;</span><span class="n">drv</span><span class="o">-&gt;</span><span class="n">disconnect</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class="line">      <span class="err">@</span><span class="n">dial2</span><span class="o">:</span>  <span class="k">if</span><span class="p">(</span><span class="n">op</span><span class="o">!=</span><span class="n">Crconn</span> <span class="o">&amp;&amp;</span> <span class="n">op</span><span class="o">!=</span> <span class="n">rdis</span><span class="p">)</span>
</span><span class="line">            <span class="k">goto</span> <span class="n">Aidle</span><span class="p">;</span>
</span><span class="line">            <span class="c1">// ...etc</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>can generate this FSM:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-2ba67537d29e5b408a448b873c67ff4a.svg" /></p>

<h3 id="abstraction-and-context-of-spin-model">Abstraction and context of SPIN model</h3>

<p>To verify the code we convert it into an automation: a labeled transition
system. The labels (transitions) are the basic statements from C.
Each statement can be converted via an abstraction – which is encoded as a
lookup table. While analysing the code, SPIN doesn’t care how the C code runs,
but deal with the abstracted FSM and tokenized input. This is why we call it
a “model analyser.”</p>

<p>The context of a SPIN looks like this:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-f44bd3841c23d32cc5d46f28821bf434.svg" /></p>

<p>Note that the <em>environment model</em> is not that hard to define. You just need to
declare that how many outlets of a switch: switch-to-switch, telephone inputs,
the amount of switches…etc.</p>

<h3 id="the-linear-time-temporal-logic-formulae-ltl">The linear time temporal logic formulae (LTL)</h3>

<p>For example, a requirement statement<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<blockquote>
  <p>When the phone goes <em>offhook</em>, a <em>dialtone</em> should occur.</p>
</blockquote>

<p>It can be expressed in LTL:</p>

<pre><code>!( !offhook U (offhook /\ X [] (!dialtone /\ !onhook)) )
</code></pre>

<ul>
  <li>U $\bigcup$ is strong until</li>
  <li>X $\bigcirc$ is next</li>
  <li>[] $\Box$ is always<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
</ul>

<p>You can also express it in formal symbols:</p>

<script type="math/tex; mode=display">
    \neg\left(\neg offhook \bigcup 
    \left( offhook \wedge \bigcirc \;\Box \left(\neg dialtone \bigcirc \neg onhook
    \right)\right)\right)
</script>

<p>If the requirement changed:</p>

<blockquote>
  <p>Assume, an $event_i$ should be added in between <em>offhook</em> and <em>response</em></p>
</blockquote>

<p>In LTL:</p>

<pre><code>X((eventi /\ !onhook) U (eventi /\ !onhook))
</code></pre>

<p>In formal logic:</p>

<script type="math/tex; mode=display">
    \bigcirc \left(\left(event_i \wedge \neg onhook\right) \bigcup 
    \left(event_i \wedge \neg onhook\right)\right)
</script>

<p>Once we have every thing prepared, SPIN will analysis the context using the
$\omega-automation$ technique and find out in what situations will cause bugs.</p>

<h2 id="fast-verification">Fast verification</h2>

<p>Traditionally we uses breadth first search or depth first search to iterate the
execution model for finding bugs. Since the execution is a non-determinism
model, the possible paths are in exponential order thus will cause stack
overflow before we find bugs.</p>

<p>Holzmann introduced <a href="http://spinroot.com/swarm/index.html">swarm verification preparation script</a> that can
separate the problem into small pieces of jobs and can be executed in parallel.</p>

<blockquote>
  <p>Swarm generates a script that performs many small verification jobs in
parallel, that can increase the problem coverage for very large verification
problems by about an order of magnitude compared to standard bitstate
verification runs. It is meant to be used on models for which standard
verification with exhaustive, bitstate, hash-compaction etc. either runs out
of memory, or takes more time than is available (e.g., days or weeks). Swarm
uses parallelism and search diversification to reach its objectives.</p>
</blockquote>

<blockquote>
  <p>The user can use a configuration file to define how many processing cores are
available, how much memory can be used, and how much time is maximally
available, among a range of other optional parameter settings. Based on this
information, swarm generates the script that runs as many independent jobs as
possible in parallel, without exceeding any of the user-defined constraints.
Swarm can run jobs using local CPU cores or remote machines in a grid network.</p>
</blockquote>

<hr />

<p>Holzmann also showed us swarm’s performance on NASA/JDL’s code:</p>

<ul>
  <li>11 bugs reports (50% of total) after 1 seconds. Faster than compilation!</li>
  <li>10 seconds and 90% of bugs are found.</li>
</ul>

<p>That is truly amazing!</p>

<h2 id="conclusion">Conclusion:</h2>

<p>Human brains are not perfect. It is easy to convince ourselves something is true
even it isn’t. A verification system like SPIN is not a project in ivory towel.
Instead, it can reproduce critical bugs in zero-failure missions (like mission to
Mars) or serious business programs. </p>

<p>Distributed system is a really hard problem and it is playing a important role
in cloud computing and parallel systems. For now we have bunch of map reduce
frameworks and no-SQL databases, but sometimes they just fails. How do we use a
good algorithm to check the consistency of the data? How do we verify our model
is correct? With SPIN, we can now verify the code within seconds ,and no more bug
tracing at 3:00AM. :D</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>All the plots are generated by my <a href="http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin/">graphviz plugin</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>The example is referenced from <a href="http://www.sable.mcgill.ca/~ebodde/mcs/timeline.ppt">this slide</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Check <a href="http://spinroot.com/spin/Man/ltl.html">SPIN LTL reference</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress hacker news plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin/"/>
    <updated>2012-04-05T14:49:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin</id>
    <content type="html"><![CDATA[<h3 id="inspiration">Inspiration</h3>

<p>I found out that some cool blogs have a cute <em>hacker news like button</em> on each of its
posts. </p>

<p><img src="http://www.idryman.org/images/hn_like.png" /></p>

<p>The service is <a href="http://hnlike.com/">HN Like Button</a>, created by <a href="http://hacksandthoughts.posterous.com/">shashyal</a>.
To use it you can use the generator like so:</p>

<p><img src="http://www.idryman.org/images/gen_hn_like.png" /></p>

<p>However, we don’t want to do that every time, right? So I decided to write a
small Jekyll plugin to generate the button automatically. Hope you can enjoy it!</p>

<!-- more -->

<h3 id="the-hidden-api-of-hnlike">The hidden API of HNLike</h3>

<p>Well…not really. The generated html snippet looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;iframe</span> <span class="na">frameborder=</span><span class="s">&quot;no&quot;</span> <span class="na">scrolling=</span><span class="s">&quot;no&quot;</span> <span class="na">height=</span><span class="s">&quot;50px&quot;</span> <span class="na">width=</span><span class="s">&quot;350px&quot;</span>
</span><span class="line"> <span class="na">src=</span><span class="s">&quot;http://hnlike.com/upvote.php?link=http%3A%2F%2Fdryman.github.com%2Fblog%2F2012%2F04%2F04%2Fjekyll-graphviz-plugin%2F&amp;title=Jekyll%20Graphviz%20Plugin&quot;</span>
</span><span class="line"> <span class="nt">&gt;</span>iframes not supported by your browser<span class="nt">&lt;/iframe&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Observe that in the <code>src</code> after the <code>upvote.php?</code> there are only two
key valure pairs:</p>

<ol>
  <li><code>link=</code><strong>html link</strong></li>
  <li><code>&amp;title=</code><strong>title text</strong></li>
</ol>

<p>We just need to replace the <strong>html link</strong> and <strong>title text</strong> to our URL-escaped
string and it is done.</p>

<h3 id="integrate-with-jekyll">Integrate with Jekyll</h3>

<p>Jekyll/Octopress is designed to extend its functionality by users. For details
you can take a look at <a href="http://octopress.org/docs/theme/template/">Theming and Customization - Octopress</a>. Follow
the instructions, I simply added a new html snippet in <code>source/_includes/</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>hn_like.html </span><a href="https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html">link </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">{% if site.hn_like_button %}
</span><span class="line">  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">hn_like</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;iframe&#39;</span><span class="p">);</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">frameborder</span><span class="o">=</span><span class="s2">&quot;no&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">scrolling</span><span class="o">=</span><span class="s2">&quot;no&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="s2">&quot;28px&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;115px&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://hnlike.com/upvote.php?link=&quot;</span>
</span><span class="line">                    <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">location</span><span class="p">)</span>
</span><span class="line">                    <span class="o">+</span> <span class="s2">&quot;&amp;title=&quot;</span>
</span><span class="line">                    <span class="o">+</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="s2">&quot;{{ page.title }}&quot;</span><span class="p">);</span>
</span><span class="line">      <span class="nx">hn_like</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;iframes not supported by your browser&quot;</span><span class="p">;</span>
</span><span class="line">      <span class="kd">var</span> <span class="nx">twitter</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s2">&quot;twitter-share-button&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">      <span class="nx">twitter</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span>
</span><span class="line">        <span class="nx">hn_like</span><span class="p">,</span>
</span><span class="line">        <span class="nx">twitter</span>
</span><span class="line">      <span class="p">);</span>
</span><span class="line">    <span class="p">})();</span>
</span><span class="line">  <span class="nt">&lt;/script&gt;</span>
</span><span class="line">{% endif %}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I modified the height and width otherwise it will be too big. Also I use jekyll
liquid helpers instead of <code>document.title</code> to form title text. Finally I use the
<code>twitter-share-button</code> element to position where I should insert the button in.</p>

<h3 id="installation-steps">Installation steps</h3>

<ol>
  <li>
    <p>To extend the built in snippet, download <a href="https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html">hn_like.html</a> into your 
<code>source/_includes</code> directory</p>
  </li>
  <li>
    <p>Add one line  <code>{% include hn_like.html %}</code>  into <code>source/_includes/after_footer.html</code>.</p>
  </li>
  <li>
    <p>Add</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="c1"># hacker news like button</span>
</span><span class="line"><span class="l-Scalar-Plain">hn_like_button</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>into your <code>_config.yml</code>.</p>

<h2 id="edit">Edit:</h2>

<p>The vote won’t update immediately. It will show up until hacker news index the
post and can be reached via HN search API.</p>

<h2 id="edit-2012-04-07">Edit: 2012-04-07</h2>

<p>I changed my domain name and all HN/Twitter/FB/G+ counts reset to zero. So I
submit the post to HN again.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress graphviz plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin/"/>
    <updated>2012-04-04T17:37:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin</id>
    <content type="html"><![CDATA[<p>I created a graphviz plugin for Octopress/Jekyll today. For example:</p>

<pre><code>{% graphviz %}
digraph G {
  compound=true;
  subgraph cluster0 {
  a -&gt; b;
  a -&gt; c;
  b -&gt; d;
  c -&gt; d;
  }
  subgraph cluster1 {
  e -&gt; g;
  e -&gt; f;
  }
  b -&gt; f [lhead=cluster1];
  d -&gt; e;
  c -&gt; g [ltail=cluster0, lhead=cluster1];
  c -&gt; e [ltail=cluster0];
  d -&gt; h;
}
{% endgraphviz %}
</code></pre>

<p>will produce:</p>

<p><img src="http://www.idryman.org/images/graphviz/g-3feb8846aa4bb9767add244df8bed05a.svg" /></p>

<!-- more -->

<p>You can see how it works on real post:</p>

<ol>
  <li><a href="http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN/">Practical Software Verification Using SPIN</a></li>
  <li><a href="http://www.idryman.org/blog/2012/04/14/recursion-best-practices/">Recursion Best Practices</a></li>
</ol>

<hr />

<h3 id="installation">Installation:</h3>

<ol>
  <li>Download the file from <a href="https://github.com/dryman/dryman.github.com/blob/src/plugins/graphviz_block.rb">here</a>.</li>
  <li>Put it into your <code>my_octopress/plugin</code> folder.</li>
  <li>Add one line <code>source/images/graphviz</code> into your <code>.gitignore</code> file</li>
</ol>

<p>Remeber that you should have graphviz installed in your system. Else it will
raise an error.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (4)]]></title>
    <link href="http://www.idryman.org/blog/2012/04/01/persistent-red-black-tree-4/"/>
    <updated>2012-04-01T14:48:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/01/persistent-red-black-tree-4</id>
    <content type="html"><![CDATA[<h3 id="okasakis-purely-functional-red-black-tree">Okasaki’s purely functional red black tree</h3>

<p>The peristent red black tree in last post works ok, but the rotate functions and
color flip is not efficient for purely functional data sturctures.
In 1999, Okasaki introduced a new way to balance the insertion, and the function
only takes care of four unbalanced cases.</p>

<pre><code>Chris Okasaki,
"Red-Black Trees in a Functional Setting",
Journal of Functional Programming, 9(4),
pp471-477,
July 1999
</code></pre>

<p>The algorithm is easy to present in Haskell code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Okasaki&#8217;s red black tree insertion</span><a href="http://www.mew.org/~kazu/proj/red-black-tree/">Copied from Kazu Yamamoto&#8217;s website</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">data</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Leaf</span> <span class="o">|</span> <span class="kt">Fork</span> <span class="kt">Color</span> <span class="p">(</span><span class="kt">RBTree</span> <span class="n">a</span><span class="p">)</span> <span class="n">a</span> <span class="p">(</span><span class="kt">RBTree</span> <span class="n">a</span><span class="p">)</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Color</span> <span class="ow">=</span> <span class="kt">R</span> <span class="o">|</span> <span class="kt">B</span>
</span><span class="line">
</span><span class="line"><span class="nf">insert</span> <span class="ow">::</span> <span class="kt">Ord</span> <span class="n">a</span> <span class="ow">=&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">insert</span> <span class="n">a</span> <span class="n">b</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">B</span> <span class="n">d</span> <span class="n">e</span> <span class="n">f</span>
</span><span class="line">  <span class="kr">where</span>
</span><span class="line">    <span class="kt">Fork</span> <span class="kr">_</span> <span class="n">d</span> <span class="n">e</span> <span class="n">f</span> <span class="ow">=</span> <span class="n">ins</span> <span class="n">a</span> <span class="n">b</span>
</span><span class="line">    <span class="n">ins</span> <span class="n">x</span> <span class="kt">Leaf</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="kt">Leaf</span> <span class="n">x</span> <span class="kt">Leaf</span>
</span><span class="line">    <span class="n">ins</span> <span class="n">x</span> <span class="n">t</span><span class="o">@</span><span class="p">(</span><span class="kt">Fork</span> <span class="n">c</span> <span class="n">l</span> <span class="n">y</span> <span class="n">r</span><span class="p">)</span> <span class="ow">=</span> <span class="kr">case</span> <span class="n">compare</span> <span class="n">x</span> <span class="n">y</span> <span class="kr">of</span>
</span><span class="line">        <span class="kt">LT</span> <span class="ow">-&gt;</span> <span class="n">balanceL</span> <span class="n">c</span> <span class="p">(</span><span class="n">ins</span> <span class="n">x</span> <span class="n">l</span><span class="p">)</span> <span class="n">y</span> <span class="n">r</span>
</span><span class="line">        <span class="kt">GT</span> <span class="ow">-&gt;</span> <span class="n">balanceR</span> <span class="n">c</span> <span class="n">l</span> <span class="n">y</span> <span class="p">(</span><span class="n">ins</span> <span class="n">x</span> <span class="n">r</span><span class="p">)</span>
</span><span class="line">        <span class="kt">EQ</span> <span class="ow">-&gt;</span> <span class="n">t</span>
</span><span class="line">
</span><span class="line"><span class="nf">balanceL</span> <span class="ow">::</span> <span class="kt">Color</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="kt">B</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="n">c</span><span class="p">)</span> <span class="n">z</span> <span class="n">d</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="kt">B</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="n">c</span><span class="p">))</span> <span class="n">z</span> <span class="n">d</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceL</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>                           <span class="ow">=</span> <span class="kt">Fork</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>
</span><span class="line">
</span><span class="line"><span class="nf">balanceR</span> <span class="ow">::</span> <span class="kt">Color</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">RBTree</span> <span class="n">a</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">))</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">R</span> <span class="n">b</span> <span class="n">y</span> <span class="n">c</span><span class="p">)</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span> <span class="ow">=</span> <span class="kt">Fork</span> <span class="kt">R</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span><span class="p">)</span> <span class="n">y</span> <span class="p">(</span><span class="kt">Fork</span> <span class="kt">B</span> <span class="n">c</span> <span class="n">z</span> <span class="n">d</span><span class="p">)</span>
</span><span class="line"><span class="nf">balanceR</span> <span class="n">k</span> <span class="n">a</span> <span class="n">x</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Cool! This can be even reduced to only two cases in our <code>mtree-expand</code> and
<code>mtree-let</code> macro!</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">balance-o</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">z-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">z</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">y</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">balance-i</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="p">((</span><span class="nv">b</span> <span class="nv">z</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">y</span> <span class="nv">d</span><span class="p">))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">z</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">y-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">insert-oka</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">data</span><span class="p">)</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nv">insert-oka</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">                 <span class="p">(</span><span class="nv">root</span> <span class="p">(</span><span class="k">if</span> <span class="nv">dir</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>
</span><span class="line">            <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">is-red</span> <span class="nv">root</span><span class="p">)</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">                  <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">b</span> <span class="nv">dir</span><span class="p">)))</span> <span class="p">(</span><span class="nv">balance-o</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">                  <span class="p">((</span><span class="nb">and</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">b</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span> <span class="p">(</span><span class="nv">balance-i</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>
</span><span class="line">                  <span class="p">(</span><span class="no">T</span> <span class="nv">root</span><span class="p">))))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert</span> <span class="p">(</span><span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">setq</span> <span class="vg">*tree*</span> <span class="p">(</span><span class="nv">insert-oka</span> <span class="vg">*tree*</span> <span class="nv">data</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To test the running time:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">time</span> <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">i</span> <span class="nv">from</span> <span class="mi">1</span> <span class="nv">to</span> <span class="mi">1000000</span> <span class="nb">do</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="nv">i</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; The original algorithm using rotate-s and rotate-d</span>
</span><span class="line">  <span class="mf">19.796</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nc">real</span> <span class="nb">time</span>
</span><span class="line">  <span class="mf">18.570645</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nv">total</span> <span class="nv">run</span> <span class="nb">time</span> <span class="p">(</span><span class="mf">17.423563</span> <span class="nv">user,</span> <span class="mf">1.147082</span> <span class="nv">system</span><span class="p">)</span>
</span><span class="line">  <span class="nv">[</span> <span class="nv">Run</span> <span class="nv">times</span> <span class="nv">consist</span> <span class="nv">of</span> <span class="mf">3.043</span> <span class="nv">seconds</span> <span class="nv">GC</span> <span class="nv">time,</span> <span class="nb">and</span> <span class="mf">15.528</span> <span class="nv">seconds</span> <span class="nv">non-GC</span> <span class="nv">time.</span> <span class="nv">]</span>
</span><span class="line">  <span class="nv">93.81%</span> <span class="nv">CPU</span>
</span><span class="line">  <span class="mi">47</span><span class="o">,</span><span class="mi">299</span><span class="o">,</span><span class="mi">915</span><span class="o">,</span><span class="mi">377</span> <span class="nv">processor</span> <span class="nv">cycles</span>
</span><span class="line">  <span class="mi">6</span><span class="o">,</span><span class="mi">522</span><span class="o">,</span><span class="mi">724</span><span class="o">,</span><span class="mi">144</span> <span class="nv">bytes</span> <span class="nv">consed</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; The Okasaki&#39;s algorithm</span>
</span><span class="line">  <span class="mf">13.005</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nc">real</span> <span class="nb">time</span>
</span><span class="line">  <span class="mf">12.193227</span> <span class="nv">seconds</span> <span class="nv">of</span> <span class="nv">total</span> <span class="nv">run</span> <span class="nb">time</span> <span class="p">(</span><span class="mf">11.213534</span> <span class="nv">user,</span> <span class="mf">0.979693</span> <span class="nv">system</span><span class="p">)</span>
</span><span class="line">  <span class="nv">[</span> <span class="nv">Run</span> <span class="nv">times</span> <span class="nv">consist</span> <span class="nv">of</span> <span class="mf">2.513</span> <span class="nv">seconds</span> <span class="nv">GC</span> <span class="nv">time,</span> <span class="nb">and</span> <span class="mf">9.681</span> <span class="nv">seconds</span> <span class="nv">non-GC</span> <span class="nv">time.</span> <span class="nv">]</span>
</span><span class="line">  <span class="nv">93.76%</span> <span class="nv">CPU</span>
</span><span class="line">  <span class="mi">31</span><span class="o">,</span><span class="mi">073</span><span class="o">,</span><span class="mi">022</span><span class="o">,</span><span class="mi">018</span> <span class="nv">processor</span> <span class="nv">cycles</span>
</span><span class="line">  <span class="mi">4</span><span class="o">,</span><span class="mi">278</span><span class="o">,</span><span class="mi">336</span><span class="o">,</span><span class="mi">384</span> <span class="nv">bytes</span> <span class="nv">consed</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusions">Conclusions</h2>

<p>Lisp is designed for bottom-up programming. You first draft what you want to do,
then you can start to write some functions and macros to simplify it. When there
are more and more utilities you written, you can use it to experiment more
complicated algorithms, in a more elegant and self expressive style.</p>

<p>In purely functional structure, Haskell code  seems to be more elegant because
it has built in pattern matching, while we have to write one for Lisp. But Lisp
provides things more than functional programming, it can also be written in
procedure style, object-oriented style, or any other DSL that is best suitable
for your objective.</p>

<p>The macro system in lisp can also improve your thinking of designing a program.
Because you can always abstract your program structure as you writing it. In
other language you are trained to think top-down, while in lisp you are
encouraged to think back and forth. This process can shorten required time to
get enough experiences of programming. You don’t need a lot experiences to build
a complex algorithm in a bottom-up design process. It’s just come up naturally.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[persistent red black tree in lisp (3)]]></title>
    <link href="http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-3/"/>
    <updated>2012-03-31T16:33:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/31/persistent-red-black-tree-in-lisp-3</id>
    <content type="html"><![CDATA[<h2 id="red-black-tree-algorithms">Red black tree algorithms</h2>

<p>There are two good articles that have good explanation on red-black tree
algorithms. For your references:</p>

<ol>
  <li><a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx">Julienne Walker’s red black tree tutorial</a></li>
  <li><a href="http://www.mew.org/~kazu/proj/red-black-tree/">Kazu Yamamoto’s purely functional left-leaning red black trees</a></li>
</ol>

<p>Julienne wrote a beautiful review article that show us not only the algorithm of
red black tree, but <em>how it is designed like so</em>. He also implemented an elegant
C program that can balance the tree in bottom-up or top-down ways. My previous
function <code>(kid root dir dir)</code> was inspired from his implementation.</p>

<p>Kazu reorganized several red black tree insertion algorithms, including Chris
Okasaki’s purely functional way. He also introduced a left-leaning insertion
algorithm that reduces one pattern matching compare to Okasaki’s one. The
programs are elegantly written in Haskell.</p>

<!-- more -->

<h3 id="orinal-red-black-tree-algorithm">Orinal red black tree algorithm</h3>

<p>In 1979, Guibas and Sedgewick published the original imperative red black trees:</p>

<pre><code>Leo J. Guibas and Robert Sedgewick.
"A dichromatic framework for balanced trees",
In Proceedings of the 19th Annual Symposium on Computer Science,
pp8-21,
IEEE Computer Society,
1978
</code></pre>

<p>The original one has eight <em>unbalanced</em> cases to deal with, while two are
reduced in “Introduction to Algorithms”. The algorithm was derived from
symmetric binary B-tree (2-3-4 tree) which was suggested by Rudof Bayer. All
paths from the root to a leaf in a SBB-tree contains the same number of nodes,
thus make it a perfectly balanced tree. However, it is not a binary search tree.
So Rober Sedgewick and Leonidas Guibas came up with a mnemonic abstraction that
can use red-nodes and black-nodes of a binary tree to simulate SBB-Tree. This is
how the algorithm is formed. To know the details, see 
<a href="http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx">Julienne’s guide</a>.</p>

<p>Julienne modified the original bottom up algorithm to a no parent pointers
style:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Julienne&#8217;s red black tree insert implementation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_single</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dir</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">save</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">save</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">];</span>
</span><span class="line">  <span class="n">save</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1">// Note that there&#39;s color changing here!</span>
</span><span class="line">  <span class="n">save</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">save</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_double</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dir</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">],</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="n">dir</span> <span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="nf">jsw_insert_r</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_node</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="n">root</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
</span><span class="line">    <span class="n">root</span> <span class="o">=</span> <span class="n">make_node</span> <span class="p">(</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">data</span> <span class="o">!=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">&lt;</span> <span class="n">data</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="o">=</span> <span class="n">jsw_insert_r</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">],</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* Case 1 Color flip */</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">      <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/* Cases 2 &amp; 3 */</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">          <span class="n">root</span> <span class="o">=</span> <span class="n">jsw_single</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">is_red</span> <span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">link</span><span class="p">[</span><span class="o">!</span><span class="n">dir</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">          <span class="n">root</span> <span class="o">=</span> <span class="n">jsw_double</span> <span class="p">(</span> <span class="n">root</span><span class="p">,</span> <span class="o">!</span><span class="n">dir</span> <span class="p">);</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="n">root</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">jsw_insert</span> <span class="p">(</span> <span class="k">struct</span> <span class="n">jsw_tree</span> <span class="o">*</span><span class="n">tree</span><span class="p">,</span> <span class="kt">int</span> <span class="n">data</span> <span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span> <span class="o">=</span> <span class="n">jsw_insert_r</span> <span class="p">(</span> <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="p">,</span> <span class="n">data</span> <span class="p">);</span>
</span><span class="line">  <span class="n">tree</span><span class="o">-&gt;</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">red</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="implementation-in-lisp">Implementation in Lisp</h3>

<p>Julienne’s bottom-up algorithm can be easily to be re-written in purely
functional style. The ugly part is the color flipping and assign new branches to
nodes.</p>

<p>Though we can do the color flipping as</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">root</span><span class="p">))</span> <span class="no">nil</span>
</span><span class="line">      <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">a</span><span class="p">))</span> <span class="no">T</span>
</span><span class="line">      <span class="p">(</span><span class="nv">rb-red</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">b</span><span class="p">))</span> <span class="no">T</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but the tree would be non-persistent. So we need to create new node with new
property of red or black.</p>

<p>I also separate the cases into two function <code>color-flip</code> and
<code>rb-insert-case-rest</code>. Thus the code would be easier to debug and profile.</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">node</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">c</span><span class="p">)</span>
</span><span class="line">            <span class="p">((</span><span class="nv">x-r</span> <span class="p">(</span><span class="nv">to-r</span> <span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">)))</span>
</span><span class="line">            <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">y-b</span> <span class="p">(</span><span class="nv">b</span> <span class="nv">x-r</span> <span class="nv">c</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rotate-d</span> <span class="p">(</span><span class="nv">node</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">node</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">            <span class="p">((</span><span class="nv">a-new</span> <span class="p">(</span><span class="nv">rotate-s</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">))))</span>
</span><span class="line">            <span class="p">(</span><span class="nv">rotate-s</span> <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a-new</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">))</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Color flipping utilities </span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">to-r</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">:red</span> <span class="no">T</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">to-b</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">x</span><span class="p">)</span> <span class="ss">:red</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">color-flip</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z</span> <span class="nv">d</span><span class="p">))</span>
</span><span class="line">             <span class="p">((</span><span class="nv">x-r</span> <span class="p">(</span><span class="nv">to-r</span> <span class="nv">x</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nv">y-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">y</span><span class="p">))</span>
</span><span class="line">              <span class="p">(</span><span class="nv">z-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="nv">z</span><span class="p">)))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">((</span><span class="nv">a</span> <span class="nv">y-b</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">x-r</span> <span class="p">(</span><span class="nv">c</span> <span class="nv">z-b</span> <span class="nv">d</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert-case-rest</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span> <span class="nv">dir</span><span class="p">))</span> <span class="p">(</span><span class="nv">rotate-s</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">((</span><span class="nv">is-red</span> <span class="p">(</span><span class="nv">kid</span> <span class="nv">root</span> <span class="nv">dir</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span> <span class="p">(</span><span class="nv">rotate-d</span> <span class="nv">root</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">dir</span><span class="p">)))</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="nv">root</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert-r</span> <span class="p">(</span><span class="nv">root</span> <span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="nb">cond</span> <span class="p">((</span><span class="nb">null</span> <span class="nv">root</span><span class="p">)</span> <span class="o">`</span><span class="p">(</span><span class="no">nil</span> <span class="o">,</span><span class="p">(</span><span class="nv">make-rb</span> <span class="ss">:data</span> <span class="nv">data</span><span class="p">)</span> <span class="no">nil</span><span class="p">))</span>
</span><span class="line">        <span class="p">((</span><span class="nb">=</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))</span> <span class="nv">root</span><span class="p">)</span>
</span><span class="line">        <span class="p">(</span><span class="no">T</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">dir</span> <span class="p">(</span><span class="nb">&gt;</span> <span class="nv">data</span> <span class="p">(</span><span class="nv">node-data</span> <span class="nv">root</span><span class="p">))))</span>
</span><span class="line">             <span class="p">(</span><span class="nv">mtree-let</span> <span class="nv">dir</span> <span class="nv">root</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">               <span class="p">((</span><span class="nv">b</span> <span class="p">(</span><span class="nv">rb-insert-r</span> <span class="nv">b</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">                <span class="p">(</span><span class="nv">root</span> <span class="p">(</span><span class="nv">mtree-expand</span> <span class="nv">dir</span> <span class="p">(</span><span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">))))</span>
</span><span class="line">               <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">b</span><span class="p">)</span>
</span><span class="line">                 <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">is-red</span> <span class="nv">a</span><span class="p">)</span>
</span><span class="line">                   <span class="p">(</span><span class="nv">color-flip</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">)</span>            <span class="c1">; case 1</span>
</span><span class="line">                   <span class="p">(</span><span class="nv">rb-insert-case-rest</span> <span class="nv">root</span> <span class="nv">dir</span><span class="p">))</span>  <span class="c1">; case 2 and 3</span>
</span><span class="line">                 <span class="nv">root</span><span class="p">))))))</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*tree*</span> <span class="no">nil</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">rb-insert</span> <span class="p">(</span><span class="nv">data</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">fixnum</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nv">ret</span> <span class="p">(</span><span class="nv">rb-insert-r</span> <span class="vg">*tree*</span> <span class="nv">data</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">a</span> <span class="p">(</span><span class="nb">car</span> <span class="nv">ret</span><span class="p">))</span>            <span class="c1">;; Set the root node to be black</span>
</span><span class="line">         <span class="p">(</span><span class="nv">x-b</span> <span class="p">(</span><span class="nv">to-b</span> <span class="p">(</span><span class="nb">cadr</span> <span class="nv">ret</span><span class="p">)))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">b</span> <span class="p">(</span><span class="nb">caddr</span> <span class="nv">ret</span><span class="p">)))</span>
</span><span class="line">    <span class="p">(</span><span class="nb">setf</span> <span class="vg">*tree*</span> <span class="p">(</span><span class="nb">list</span> <span class="nv">a</span> <span class="nv">x-b</span> <span class="nv">b</span><span class="p">))</span>
</span><span class="line">    <span class="vg">*tree*</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When the cases in function are separated, it is easy to tell how the program is being called:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nb">trace</span> <span class="nv">rb-insert-r</span> <span class="nv">rb-insert-case-rest</span> <span class="nv">color-flip</span> <span class="nv">rotate-s</span> <span class="nv">rotate-d</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="p">(</span><span class="nv">RB-INSERT-R</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="mi">3</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="nv">RB-INSERT-R</span> <span class="nv">returned</span> <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="nv">CL-USER&gt;</span> <span class="p">(</span><span class="nv">rb-insert</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">  <span class="nv">0:</span> <span class="p">(</span><span class="nv">RB-INSERT-R</span> <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="mi">100</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">    <span class="nv">1:</span> <span class="p">(</span><span class="nv">RB-INSERT-CASE-REST</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">      <span class="nv">2:</span> <span class="p">(</span><span class="nv">ROTATE-S</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">7-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">8-r</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span> <span class="no">NIL</span><span class="p">)</span>
</span><span class="line">      <span class="nv">2:</span> <span class="nv">ROTATE-S</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">    <span class="nv">1:</span> <span class="nv">RB-INSERT-CASE-REST</span> <span class="nv">returned</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">))</span>
</span><span class="line">  <span class="nv">0:</span> <span class="nv">RB-INSERT-R</span> <span class="nv">returned</span>
</span><span class="line">       <span class="p">(((</span><span class="no">NIL</span> <span class="nv">3-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">5-b</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">6-b</span> <span class="p">((</span><span class="no">NIL</span> <span class="nv">7-r</span> <span class="no">NIL</span><span class="p">)</span> <span class="nv">8-b</span> <span class="p">(</span><span class="no">NIL</span> <span class="nv">100-r</span> <span class="no">NIL</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p>I modified the definition of <code>rb</code> structure to make it print prettier:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="nb">defstruct</span>
</span><span class="line">  <span class="p">(</span><span class="nv">rb</span> <span class="p">(</span><span class="ss">:print-function</span>
</span><span class="line">        <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">p</span> <span class="nv">s</span> <span class="nv">k</span><span class="p">)</span>
</span><span class="line">          <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">ignore</span> <span class="nv">k</span><span class="p">)(</span><span class="k">type</span> <span class="nc">stream</span> <span class="nv">s</span><span class="p">))</span>
</span><span class="line">          <span class="p">(</span><span class="nb">format</span> <span class="nv">s</span> <span class="s">&quot;~d-~:[b~;r~]&quot;</span> <span class="p">(</span><span class="nv">rb-data</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nv">rb-red</span> <span class="nv">p</span><span class="p">)))))</span>
</span><span class="line">  <span class="p">(</span><span class="nv">red</span> <span class="no">T</span> <span class="ss">:read-only</span> <span class="no">T</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">data</span> <span class="mi">0</span> <span class="ss">:type</span> <span class="kt">fixnum</span> <span class="ss">:read-only</span> <span class="no">T</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So that when <code>Lisp</code> want to print a <code>rb</code> with data is <code>8</code> and red is <code>nil</code>, it
would print <code>8-b</code> instead of <code>#S(RB :data 8 :red nil)</code>.</p>

]]></content>
  </entry>
  
</feed>
