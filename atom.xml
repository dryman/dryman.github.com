<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2017-07-05T09:13:52-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[learn hash table the hard way -- part 1: probe disributions]]></title>
    <link href="http://www.idryman.org/blog/2017/07/04/learn-hash-table-the-hard-way/"/>
    <updated>2017-07-04T13:05:00-07:00</updated>
    <id>http://www.idryman.org/blog/2017/07/04/learn-hash-table-the-hard-way</id>
    <content type="html"><![CDATA[<p>In the last 4 months I’ve been working on how to implement a good hash table
for <a href="https://github.com/dryman/opic">OPIC (Object Persistence in C)</a>. During the development, I made
a lot of experiments. Not only for getting better performance, but also knowing
deeper on what’s happening inside the hash table. Many of these findings are
very surprising and inspiring. Since my project is getting mature, I’d get
a pause and start writing a hash table deep dive series. There was a lot of
fun while discovering these properties. Hope you enjoy it as I do.</p>

<!--more-->

<p>Same disclaimer. I now work at google, and this project
(OPIC including the hash table implementation) is approved by google
<a href="https://opensource.google.com/docs/iarc/">Invention Assignment Review Committee</a> as my personal
project. The work is done only in my spare time on my own machine,
and does not use and/or reference any of the google internal resources.</p>

<h2 id="background">Background</h2>

<p>Hash table is one of the most commonly used data structure. Most standard
library use <a href="https://en.wikipedia.org/wiki/Hash_table#Separate_chaining">chaining</a> hash table, but there are more options in
the wild. In contrast to <a href="https://en.wikipedia.org/wiki/Hash_table#Separate_chaining">chaining</a>, <a href="https://en.wikipedia.org/wiki/Open_addressing">open addressing</a> does
not create a linked list on bucket with collision, it insert the item
to other bucket instead. By inserting the item to nearby bucket, open
addressing gains better cache locality and is proven to be faster in many
benchmarks. The action of searching through candidate buckets for insertion,
look up, or deletion is known as <em>probing</em>. There are many probing strategies:
<a href="https://en.wikipedia.org/wiki/Linear_probing">linear probing</a>, <a href="https://en.wikipedia.org/wiki/Quadratic_probing">quadratic probing</a>, <a href="https://en.wikipedia.org/wiki/Double_hashing">double hashing</a>, <a href="https://en.wikipedia.org/wiki/Hash_table#Robin_Hood_hashing">robin
hood hasing</a>, <a href="https://en.wikipedia.org/wiki/Hopscotch_hashing">hopscotch hashing</a>, and <a href="https://en.wikipedia.org/wiki/Cuckoo_hashing">cuckoo hashing</a>.
Our first post is to examine and analyze the probe distribution among these
strategies.</p>

<p>To write a good open addressing table, there are several factors to consider:
1. load: load is the number of bucket occupied over the bucket
   capacity. The higher the load, the better the memory utilization is.
   However, higher load also means the probability to have collision is higher.
2. probe numbers: the number of probes is the number of look up to reach the
   desired items. Regardless of cache efficiency, the lower the total probe
   count, the better the performance is.
3. CPU cache hit and page fault: we can count both the cache hit and page
fault analytically and from cpu counters. I’ll write such analysis in later
post.</p>

<h2 id="linear-probing-quadratic-probing-and-double-hashing">Linear probing, quadratic probing, and double hashing</h2>

<p>Linear probing can be represented as a hash function of a key and a
probe number $h(k, i) = (h(k) + i) \mod N$. Similarly, quadratic
probing is usually written as $h(k, i) = (h(k) + i^2) \mod N$.  Double
hashing is defined as $h(k, i) = (h1(k) + i \cdot h2(k)) \mod N$.</p>

<p>Quadratic probing is used by <a href="http://goog-sparsehash.sourceforge.net/doc/dense_hash_map.html">dense hash map</a>. In my knowledge
this is the fastest hash map with wide adoption. Dense hash map set
the default maximum load to be 50%. Its table capacity is bounded
to power of 2. Given a table size $2^n$, insert items $2^{n-1} + 1$,
you can trigger a table expansion, and now the load is 25%. We can
claim that if user only insert and query items, the table load is
always within 25% and 50% (the table may need to expand at least once).</p>

<p>I implemented a <a href="https://github.com/dryman/opic/blob/master/benchmark/robin_hood/generic_table.c">generic hash table</a> to simulate dense hash
map probing behaviors. Its performance is identical to dense hash
map. The major difference is I allow non power of 2 table size, see
<a href="http://www.idryman.org/blog/2017/05/03/writing-a-damn-fast-hash-table-with-tiny-memory-footprints/">my previous post</a> for why the performance does not degrade.</p>

<p>I setup the test with 1M inserted items. Each test differs in its load
(by adjusting the capacity) and probing strategies. Let’s first look
at linear probing, quadratic probing and double hashing under 30%, 40%,
and 50% load.</p>

<p><img src="http://www.idryman.org/images/low_load.png" alt="low load" /></p>

<p>This is a histogram of probe counts. The Y axis is log scale. One can
see that other than linear probing, most probes are below 15. Double
hashing gives us smallest probe counts, however each of the probe has
high probability trigger a cpu cache miss, therefore is slower in
practice.  Next, we look at these methods under high load.</p>

<p><img src="http://www.idryman.org/images/high_load.png" alt="high load" /></p>

<p>The probe distribution now have a very high variance. Linear probing,
among the other methods, has very bad variance under high load. Quadratic
probing is slightly better, but still have some probes higher than 100.
Double hashing still gives the best probe statistics. Below is the zoom
in for each probe strategies:</p>

<p><img src="http://www.idryman.org/images/lp_high_load.png" alt="linear probe high load" /></p>

<p><img src="http://www.idryman.org/images/qp_high_load.png" alt="quadratic probe high load" /></p>

<p><img src="http://www.idryman.org/images/dh_high_load.png" alt="double hashing high load" /></p>

<h2 id="robin-hood-hashing-for-the-rescue">Robin Hood Hashing for the rescue</h2>

<p>The robin hood hashing heuristic is simple and clever. When
a collision occur, compare the two items’ probing count, the one
with larger probing number stays and the other continue to probe.
Repeat until the probing item finds an empty spot. For more detailed
analysis checkout <a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">the original paper</a>.
Using this heuristic, we can reduce the variance dramatically.</p>

<p><img src="http://www.idryman.org/images/rhh_high_load.png" alt="robin hood high load" /></p>

<p>The linear probing now have the worst case not larger than 50,
quadratic probing has the worst case not larger than 10, and
double hashing has the worst case not larger than 5! Although
robin hood hashing adds some extra cost on insert and deletion,
but if your table is read heavy, it’s really suitable for the job.</p>

<h2 id="dive-deep-and-ask-why">Dive deep and ask why</h2>

<p>From engineering perspective, the statistics are sufficient to make
design decisions and move on to next steps (though, hopscotch and
cuckoo hashing was not tested). That what I did 3 months ago. However,
I could never stop asking why. How to explain the differences? Can
we model the distribution mathematically?</p>

<p>The analysis on linear probing can trace back to 1963 by Donald Knuth.
(It was an unpublished memo dated July 22, 1963. With annotation “My
first analysis of an algorithm, originally done during Summer 1962 in
Madison”). Later on the paper worth to read are:</p>

<ul>
  <li><a href="https://pdfs.semanticscholar.org/8a08/7f5d581f9992936c7c73269c52138a63a3c3.pdf">Svante Janson, 2003, INDIVIDUAL DISPLACEMENTS FOR LINEAR PROBING HASHING
WITH DIFFERENT INSERTION POLICIES</a></li>
  <li><a href="http://www.kurims.kyoto-u.ac.jp/EMIS/journals/DMTCS/pdfpapers/dmAD0127.pdf">Alfredo Viola, 2005, Distributional analysis of Robin Hood linear probing
 hashing with buckets</a></li>
  <li><a href="https://dmtcs.episciences.org/519/pdf">Alfredo Viola, 2010, Distributional Analysis of the Parking Problem and
 Robin Hood Linear Probing Hashing with Buckets</a></li>
</ul>

<p>Unfortunately, these research are super hard. Just linear probing (and its
robin hood variant) is very challenging. Due to my poor survey ability, I
yet to find a good reference to explain what causes linear probing, quadratic
probing and double hashing differ on the probe distribution. Though building
a full distribution model is hard, but creating a simpler one to convince myself
turns out is not too hard.</p>

<h2 id="rich-get-richer">Rich get richer</h2>

<p>The main reason why linear probing (and probably quadratic probing) gets high
probe counts is rich get richer: if you have a big chunk of elements, they
are more likely to get hit; when they get hit, the size of the chunk grows,
and it just get worse.</p>

<p>Let’s look at a simplified case. Say the hash table only have 5 items, and all
the items are in one consecutive block. What is the expected probing number for
the next inserted item?</p>

<p><img src="http://www.idryman.org/images/linear_probe_exp.png" alt="linear probe" /></p>

<p>See the linear probing example above. If the element get inserted to bucket 1,
it has to probe for 5 times to reach the first empty bucket. (Here we start the
probe sequence from index 0; probe number = 0 means you inserted to an empty
spot without collision). The expectation probing number for next inserted item
is</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\sum \mathrm{probe} \cdot p & = 5\cdot\frac{1}{N} +
4\cdot\frac{1}{N} + 3\cdot\frac{1}{N} + 2\cdot\frac{1}{N} +
1\cdot\frac{1}{N} + 0\cdot\frac{1}{N}(N-5) \\
& = \frac{5+4+3+2+1}{N} \\
& = \frac{15}{N}
\end{align}
 %]]&gt;</script>

<p>For quadratic probing, you’ll have to look at each of the item and track
where it first probe outside of the block.</p>

<p><img src="http://www.idryman.org/images/quadratic_probe_exp.png" alt="Quadratic probe" /></p>

<p>The expected probe number for next item in quadratic probing is
$\frac{3+2+2+2+1}{N} = \frac{10}{N}$. Double hashing is the easiest:
$1\cdot\frac{5}{N}+2\cdot(\frac{5}{N})^2+3\cdot(\frac{5}{N})^3+\cdots$
If we only look at the first order (because N » 5), then we can
simplify it to $\frac{5}{N}$.</p>

<ul>
  <li>Linear probing: $\frac{15}{N}$</li>
  <li>Quadratic probing: $\frac{10}{N}$</li>
  <li>Double hashing: $\sum_{i=1} i\cdot(\frac{5}{N})^i$</li>
</ul>

<p>The expected probe number of next item shows that linear probing is
worse than other method, but not by too far. Next, let’s look at
what is the probability for the block to <em>grow</em>.</p>

<p><img src="http://www.idryman.org/images/lp_grow.png" alt="linear grow" /></p>

<p><img src="http://www.idryman.org/images/qp_grow.png" alt="quadratic grow" /></p>

<p>To calculate the probability of the block to grow on next insert, we
have to account the two buckets which connected to the block. For linear
probing, the probability is $\frac{5+2}{N}$. For quadratic probing, we
add the connected block, but we also have to remove the buckets which
would jump out during the probe. For double hashing, the probability
to grow the block has little to do with the size of the block, because
you only need to care the case where it inserted to the 2 connected
buckets.</p>

<ul>
  <li>Linear probing: $\frac{7}{N}$</li>
  <li>Quadratic probing: $\frac{4}{N}$</li>
  <li>Double hashing: $\frac{2}{N}\cdot\sum_{i=0}(\frac{5}{N})^i =
\frac{2}{N}\cdot\frac{N}{N-5} = \frac{2}{N-5}$</li>
</ul>

<p>Using the same calculation, but making the block size as a variable,
we can now visualize the block growth of linear probing, quadratic
probing, and double hashing.</p>

<p><img src="http://www.idryman.org/images/block_grow.png" alt="block grow" /></p>

<p>This is not a very formal analysis. However, it gives us a sense of why
the rate of linear probing getting worse is way larger than the others.
Not only knowing which one is better than the other, but also knowing
how much their differences are.</p>

<p>How about the robin hood variant of these three probing methods?
Unfortunately, I wasn’t able to build a good model that can explain
the differences. A formal analysis on robin hood hashing using linear
probing were developed by <a href="http://www.kurims.kyoto-u.ac.jp/EMIS/journals/DMTCS/pdfpapers/dmAD0127.pdf">Viola</a>. I yet to find a good analysis
for applying robin hood on other probing method. If you find it, please
leave a comment!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Writing a (chaining) hash table to pass an interview is trivial, but writing
a good one turns out to be very hard. The key for writing high performance
software, is <em>stop guessing</em>.</p>

<p>Measure, measure, and measure. Program elapsed time is just one of the
sample point, and can be biased by many things. To understand the
program runtime performance, we need to further look at program
internal statistics (like probe distribution in this article), cpu
cache misses, memory usage, page fault count, etc. Capture the
information, and analyze it scientifically.  This is the only way to
push the program to its limit.</p>

<p>This my first article of “Learn hash table the hard way” series. In
the following post I’ll present more angles on examining hash table performance.
Hope you enjoy it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a memory allocator for fast serialization]]></title>
    <link href="http://www.idryman.org/blog/2017/06/28/opic-a-memory-allocator-for-fast-serialization/"/>
    <updated>2017-06-28T12:19:00-07:00</updated>
    <id>http://www.idryman.org/blog/2017/06/28/opic-a-memory-allocator-for-fast-serialization</id>
    <content type="html"><![CDATA[<p>In my last post, I briefly introduced OPIC (Object Persistance
in C), which is a general serialization framework that can
serialize any object without knowing its internal layout.
In this post, I’ll give a deeper dive on how it works.</p>

<!--more-->

<hr />

<p>Still with the same disclaimer. I now work at google, and this project
(OPIC including the hash table implementation) is approved by google
<a href="https://opensource.google.com/docs/iarc/">Invention Assignment Review Committee</a> as my personal
project. The work is done only in my spare time on my own machine,
and does not use and/or reference any of the google internal resources.</p>

<h2 id="rationale-key-value-store-performance">Rationale: key-value store performance</h2>

<p>Key-value data retrieval is probably <em>the</em> most commonly used abstraction
in computer engineering. It has many forms: NoSQL key value store, embedded
key value store, and in-memory data structures. In terms of algorithm
complexity, they are all having O(1) amortized insertion, deletion, and
query time complecity. However, the actual performance ranges from 2K QPS
(query per second) up to 200M QPS.</p>

<p>To make it easier to reason about, here I only compare read only performance.
Furthermore, it’s single node, single core. In this setup, the data store
should not have transaction or WAL (write ahead log) overhead; if table locking
was required, only the reader lock is needed; if the data was stored on disk,
the read only load should trigger the data store to cache it in memory, and
the overall amortized performance <em>theoratically</em> should be close to what
in-memory data structure can achieve.</p>

<p>The first tier of data stores we look at, are the full featured SQL/NoSQL
database which support replication over cluster of nodes. A report created
by engineers at University of Toronto is a good start:
<a href="http://vldb.org/pvldb/vol5/p1724_tilmannrabl_vldb2012.pdf">Solving Big Data Challenges for Enterprise Application Performance
Management</a>. In this report they compared Cassandra,
Voldemort, Redis, HBase, VoltDB, and MySQL. Unfortunately, their report
doesn’t have 100% read only performance comparison, only 95% read is
reported.</p>

<ul>
  <li>Cassandra: 25K QPS</li>
  <li>Voldemort: 12K QPS</li>
  <li>Redis: 50K QPS</li>
  <li>HBase: 2.5K QPS</li>
  <li>VoltDB: 40K QPS</li>
  <li>MySQL: 25K QPS</li>
</ul>

<p>Some report gives even worse performance numbers. In
<a href="https://jaxenter.com/evaluating-nosql-performance-which-database-is-right-for-your-data-107481.html">this nosql benchmark</a>, 100% read, Cassandra, HBase, and mongo
are all having throughput lower than 2K QPS.</p>

<p>The performance of the databases above may be biased by network,
database driver overhead, or other internal complexities. We now look
at the second tier, embedded databases: LMDB, LevelDB, RocksDB,
HyperLevelDB, KyotoCabinet, MDBM and BerkelyDB all falls into this
category. The comparison of first four databases can be found in
<a href="https://www.influxdata.com/benchmarking-leveldb-vs-rocksdb-vs-hyperleveldb-vs-lmdb-performance-for-influxdb/">this influxdb report</a>.</p>

<ul>
  <li>100M values (integer key)
    <ul>
      <li>LevelDB: 578K QPS</li>
      <li>RocksDB: 609K QPS</li>
      <li>HyperLevelDB: 120K QPS</li>
      <li>LMDB: 308K QPS</li>
    </ul>
  </li>
  <li>50M values (integer key)
    <ul>
      <li>LevelDB: 4.12M QPS</li>
      <li>RocksDB: 3.68M QPS</li>
      <li>HyperLevelDB: 2.08M QPS</li>
      <li>LMDB: 5.89M QPS</li>
    </ul>
  </li>
</ul>

<p>The performance report from <a href="https://yahooeng.tumblr.com/post/104861108931/mdbm-high-speed-database">MDBM benchmark</a> is also interesting. They
only provide the latency number though.</p>

<ul>
  <li>MDBM: 0.45 us, ~= 2M QPS (?)</li>
  <li>LevelDB: 5.3 us, ~= 0.18 QPS (?)</li>
  <li>KyotoCabinat: 4.9 us, ~= 0.20 QPS (?)</li>
  <li>BerkeleyDB: 8.4 US, ~= 0.12 QPS (?)</li>
</ul>

<p>I’m guessing the performance number can be very different when the
keys are different.  In <a href="http://www.lmdb.tech/bench/microbench/benchmark.html">this LMDB benchmark</a>, LevelDB
only achieves 0.13M QPS.  We can see huge difference in the following
in memory hash tables. I ran these benchmarks myself. The code is hosted
at <a href="https://github.com/dryman/hash_bench">hash_bench</a>.</p>

<ul>
  <li>key: std::string
    <ul>
      <li>std::unordered_map: 5.3M QPS</li>
      <li>sparse_hash_map: 4.4M QPS</li>
      <li>dense_hash_map: 9.0M QPS</li>
    </ul>
  </li>
  <li>key: int64
    <ul>
      <li>std::unordered_map: 106M QPS</li>
      <li>dense_hash_map: 220M QPS</li>
    </ul>
  </li>
</ul>

<p>This is the state of the art I have surveyed and experimented so far.
Clearly, the in memory data structure out performs all the other solutions.
There’s a big gap between the data store that can save to disk, versus
pure in-memory solutions. Can we fill the gap, and create a data store
with competitive performance to the best hash tables? This motivates me
to build OPIC (object persistence in C), where developer can focus on
writing fast in-memory data structures, and offload the serialization to
a general framework.</p>

<h2 id="rethink-serialization">Rethink serialization</h2>

<p>I like the clear definition in wikipedia that describes serialization:</p>

<blockquote>
  <p>serialization is the process of translating data structures or
object state into a format that can be stored (for example, in a
file or memory buffer) or transmitted (for example, across a network
connection link) and reconstructed later (possibly in a different
computer environment).</p>
</blockquote>

<p>In our case, we want to minimize this translation cost. The smaller
the translation cost, the faster the system can load the data.
Pushing this idea to extreme, what if the object have the same
representation in memory and on disk? This concept is not new.
Many modern serialization framework treats the serialized object
as an actual in memory object with accessors. <a href="https://developers.google.com/protocol-buffers/">Protobuf</a>
and <a href="https://thrift.apache.org">thrift</a> are two implementation for such idea. However,
neither protobuf nor thrift is capable to represent general
data structures like linked list, trees, or (large) hash tables. These
solutions lack of pointers; the only supported object relationship is
inline object or inline list of objects.</p>

<p>Why is pointer hard for serialization? If you simply copy the pointer
value for serialization, the address it pointed at would not be valid
after you restore it from disk. Most general serialization framework
would have to walk though all the related object user attempt to
serialize, copy all the objects, either inline the object or create
a special mapping of objects for cross references. In the current
state of the art, either you drop the support of pointer and get
minimized translation cost, or you pay high translation fee (walk
through objects) for general data structure serialization. How
can we do better?</p>

<p>Turns out, once you have a good way to represent the pointer value,
you gain the benefits of both solution: cheap serialization cost
and freedom to implement all types of data structures.</p>

<h2 id="key-idea-put-a-bound-on-pointer-addresses">Key idea: Put a bound on pointer addresses</h2>

<p>Pointers are hard to serialize because it can point to anywhere
in the full virtual memory space. The solution is pretty straight
forward, simply bound the objects into a heap space we control.</p>

<p><img src="http://www.idryman.org/images/OPIC_memory_layout.png" alt="opic memory" /></p>

<p>Having all objects bounded in one memory space, serialization is
simply dumping the shaded memory out, and de-serialization is mmap the
file back in memory.  What if the objects contain pointers? Instead of
using pointers, we use the <strong>offset to the mmap base address</strong> to
reference objects. When accessing objects, we add the base address
back to the offset to reconstruct the pointer. Since we only use
the offset <code>opref_t</code> to store the pointer, even if the whole mmap
got mapped to a different address, we can still access the object
by adding a different base address to the offset. If we can ensure
all the pointers within the block are stored as <code>opref_t</code>, the whole
block of memory can be dumped out without any translation!</p>

<p><img src="http://www.idryman.org/images/opref.png" alt="opic memory" /></p>

<h2 id="implementation-challenges">Implementation challenges</h2>

<p>Having zero translation (serialization/de-serialization) cost is very
attractive. However, building a POC took me a year (actually this is
the third version, but I omitted the details). Here are the challenges
I’ve found during the development.</p>

<ol>
  <li>
    <p>All objects need to be bounded in a memory chunk. Therefore I have
to write a full featured memory allocator. Writing a good one is very
time consuming.</p>
  </li>
  <li>
    <p>Programming languages with run-time pointers, like vtables, pointers
in existing containers, etc. cannot be used in this framework. All
containers (hash tables, balanced tress) need to be rebuilt from ground up.
C++, Rust, Go all have their run-time pointers and cannot be used. The only
language I can use is pure C. (This is why the project is named Object
Persistence in C).</p>
  </li>
  <li>
    <p>Serialized object cannot be transferred between architectures like
32bit/64bit, little endian or big endian. Depends on the use case, this
problem might be minor.</p>
  </li>
</ol>

<p>These constraints shapes OPIC. The core OPIC API is a memory manager
for allocating C objects. All the objects created by OPIC would be
bounded in the 64GB mmap space. The 64GB size were chosen to hold
enough objects, while user can load many OPIC mmap files in the same
process.</p>

<p>Using OPIC malloc is very identical to standard malloc, except user
need to specify an OPHeap object where the object would allocated in.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">OPHeap</span><span class="o">*</span> <span class="n">heap</span><span class="p">;</span>
</span><span class="line"><span class="c1">// Initialize a 64GB OPIC heap via mmap</span>
</span><span class="line"><span class="n">OPHeapNew</span><span class="p">(</span><span class="o">&amp;</span><span class="n">heap</span><span class="p">);</span>
</span><span class="line"><span class="c1">// pointer for accessing the object</span>
</span><span class="line"><span class="kt">int</span> <span class="o">*</span><span class="n">a_ptr</span> <span class="o">=</span> <span class="n">OPMalloc</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class="line"><span class="c1">// deallocate an object does not require specifying the heap</span>
</span><span class="line"><span class="n">OPDealloc</span><span class="p">(</span><span class="n">a_ptr</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What makes it different to regular malloc is, user can write the whole
heap to disk and restoring back via file handles.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="n">OPHeapWrite</span><span class="p">(</span><span class="n">OPHeap</span><span class="o">*</span> <span class="n">heap</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">stream</span><span class="p">);</span>
</span><span class="line"><span class="n">bool</span> <span class="n">OPHeapRead</span><span class="p">(</span><span class="n">OPHeap</span><span class="o">**</span> <span class="n">heap_ref</span><span class="p">,</span> <span class="kt">FILE</span><span class="o">*</span> <span class="n">stream</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make your data structure work, you must store your pointer as
<code>opref_t</code> instead of regular pointer. Converting a pointer to <code>opref_t</code>
and vise versa is similar, except when restoring <code>opref_t</code> back to
pointer user must specify which <code>OPHeap</code> its belongs to.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="c1">// Convert the pointer to a offset to the OPHeap base address</span>
</span><span class="line"><span class="c1">// The pointer must be a pointer created by OPHeap</span>
</span><span class="line"><span class="n">opref_t</span> <span class="n">a_ref</span> <span class="o">=</span> <span class="n">OPPtr2Ref</span><span class="p">(</span><span class="n">a_ptr</span><span class="p">);</span>
</span><span class="line"><span class="c1">// Add the offset a_ref with OPHeap base address to restore</span>
</span><span class="line"><span class="c1">// the pointer.</span>
</span><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">a_ptr</span> <span class="o">=</span> <span class="n">OPRef2Ptr</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="n">a_ref</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In regular programs, user keeps their own reference of the allocated
objects. However, in the OPIC case, user would lost track of the
objects they allocated after the heap is serialized. This problem
can be solved by saving the pointers to the <em>root pointer slot</em>
that OPIC provides. Each OPIC heap offers 8 root pointer slot.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @relates OPHeap</span>
</span><span class="line"><span class="cm"> * @brief Store a pointer to a root pointer slot in OPHeap.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @param heap OPHeap instance.</span>
</span><span class="line"><span class="cm"> * @param ptr the pointer we want to store in root pointer slot.</span>
</span><span class="line"><span class="cm"> * @param pos index in the root pointer slot. 0 &lt;= pos &lt; 8.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kt">void</span> <span class="n">OPHeapStorePtr</span><span class="p">(</span><span class="n">OPHeap</span><span class="o">*</span> <span class="n">heap</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @relates OPHeap</span>
</span><span class="line"><span class="cm"> * @brief Restore a pointer from specified root pointer slot.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @param heap OPHeap instance.</span>
</span><span class="line"><span class="cm"> * @param pos index in the root pointer slot. 0 &lt;= pos &lt; 8.</span>
</span><span class="line"><span class="cm"> * @return The pointer we stored in the root pointer slot.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kt">void</span><span class="o">*</span> <span class="n">OPHeapRestorePtr</span><span class="p">(</span><span class="n">OPHeap</span><span class="o">*</span> <span class="n">heap</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This API has been through many iterations. In the early version
it was a bunch of C macros for building serializable objects.
Fortunately it’s simplified and became more powerful and general
to build serializable applications. I believe it is now simple
enough and only require a little C/C++ programming skill to master.
Check out the <a href="http://opic.rocks/group__malloc.html">OPIC Malloc API</a>
for details</p>

<h2 id="performance">Performance</h2>

<p>OPIC can be used for general data serialization. The first data structure
I implemented is Robin Hood hash table – a hash map variant which has
good memory utilization without performance degradation. Memory utilization
affects how large the serialized file is, therefore is a one of the main
focus for writing OPIC containers. The details for keeping the memory footprint
small is in <a href="http://www.idryman.org/blog/2017/05/03/writing-a-damn-fast-hash-table-with-tiny-memory-footprints/">my previous post</a>.</p>

<p>The performance ends up super good: 9M QPS for in memory hash table.
For non-cached performance, I tested it by de-serializing on every
query. Every query would have to load the whole file back in memory
via mmap, then page fault to load the query entry. For this test I
got 2K QPS, which is 0.0005 second latency per load. Both cached
and non-cached performance are very promising, and perhaps is very
close to the upper bound for such application could perform.</p>

<h2 id="current-and-future-scope-of-opic">Current and future scope of OPIC</h2>

<p>Currently OPIC is implemented for building static data structures.
Build the data structure once, then make it immutable. User can
preprocess some data and store it with OPIC for later use. This
is the minimal viable use case I can think of for the initial release,
but OPIC can do more.</p>

<p>First of all, I want to make OPIC easier to access for more programmers.
Building high level application in pure C is time consuming, therefore
I’ll be writing language wrappers for C++, Python, R, and Java so that
more people can benefits the high speed serialization.</p>

<p>Second, I’ll make OPIC able to mutate after first serialization. High
level language user may treat OPIC as database of data structures
that one can compose. This kind of abstraction is different to
traditional database where program logic have to map to set of
records. I believe this will bring in more creative usage of new
types of applications.</p>

<p>Finally, I’d want to make OPIC to work on distributed applications.
I used to work on Hadoop and big data applications. I always wonder,
why people rarely talks about complexity and data structures in big
data world? Why there is no framework provide data structure abstraction
for big data? Isn’t the large the data size is, the more important
the complexity and data structure is? Building data structure for
super scale application, is the ultimate goal of OPIC.</p>

<p>Thank you for reading such a long post. If you also feel excited on
what OPIC might achieve, please post your comment. If you want to
contribute, that’s even better! The project page is at
<a href="https://github.com/dryman/opic">github</a>. Feel free to fork and extend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a damn fast hash table with tiny memory footprints]]></title>
    <link href="http://www.idryman.org/blog/2017/05/03/writing-a-damn-fast-hash-table-with-tiny-memory-footprints/"/>
    <updated>2017-05-03T18:26:00-07:00</updated>
    <id>http://www.idryman.org/blog/2017/05/03/writing-a-damn-fast-hash-table-with-tiny-memory-footprints</id>
    <content type="html"><![CDATA[<p>Hash table is probably <em>the</em> most commonly used data structure in
software industry. Most implementations focus on its speed instead
of memory usage, yet small memory footprint has significant impact
on large in-memory tables and database hash indexes.</p>

<p>In this post, I”ll provide a step by step guide for writing a modern
hash table that optimize for both speed and memory efficiency. I’ll
also give some mathematical bounds on how well the hash table could
achieve, and shows how close we are to the optimal.</p>

<!--more-->

<hr />

<p>Let me start with a disclaimer. I now work at google, and this project
(OPIC including the hash table implementation) is approved by google
<a href="https://opensource.google.com/docs/iarc/">Invention Assignment Review Committee</a> as my personal
project. The work is done only in my spare time with my own machine
and does not use and/or reference any of the google internal resources.</p>

<h2 id="common-hash-table-memory-usages">Common hash table memory usages</h2>

<p>As mentioned earlier, most hash hash table focus on its speed, not
memory usage. Consequently there’s not much benchmark compares the
memory these hash table implementation consumes. Here is a very basic
table for some high performance hash table I found. The input is 8 M
key-value pairs; size of each key is 6 bytes and size of each value is
8 bytes. The lower bound memory usage is $(6+8)\cdot 2^{23} =$ 117MB
. Memory overhead is computed as memory usage divided by the
theoretical lower bound. Currently I only collect 5 hash table
implementations. More to be added in future.</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: right">Memory Usage</th>
      <th style="text-align: right">　Memory Overhead</th>
      <th style="text-align: right">　Insertion Time</th>
      <th style="text-align: right">　Query Time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>std::unordered_map</td>
      <td style="text-align: right">588M</td>
      <td style="text-align: right">5.03x</td>
      <td style="text-align: right">2.626 sec</td>
      <td style="text-align: right">2.134 sec</td>
    </tr>
    <tr>
      <td>sparse_hash_map</td>
      <td style="text-align: right">494M</td>
      <td style="text-align: right">4.22x</td>
      <td style="text-align: right">7.393 sec</td>
      <td style="text-align: right">2.112 sec</td>
    </tr>
    <tr>
      <td>dense_hash_map</td>
      <td style="text-align: right">1280M</td>
      <td style="text-align: right">10.94x</td>
      <td style="text-align: right">1.455 sec</td>
      <td style="text-align: right">1.436 sec</td>
    </tr>
    <tr>
      <td>libcuckoo</td>
      <td style="text-align: right">708M</td>
      <td style="text-align: right">6.05x</td>
      <td style="text-align: right">2.026 sec</td>
      <td style="text-align: right">2.120 sec</td>
    </tr>
    <tr>
      <td>klib khash</td>
      <td style="text-align: right">642M</td>
      <td style="text-align: right">5.48x</td>
      <td style="text-align: right">4.232 sec</td>
      <td style="text-align: right">1.647 sec</td>
    </tr>
  </tbody>
</table>

<hr />

<p>The metrics above actually surprises me. For example,
[sparse hash map][shm] is advertised to use 4-10 bits per entry,
but the overhead is actually 4 times the lower bound. If the
hash table were implemented as large key-value store index, and
you have 1 TB of data, you’ll need at least 4-5TB of space to
hold the data. That’s not very space efficient. Can we do better?</p>

<h2 id="overview-of-hash-table-types">Overview of hash table types</h2>

<p>There’s two major types of hash table, one is <a href="https://en.wikipedia.org/wiki/Hash_table#Separate_chaining">chaining</a> and
the other is <a href="https://en.wikipedia.org/wiki/Open_addressing">open addressing</a>. Chaining is quite common
in most standard libraries, where the collision is handled by
appending items into a linked list headed by the bucket the key is
mapped to.  Open addressing uses a different mechanism to handle
collision: the key (and value) is inserted to another bucket if the
bucket it attempt to insert is already occupied.</p>

<p>Open addressing has some clear advantages over chaining. First, it
does not require extra memory allocation. This reduces memory allocation
overhead and can possibly improve cpu caching. Moreover, in open
addressing the developer has more control on memory layout – placing
elements in buckets with certain order to make probing (search on
alternative location for key) fast. Best of all, open addressing
gives us better memory lower bound over chaining.</p>

<p>The hash collision rate affects the chaining memory usage.  Given a
hash table with $N$ buckets, we insert $M$ elements into the
table. The expected collision number in the table is $M(1 - (1 -
1/N)^{M-1})$. For a table with 1000 buckets the expected collisions
under high loads ($M/N &gt; 80%$) are:</p>

<ul>
  <li>80% -&gt; 440</li>
  <li>90% -&gt; 534</li>
  <li>100% -&gt; 632</li>
</ul>

<p><img src="http://www.idryman.org/images/collision_rate.png" alt="collision" /></p>

<p>Accounting the extra payload that chaining requires, we can now compute
the lower bound for the overhead under different loads.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">load</th>
      <th style="text-align: right">　Chaining</th>
      <th style="text-align: right">　Open Addressing</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">100%</td>
      <td style="text-align: right">1.31x</td>
      <td style="text-align: right">1.00x</td>
    </tr>
    <tr>
      <td style="text-align: right">90%</td>
      <td style="text-align: right">1.37x</td>
      <td style="text-align: right">1.11x</td>
    </tr>
    <tr>
      <td style="text-align: right">80%</td>
      <td style="text-align: right">1.47x</td>
      <td style="text-align: right">1.25x</td>
    </tr>
    <tr>
      <td style="text-align: right">70%</td>
      <td style="text-align: right">1.60x</td>
      <td style="text-align: right">1.42x</td>
    </tr>
    <tr>
      <td style="text-align: right">50%</td>
      <td style="text-align: right">2.09x</td>
      <td style="text-align: right">2.00x</td>
    </tr>
    <tr>
      <td style="text-align: right">25%</td>
      <td style="text-align: right">4.03x</td>
      <td style="text-align: right">4.00x</td>
    </tr>
  </tbody>
</table>

<p>Here I assume if the collision rate were 60%, half of it is chained
and half of it fits the buckets. The actual number may have some
digits off, but it doesn’t change my conclusion on choosing open
addressing for hash table implementation.</p>

<h2 id="probing-methods">Probing methods</h2>

<p>In open addressing, hash collisions are resolved by probing, a search
through alternative buckets until the target record is found, or some
failure criteria is met. The following all belongs to some kinds of
probing strategies:</p>

<ul>
  <li>Linear Probing</li>
  <li>Quadratic Probing</li>
  <li>Double Hashing</li>
  <li>Hopscotch Hashing</li>
  <li>Robin Hood Hashing</li>
  <li>Cuckoo Hashing</li>
</ul>

<p>For each of the probing method, we’re interested in their worst case
and average case probing numbers, and is their space bound. </p>

<h3 id="linear-probing-and-quadratic-probing">Linear Probing and Quadratic Probing</h3>

<p>Linear probing can be represented as a hash function of a key and a
probe number $h(k, i) = (h(k) + i) \mod N$. Similarly, quadratic
probing is usually written as $h(k, i) = (h(k) + i^2) \mod N$. Both
methods has worst case probing count $O(N)$, and are bounded on
space usage. In other words, there no condition where we need to
increase the bucket count and rehash.</p>

<h3 id="double-hashing">Double hashing</h3>

<p>Double hashing can be written as
$h(k, i) = (h1(k) + i \cdot h2(k)) \mod N$.
Same as linear probing and quadratic probing, it has worst
case probing count $O(N)$, and is bounded on space usage.</p>

<h3 id="hopscotch-hashing">Hopscotch Hashing</h3>

<p>Here is the algorithm copied from <a href="https://en.wikipedia.org/wiki/Hopscotch_hashing">wikipedia</a>.
This is how the collision is handled</p>

<blockquote>
  <p>If the empty entry’s index j is within H-1 of entry i, place x
 there and return. Otherwise, find an item y whose hash value lies
 between i and j, but within H-1 of j. Displacing y to j creates a
 new empty slot closer to i. If no such item y exists, or if the
 bucket i already contains H items, resize and rehash the table.</p>
</blockquote>

<p>This mechanism has a good worst case probing number $O(H)$. However,
since it could resize the hash table, the hash table size is unbounded.</p>

<h3 id="robin-hood-hashing">Robin Hood Hashing</h3>

<p>The concept for robin hood hashing is simple and clever. When
a collision occur, compare the two items’ probing count, the one
with larger probing number stays and the other continue to probe.
Repeat until the probing item finds an empty spot. For more detailed
analysis checkout <a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">the original paper</a>. It’s worth to read.</p>

<p>The expected probing length is</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
E\lbrack i \rbrack & = \frac{n}{m}\left(\sum_{x=1}^n\frac{1}{x} -
\sum_{x=1}^{n-m}\frac{1}{x}\right) \\
& = \frac{n}{m}\left(H_n - H_{n-m} \right) \\
& \approx \frac{n}{m}\ln\left(\frac{1}{1-\frac{m}{n}}\right)
\end{align}
 %]]&gt;</script>

<p><img src="http://www.idryman.org/images/psl.png" alt="psl" /></p>

<p>Even under a high load, we still get very good probing numbers.
The best thing about robin hood hashing is it does not expand
the hash table, which is important because we want to build a
hash table with bounded size. This is the probing strategy I chose.</p>

<h3 id="cuckoo-hashing">Cuckoo hashing</h3>

<p>The following description is also copied from <a href="https://en.wikipedia.org/wiki/Cuckoo_hashing">wikipedia</a>.</p>

<blockquote>
  <p>It uses two or more hash functions, which means any key/value pair
could be in two or more locations. For lookup, the first hash
function is used; if the key/value is not found, then the second hash
function is used, and so on. If a collision happens during insertion,
then the key is re-hashed with the second hash function to map it to
another bucket.</p>
</blockquote>

<p>The expected probing number is below 2. However, the load factor has
to be below 50% to achieve good performance. For using 3 hash functions,
the load can increase to 91%. Combining linear/quadratic probing with
cuckoo, the load factor can go beyond 80%. (All numbers comes from
wikipedia).</p>

<h2 id="optimizing-division-for-hash-table-size">Optimizing Division for Hash Table Size</h2>

<p>I implemented a robin hood hashing prototype a month ago. The prototype
satisfy the low memory footprint, but hard to get it fast. The major
reason is the modulo operation is very slow on most platforms. For example,
on Intel Haswell the <code>div</code> instruction on 64bit integer can take 32-96
cycles. Almost all major hash implementation use power of 2 table size,
so that the modulo is just one bitwise and operation. The problem with
power of 2 table size is it scales too fast! If our data size is 1 bit
above 2GB, the table must be at least 4GB, giving us 50% load. Finding
a fast alternative modulo operation is critical for creating a table
with high load without loosing much performance.</p>

<p>Professor Lemire is probably the first person that addresses this issue.
He wrote a blog post that provides <a href="http://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/">a fast alternative to modulo</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint32_t</span> <span class="nf">reduce</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">x</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">N</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">((</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span> <span class="n">N</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span> <span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>He named this method as <em>fast range</em>. Another intuitive way to think
about it is <strong>scaling</strong>. Number $x$ ranges $\lbrack 0, 2^{32}-1\rbrack$,
multiplying it by $N$ then divide by $2^{32}$, the range becomes
$\lbrack 0, N-1\rbrack$.</p>

<p>There’s one big problem to apply <em>fast range</em> on probing. Probing
usually add the probe bias to <em>lower bits</em> of the hashed key. Modulo
and bitwise and preserves the lower bits information, but <em>fast range</em>
only use the <em>higher bits</em> and the probe would have no effect on the
output. The first bits where it can bias the output in <em>fast range</em> is
$\frac{2^{32}}{N}$. Hence, writing a linear probing using <em>fast range</em>
would be:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint32_t</span> <span class="nf">fast_range_probing</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">hashed_key</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">probe</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">N</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="k">return</span> <span class="p">((</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">hashe_key</span> <span class="o">+</span> <span class="p">((</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">probe</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">)</span><span class="o">/</span><span class="n">N</span><span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="o">&gt;&gt;</span> <span class="mi">32</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To make the output correct we used division again, which makes it slow.
Is there a better way?</p>

<h3 id="fast-mod-and-scale">Fast mod and scale</h3>

<p>I created an alternative method with a more relaxed condition.
Instead of finding a fast modulo replacement for <strong>all N</strong>, I want to
find <strong>some N</strong> that satisfy fast modulo and can preserve the biases
of probing.</p>

<p>The actual algorithm is pretty simple: First, mask the hashed key to
the next power of 2 boundary, then multiply it by
$\frac{N}{16}, N=8..15$. This is a combination of traditional power
of 2 modulo and professor Lemire’s scaling method. The difference is
now the scale can only get up to 2 times. In other words, only the least
significant bit will get omitted when scaling. The probing
implementation can be written as:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">static</span> <span class="kr">inline</span> <span class="kt">uintptr_t</span>
</span><span class="line"><span class="nf">hash_with_probe</span><span class="p">(</span><span class="n">RobinHoodHash</span><span class="o">*</span> <span class="n">rhh</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">probe</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">  <span class="kt">uintptr_t</span> <span class="n">mask</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">64</span> <span class="o">-</span> <span class="n">rhh</span><span class="o">-&gt;</span><span class="n">capacity_clz</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// linear probing</span>
</span><span class="line">  <span class="c1">// uint64_t probed_hash = key + probe * 2;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// quadratic probing</span>
</span><span class="line">  <span class="kt">uint64_t</span> <span class="n">probed_hash</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="n">probe</span> <span class="o">*</span> <span class="n">probe</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Fast mod and scale</span>
</span><span class="line">  <span class="k">return</span> <span class="p">(</span><span class="n">probed_hash</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="p">)</span> <span class="o">*</span> <span class="n">rhh</span><span class="o">-&gt;</span><span class="n">capacity_ms4b</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is <a href="https://github.com/dryman/opic/blob/master/opic/hash/robin_hood.c#L155">the straight copy</a> of my robin hood hash
implementation.  When the probe is scaled by 2 it is guaranteed to
have biases on the output. The mask can be derived from leading zeros
of the capacity <code>capacity_clz</code>, the scale is defined by the most
significant 4 bits of the capacity <code>capacity_ms4b</code>. The <code>capacity_ms4b</code>
is pre-computed on hash table creation or resizing time. It’s a round
up of desired capacity with finer granularity compare to power of 2
tables.</p>

<p>I used <a href="https://software.intel.com/en-us/articles/intel-architecture-code-analyzer">Intel Architecture Code Analyzer</a> to analyze the instruction
throughput of my methods, and the result is very satisfying:</p>

<ul>
  <li>Power of 2 table with quadratic probing
    <ul>
      <li>Block Throughput: 4.10 Cycles</li>
      <li>Total Num Of Uops: 9</li>
    </ul>
  </li>
  <li>Fast mod and scale with quadratic probing
    <ul>
      <li>Block Throughput: 4.15 Cycles</li>
      <li>Total Num Of Uops: 12</li>
    </ul>
  </li>
</ul>

<h2 id="benchmarks">Benchmarks</h2>

<p>I hope all these analysis didn’t bored you all! Turns out these analysis
are all useful. We now have a hash table with very optimal memory usage
but still having great performance.</p>

<p><img src="http://www.idryman.org/images/short_key_mem.png" alt="Memory usage" /></p>

<p><img src="http://www.idryman.org/images/short_key_insert_time.png" alt="Insert time" /></p>

<p><img src="http://www.idryman.org/images/short_key_lookup_time.png" alt="Lookup time" /></p>

<p>The most impressive part is the memory usage. Under load 89% we
achieve overhead 1.20x ~ 1.50x. The ideal overhead should be 1.12 but
we have an extra byte used per bucket to determine whether the bucket
is emptied or tumbstoned.</p>

<p>The insertion time is not as good as <code>dense_hash_map</code> under high load.
The reason is robin hood hashing moves the buckets around during the
insert, but <code>dense_hash_map</code> simply probe and insert it to an empty
bucket if found.</p>

<p>Luckily, robin hood hashing gets a faster lookup time compare to
<code>dense_hash_map</code>. I think the major reason is robin hood hashing
results a great expected probing number, and the overall throughput
benefits from it.</p>

<p>The benchmark code is available at <a href="https://github.com/dryman/hash_bench">hash_bench</a>. My robin hood
hashing implementation is available at <a href="http://opic.rocks/struct_robin_hood_hash%E3%80%80.html">opic robin hood hashing</a>.</p>

<h2 id="summary">Summary</h2>

<p>Hash table implementations has been focused on its speed over memory
usages. Turns out we can sacrifice some insertion time to gain way
better memory utilization, and also improve the look up time. I believe
this can be the new state of the art implementation for hash tables.
Let me know what you think in the comments. :)</p>

<p>Many details were omitted in this post, but will be discussed on my
next post. Some outlines for the things I’d like to cover would be</p>

<ul>
  <li>Probe distributions under different probing strategies (linear probing, quadratic probing, double hashing, and some probing methods I created).</li>
  <li>Optimize probing by using gcc/clang vector extensions</li>
  <li>Deletion mechanisms, its performance, and how it affects probe distributions.</li>
  <li>Serialization and deserialization performance</li>
  <li>Performance with different popular hash functions</li>
  <li>Benchmark with other robin hood implementations</li>
  <li>Benchmark with other embedded key-value store.</li>
</ul>

<p>I may not be able to cover all the above in my next post, so please
put down your comment and let me know what do you want to read the most.</p>

<h2 id="one-more-thing">One more thing…</h2>

<p>This robin hood hashing is implemented using my project
<a href="https://github.com/dryman/opic">Object Persistence In C (OPIC)</a>. OPIC is a new general serialization
framework I just released. Any in-memory object created with OPIC can
be serialized without knowing how it was structured. Deserializing
objects from OPIC only requires one mmap syscall. That’s say, this
robin hood implementation can work not only in a living process, the
data it stored can be used as a key-value store after the process exits.</p>

<p>Right now, the throughput of OPIC robin hood hash map on small keys (6bytes)
is 9M (1048576/0.115454). This is way better than most
<a href="http://www.datastax.com/nosql-databases/benchmarks-cassandra-vs-mongodb-vs-hbase">NoSQL key-value stores</a>. The difference might come from
write ahead logs or some other IO? I’m not sure why the performance
gain is so huge. My next stop is to benchmark against other embedded
key-value store like rocksdb, leveldb and so forth.</p>

<h2 id="references">References</h2>

<p>If you’d like to know more about robin hood hashing, here are some
posts worth to read:</p>

<ul>
  <li>
    <p><a href="https://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/">Robin Hood Hashing should be your default Hash Table implementation</a></p>
  </li>
  <li>
    <p><a href="http://codecapsule.com/2013/11/17/robin-hood-hashing-backward-shift-deletion/">Robin Hood hashing: backward shift deletion</a></p>
  </li>
  <li>
    <p><a href="https://probablydance.com/2017/02/26/i-wrote-the-fastest-hashtable/">I Wrote The Fastest Hashtable</a></p>
  </li>
  <li>
    <p>[Unfinished draft of linearly probed robin hood hashing][https://pubby8.wordpress.com/2017/05/08/an-unfinished-draft-of-linearly-probed-robin-hood-hash-tables/?iframe=true&amp;theme_preview=true]</p>
  </li>
  <li>
    <p><a href="https://cs.uwaterloo.ca/research/tr/1986/CS-86-14.pdf">Original paper of robin hood hashing</a></p>
  </li>
</ul>

<h2 id="edits">Edits</h2>

<h4 id="section">5/7/17</h4>

<p>As people pointed out in hacker news and comment below, C++
<code>std::string</code> has 24 bytes overhead on small strings, so the memory
comparison is not fair.  I’ll conduct another set of benchmarks using
integers tonight.</p>

<p>Also, one of the author of libcuckoo (@dga) pointed out that libcuckoo
would perform better if I use thread-unsafe version. I’ll also update
the benchmark with this new setup.</p>

<p>The short string problem brings up a question: what is the best
practice to use C++ hash map with short strings? Isn’t this a common
use case in daily programming? I tried to do some quick search but
didn’t find any useful information, and I’m suck at C++…
Any good idea on how to do this better?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-3]]></title>
    <link href="http://www.idryman.org/blog/2016/03/15/autoconf-tutorial-part-3/"/>
    <updated>2016-03-15T10:02:00-07:00</updated>
    <id>http://www.idryman.org/blog/2016/03/15/autoconf-tutorial-part-3</id>
    <content type="html"><![CDATA[<p>In this post I’ll show an example of how to write a cross-plaform OpenGL
program. We’ll explore more autoconf features, including <code>config.h</code>, third party
libraries, and many more.</p>

<!-- more -->

<h2 id="cross-plaform-opengl">Cross plaform OpenGL</h2>

<p>Although OpenGL API is basically the same on all platforms, their headers and
linking options are very different on different plaforms! To use OpenGL on OSX,
you must include <code>&lt;OpenGL/gl.h&gt;</code>, however on other platform you have to use
<code>&lt;GL/gl.h&gt;</code>. Sometimes you might have multiple possible OpenGL implementation on
the same platform. If you search for OpenGL tutorials, most of it can only built
on one platform.</p>

<p>And that where autoconf comes to play its role. I recently submit a new version
of <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL</a>, that can address these complicated portability issues.</p>

<p>Check out the three OpenGL checking macros: <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL</a>,
<a href="http://www.gnu.org/software/autoconf-archive/ax_check_glu.html">AX_CHECK_GLU</a>, and <a href="http://www.gnu.org/software/autoconf-archive/ax_check_glut.html">AX_CHECK_GLUT</a> on autoconf archive. The syntax
is very easy.</p>

<ul>
  <li><code>AX_CHECK_GL([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
  <li><code>AX_CHECK_GLU([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
  <li><code>AX_CHECK_GLUT([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
</ul>

<p>However, it doesn’t come with the default autoconf package, you need to include
the third party <a href="http://www.gnu.org/software/autoconf-archive/">autoconf archive</a> in your build script. Here’s how to
do it.</p>

<h2 id="adding-extra-macros">Adding Extra Macros</h2>

<p>First, install third party macros by git submodule. Alternatively you can just
copy the macros you need, but be sure to include all the dependent macro it uses. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git submodule add git@github.com:peti/autoconf-archive.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Next, in your <code>configure.ac</code> add the following line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># before invoking AM_INIT_AUTOMAKE</span>
</span><span class="line">AC_CONFIG_MACRO_DIR<span class="o">([</span>autoconf-archive/m4<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After these two steps you are free to invoke 500+ macros in the archive package.</p>

<h2 id="c-preprocessor-macros">C Preprocessor macros</h2>

<p>Just adding the macro is not enough. You also have to pass the C preprocessor
macros to your C program. To do so, add another line to your <code>configure.ac</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">AC_CONFIG_HEADERS<span class="o">([</span>config.h<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And now in your C program you can write the following to make it portable on all
systems. The listing is availabe in the <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL document</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp"># include &quot;config.h&quot;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#if defined(HAVE_WINDOWS_H) &amp;&amp; defined(_WIN32)</span>
</span><span class="line"><span class="cp"># include &lt;windows.h&gt;</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line"><span class="cp">#ifdef HAVE_GL_GL_H</span>
</span><span class="line"><span class="cp"># include &lt;GL/gl.h&gt;</span>
</span><span class="line"><span class="cp">#elif defined(HAVE_OPENGL_GL_H)</span>
</span><span class="line"><span class="cp"># include &lt;OpenGL/gl.h&gt;</span>
</span><span class="line"><span class="cp">#else</span>
</span><span class="line"><span class="cp"># error no gl.h</span>
</span><span class="line"><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="wrapping-it-up">Wrapping it up</h2>

<p>The full working example can be <a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-3">downloaded from here</a>. Here is the
listing of each code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>configure.ac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">AC_INIT<span class="o">([</span>gl-example<span class="o">]</span>, <span class="o">[</span>1.0<span class="o">])</span>
</span><span class="line">
</span><span class="line">AC_CONFIG_SRCDIR<span class="o">([</span>gl-example.c<span class="o">])</span>
</span><span class="line">AC_CONFIG_AUX_DIR<span class="o">([</span>build-aux<span class="o">])</span>
</span><span class="line">AC_CONFIG_MACRO_DIR<span class="o">([</span>autoconf-archive/m4<span class="o">])</span>
</span><span class="line">AM_INIT_AUTOMAKE<span class="o">([</span>-Wall -Werror foreign<span class="o">])</span>
</span><span class="line">
</span><span class="line">AC_PROG_CC
</span><span class="line">
</span><span class="line">AX_CHECK_GL
</span><span class="line">AX_CHECK_GLUT
</span><span class="line">
</span><span class="line"><span class="c"># For glew you can simply use</span>
</span><span class="line"><span class="c"># AC_CHECK_LIB([GLEW], [glewInit])</span>
</span><span class="line">
</span><span class="line">AC_CONFIG_HEADERS<span class="o">([</span>config.h<span class="o">])</span>
</span><span class="line">AC_CONFIG_FILES<span class="o">([</span>Makefile<span class="o">])</span>
</span><span class="line">
</span><span class="line">AC_OUTPUT
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The default rule for <code>gl_example_SOURCES</code> is to look at the c program with the
same name, thus can be omitted.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Makefile.am</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="nv">bin_PROGRAMS</span> <span class="o">=</span> gl-example
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gl-example.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &quot;config.h&quot;</span>
</span><span class="line"><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class="line"><span class="cp"># if HAVE_WINDOWS_H &amp;&amp; defined(_WIN32)</span>
</span><span class="line">  <span class="cp">#include &lt;windows.h&gt;</span>
</span><span class="line"><span class="cp"># endif</span>
</span><span class="line">
</span><span class="line"><span class="cp">#ifdef HAVE_GL_GL_H</span>
</span><span class="line"><span class="cp"># include &lt;GL/gl.h&gt;</span>
</span><span class="line"><span class="cp">#elif defined(HAVE_OPENGL_GL_H)</span>
</span><span class="line"><span class="cp"># include &lt;OpenGL/gl.h&gt;</span>
</span><span class="line"><span class="cp">#else</span>
</span><span class="line"><span class="cp"># error no gl.h</span>
</span><span class="line"><span class="cp">#endif</span>
</span><span class="line">
</span><span class="line"><span class="cp"># if defined(HAVE_GL_GLUT_H)</span>
</span><span class="line"><span class="cp">#  include &lt;GL/glut.h&gt;</span>
</span><span class="line"><span class="cp"># elif defined(HAVE_GLUT_GLUT_H)</span>
</span><span class="line"><span class="cp">#  include &lt;GLUT/glut.h&gt;</span>
</span><span class="line"><span class="cp"># else</span>
</span><span class="line"><span class="cp">#  error no glut.h</span>
</span><span class="line"><span class="cp"># endif</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">void</span> <span class="n">render</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">glutInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class="line">  <span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_RGB</span> <span class="o">|</span> <span class="n">GLUT_DOUBLE</span><span class="p">);</span>
</span><span class="line">  <span class="n">glutInitWindowSize</span><span class="p">(</span><span class="mi">640</span><span class="p">,</span> <span class="mi">640</span><span class="p">);</span>
</span><span class="line">  <span class="n">glutInitWindowPosition</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
</span><span class="line">  <span class="n">glutCreateWindow</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="n">glutDisplayFunc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">render</span><span class="p">);</span>
</span><span class="line">  <span class="n">glClearColor</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">glutMainLoop</span><span class="p">();</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="nf">render</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span> <span class="o">|</span> <span class="n">GL_DEPTH_BUFFER_BIT</span><span class="p">);</span>
</span><span class="line">  <span class="n">glMatrixMode</span><span class="p">(</span><span class="n">GL_MODELVIEW</span><span class="p">);</span>
</span><span class="line">  <span class="n">glLoadIdentity</span><span class="p">();</span>
</span><span class="line">  <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">);</span>
</span><span class="line">  <span class="n">glVertex3f</span><span class="p">(</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class="line">  <span class="n">glVertex3f</span><span class="p">(</span> <span class="mf">0.5f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class="line">  <span class="n">glVertex3f</span><span class="p">(</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">);</span>
</span><span class="line">  <span class="n">glEnd</span><span class="p">();</span>
</span><span class="line">  <span class="n">glutSwapBuffers</span><span class="p">();</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Try out the configure options by invoking <code>./configure --help</code>. You’ll find it
provides rich options that is familiar to power users.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./configure --help
</span><span class="line"><span class="sb">`</span>configure<span class="s1">&#39; configures gl-example 1.0 to adapt to many kinds of systems.</span>
</span><span class="line">
</span><span class="line"><span class="s1">Usage: ./configure [OPTION]... [VAR=VALUE]...</span>
</span><span class="line"><span class="s1">...</span>
</span><span class="line"><span class="s1">Optional Packages:</span>
</span><span class="line"><span class="s1">  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span>
</span><span class="line"><span class="s1">  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span>
</span><span class="line"><span class="s1">  --with-xquartz-gl[=DIR] On Mac OSX, use opengl provided by X11/XQuartz</span>
</span><span class="line"><span class="s1">                          instead of the built-in framework. If enabled, the</span>
</span><span class="line"><span class="s1">                          default location is [DIR=/opt/X11]. This option is</span>
</span><span class="line"><span class="s1">                          default to false.</span>
</span><span class="line"><span class="s1">...</span>
</span><span class="line"><span class="s1">  PKG_CONFIG  path to pkg-config utility</span>
</span><span class="line"><span class="s1">  PKG_CONFIG_PATH</span>
</span><span class="line"><span class="s1">              directories to add to pkg-config&#39;</span>s search path
</span><span class="line">  PKG_CONFIG_LIBDIR
</span><span class="line">              path overriding pkg-config<span class="err">&#39;</span>s built-in search path
</span><span class="line">  GL_CFLAGS   C compiler flags <span class="k">for </span>GL, overriding configure script defaults
</span><span class="line">  GL_LIBS     Linker flags <span class="k">for </span>GL, overriding configure script defaults
</span><span class="line">  CPP         C preprocessor
</span><span class="line">  GLUT_CFLAGS C compiler flags <span class="k">for </span>GLUT, overriding configure script defaults
</span><span class="line">  GLUT_LIBS   Linker flags <span class="k">for </span>GLUT, overriding configure script defaults
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So far I haven’t seen other build system that can do OpenGL cross platform
setup. (I only searched for CMake and Scons). Though autoconf is said to be
harder to learn, but by learning through these three articles, now the
syntax shouldn’t be that alien anymore, right?</p>

<p>In the next post, I’ll give another example of how to build a library, with unit
tests and debugger setup.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-2]]></title>
    <link href="http://www.idryman.org/blog/2016/03/14/autoconf-tutorial-2/"/>
    <updated>2016-03-14T16:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2016/03/14/autoconf-tutorial-2</id>
    <content type="html"><![CDATA[<p>This is the second post of the autoconf tutorial series. In this post I’ll cover
some fundamental units in autoconf and automake, and an example cross platform
X11 program that uses the concepts in this post. After reading this post, you
should be able to write your own build script for small scope projects.</p>

<!-- more -->

<h2 id="autoconf">Autoconf</h2>

<p>Autoconf is part of the GNU Autotools build system. Autotools is a collection of
three main packages: autoconf, automake, and libtools. Each of the package has
smaller sub-packages including autoheader, aclocal, autoscan etc. I won’t cover
the details of all the packages; instead I’ll only focus on how autoconf plays
its role in the build chain.</p>

<p>Autoconf is mainly used to generate the <code>configure</code> script.  <code>configure</code> is a
<strong>shell script</strong> that detects the build environment, and output proper build
flags to the Makefile, and preprocessor macros (like <code>HAVE_ALLOCA_H</code>) to
<code>config.h</code>. However, writing a good portable, extensible shell script isn’t
easy. This is where the <a href="http://www.gnu.org/software/m4/m4.html">gnu m4 macro</a> comes in. <a href="http://www.gnu.org/software/m4/m4.html">Gnu m4 macro</a> is an
implementation of the traditional UNIX macro processor. By using m4, you can
easily create portable shell script, include different pre-defined macros, and
define your own extensions easily.</p>

<p>In short, autoconf syntax is shell script wrapped by <a href="http://www.gnu.org/software/m4/m4.html">gnu m4 macro</a>.</p>

<p>In the early days, writing portable shell scripts wasn’t that easy. For example
not all the <code>mkdir</code> support <code>-p</code> option, not all the shells are bash
compatible, etc. Using the m4 macro to perform the regular shell logics, like
<code>AS_IF</code> instead if <code>if [[ ]]; then...</code>, <code>AS_MKDIR_P</code> instead of <code>mkdir -p</code>,
<code>AS_CASE</code> instead of <code>case ... esac</code> makes your configure script works better on
all unix/unix-like environment, and more conventional. Most of the time you’ll
be using macros instead of bare bone shell script, but keep in mind that behind
the scene your final output is still shell script.</p>

<h3 id="m4-macro-basics">M4 Macro Basics</h3>

<p>Though the first look at M4 macros is very alien and unfriendly, but it only
consist two basic concepts:</p>

<ul>
  <li>Macro expansion</li>
  <li>Quoting</li>
</ul>

<p>You can define a macro like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># define a macro MY_MACRO that expands to text ABC</span>
</span><span class="line">m4_define<span class="o">([</span>MY_MACRO<span class="o">]</span>, <span class="o">[</span>ABC<span class="o">])</span>
</span><span class="line"><span class="nv">MY_MACRO</span> <span class="o">=</span>&gt; ABC
</span><span class="line">
</span><span class="line"><span class="c"># define a macro that is visible to other m4 scripts</span>
</span><span class="line">AC_DEFUN<span class="o">([</span>MY_MACRO<span class="o">]</span>, <span class="o">[</span>ABC<span class="o">])</span>
</span><span class="line"><span class="nv">MY_MACRO</span> <span class="o">=</span>&gt; ABC
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It’s pretty much similar to C macro or Lisp macro. The macro expands at compile
time (<code>configure.ac</code> =&gt; <code>configure</code>). You can define a macro <code>MY_MACRO</code> that
expands to a snippet of shell script. Here we just expands it to <code>ABC</code>, which
doesn’t have any meaning in shell script and can trigger an error.</p>

<p>Every symbol in your script is expandable. For example if you simply write <code>ABC</code>
in your script, is it a shell symbol, or is it a m4 symbol that needs to expand?
The m4 system uses <strong>quoting</strong> to differentiate the two. The default quoting in
autoconf is square brackets <code>[</code>, <code>]</code>. Though you can change it, but it is highly
unrecommended.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ABC   <span class="c"># m4 would try to find *macro* definition of ABC and try to expand it</span>
</span><span class="line"><span class="o">[</span>ABC<span class="o">]</span> <span class="c"># shell symbol ABC</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Why does it matter? Consider these two examples</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">ABC</span><span class="o">=</span><span class="s2">&quot;hello world&quot;</span>     <span class="c"># m4 would try to expand ABC, hello, and world</span>
</span><span class="line"><span class="o">[</span><span class="nv">ABC</span><span class="o">=</span><span class="s2">&quot;hello world&quot;</span><span class="o">]</span>   <span class="c"># m4 would just produce ABC=&quot;hello world&quot; to the output</span>
</span><span class="line">
</span><span class="line"><span class="c"># m4 will expand MY_MACRO and BODY *before* defining MY_MACRO as a symbol to</span>
</span><span class="line"><span class="c"># BODY.</span>
</span><span class="line">AC_DEFUN<span class="o">(</span>MY_MACRO, BODY<span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># safe</span>
</span><span class="line">AC_DEFUN<span class="o">([</span>MY_MACRO<span class="o">]</span>, <span class="o">[</span>BODY<span class="o">])</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is the base of all m4 macros. To recap, <strong>always quote the arguments for
the macros, including symbols, expressions, or body statements</strong>. (I skipped
some edge cases that requires double quoting or escapes, for the curious please
check <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Autoconf-Language.html">the autoconf language</a>).</p>

<h3 id="printing-messages">Printing Messages</h3>

<p>Now we know the basic syntax of m4, let’s see what are the functions it
provides. In the configure script, if you invoke <code>echo</code> directly the output
would be redirected to different places. The convention to print message in
autoconf, is to use <code>AC_MSG_*</code> macros. Here are the two macros that is most
commonly used:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Printing regular message</span>
</span><span class="line">AC_MSG_NOTICE<span class="o">([</span>Greetings from Autoconf<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Prints an error message and stops the configure script</span>
</span><span class="line">AC_MSG_ERROR<span class="o">([</span>We have an error here!<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For the more curious, check the <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.60/html_node/Printing-Messages.html">Printing Messages</a> section in autoconf
manual.</p>

<h3 id="if-condition">If-condition</h3>

<p>To write an if condition in autoconf, simply invoke 
<code>AS_IF(test-1, [run-if-true-1], ..., [run-if-false])</code>.
The best way to see how it works is by looking an example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">abc</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class="line"><span class="nv">def</span><span class="o">=</span><span class="s2">&quot;no&quot;</span>
</span><span class="line">AS_IF<span class="o">([</span><span class="nb">test</span> <span class="s2">&quot;X$abc&quot;</span> <span class="o">=</span> <span class="s2">&quot;Xyes&quot;</span><span class="o">]</span>,             <span class="c"># test condition</span>
</span><span class="line">      <span class="o">[</span>AC_MSG_NOTICE<span class="o">([</span>abc is yes<span class="o">])]</span>,       <span class="c"># then case</span>
</span><span class="line">      <span class="o">[</span><span class="nb">test</span> <span class="s2">&quot;X$def&quot;</span> <span class="o">=</span> <span class="s2">&quot;Xyes&quot;</span><span class="o">]</span>,             <span class="c"># else if</span>
</span><span class="line">      <span class="o">[</span>AC_MSG_NOTICE<span class="o">([</span>def is yes<span class="o">])]</span>,
</span><span class="line">      <span class="o">[</span>AC_MSG_ERROR<span class="o">([</span>abc check failed<span class="o">])]</span>   <span class="c"># else case</span>
</span><span class="line">     <span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># expands to the following shell script</span>
</span><span class="line"><span class="nv">abc</span><span class="o">=</span><span class="s2">&quot;yes&quot;</span>
</span><span class="line"><span class="nv">def</span><span class="o">=</span><span class="s2">&quot;no&quot;</span>
</span><span class="line"><span class="k">if </span><span class="nb">test</span> <span class="s2">&quot;X$abc&quot;</span> <span class="o">=</span> <span class="s2">&quot;Xyes&quot;</span>; <span class="k">then</span> :
</span><span class="line">  <span class="c"># test condition</span>
</span><span class="line">       <span class="nv">$as_echo</span> <span class="s2">&quot;$as_me: abc is yes&quot;</span> &gt;&amp;6
</span><span class="line"><span class="k">elif</span> <span class="c"># then case</span>
</span><span class="line">       <span class="nb">test</span> <span class="s2">&quot;X$def&quot;</span> <span class="o">=</span> <span class="s2">&quot;Xyes&quot;</span>; <span class="k">then</span> :
</span><span class="line">  <span class="c"># else if</span>
</span><span class="line">       <span class="nv">$as_echo</span> <span class="s2">&quot;$as_me: def is yes&quot;</span> &gt;&amp;6
</span><span class="line"><span class="k">else</span>
</span><span class="line"><span class="k">  </span>as_fn_error <span class="nv">$?</span> <span class="s2">&quot;abc check failed&quot;</span>   <span class="c"># else case</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that we don’t use common shell test operator <code>[[</code> and <code>]]</code>, instead we use
<code>test</code> because the square bracket is preserved for macro expansion. The
recommended way to invoke test is <code>test "X$variable" = "Xvalue"</code>. This is how we
avoid null cases of the shell variable.</p>

<p>Another common branching function is <code>AS_CASE(word, [pattern1], [if-matched1], ..., [default])</code>
the logic is pretty much the same.</p>

<p>That all the basics we need to know for autoconf, let’s take a break and switch
to automake.</p>

<h2 id="automake">Automake</h2>

<p>Like autoconf, automake is additional semantics on top of another existing
language – the Makefile syntax. Unlike autoconf, it’s not using m4 to extend
the syntax. It uses a naming convention that converts to the actual logic. Most
of the time, we only need to use the following two rules, which we’ll discuss in
detail.</p>

<ul>
  <li><code>where_PRIMARY = targets</code></li>
  <li><code>target_SECONDARY = inputs</code></li>
</ul>

<h3 id="whereprimary--targets"><code>where_PRIMARY = targets</code></h3>

<p>This syntax has three parts, <code>targets</code>, type <code>PRIMARY</code>, and where to install
<code>where</code>. Some examples shown as below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="c"># target &quot;hello&quot; is a program that will be installed in $bindir</span>
</span><span class="line"><span class="nv">bin_PROGRAMS</span> <span class="o">=</span> hello
</span><span class="line">
</span><span class="line"><span class="c"># target &quot;libabc&quot; is a library that will be installed in $libdir</span>
</span><span class="line"><span class="nv">lib_LIBRARIES</span> <span class="o">=</span> libabc.la
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>targets</code> is a list of targets with the type <code>PRIMARY</code>. Depending on what
<code>PRIMARY</code> is, it can be a program, a library, a shell script, or whatever
<code>PRIMARY</code> supports. The current primary names are “PROGRAMS”, “LIBRARIES”,
“LTLIBRARIES”, “LISP”, “PYTHON”, “JAVA”, “SCRIPTS”, “DATA”, “HEADERS”, “MANS”,
and “TEXINFOS”.</p>

<p>There are three possible type of variables you can put into the <code>where</code> clause.</p>

<ul>
  <li>
    <p>GNU standard directory variables (bindir, sbindir, includedir, etc.) omitting
the suffix “dir”. See <a href="https://www.gnu.org/prep/standards/html_node/Directory-Variables.html">GNU Coding Standard - Directory Variables</a> for
list of predefined directories. Automake extends this list with <code>pkgdatadir</code>,
<code>pkgincludedir</code>, <code>pkglibdir</code>, and <code>pkglibexecdir</code> Automake will check if your
target is valid to install the directory you specified.</p>
  </li>
  <li>
    <p>Self-defined directories. You can hack around automake default type check by
defining your own directories. Do not do this unless you have a good reason!</p>
  </li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="c"># Work around forbidden directory combinations.  Do not use this</span>
</span><span class="line"><span class="c"># without a very good reason!</span>
</span><span class="line"><span class="nv">my_execbindir</span> <span class="o">=</span> <span class="k">$(</span>pkglibdir<span class="k">)</span>
</span><span class="line"><span class="nv">my_doclibdir</span> <span class="o">=</span> <span class="k">$(</span>docdir<span class="k">)</span>
</span><span class="line"><span class="nv">my_execbin_PROGRAMS</span> <span class="o">=</span> foo
</span><span class="line"><span class="nv">my_doclib_LIBRARIES</span> <span class="o">=</span> libquux.a
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>Special prefixes <code>noinst_</code>, <code>check_</code>, <code>dist_</code>, <code>nodist_</code>, <code>nobase_</code>, and
 <code>notrans_</code>. <code>noinst_</code> indicates the targets that you don’t want to install;
 <code>check_</code> is used for unit tests. For the others are less common, please check
 the automake manual for detail.</li>
</ul>

<h3 id="targetsecondary--inputs"><code>target_SECONDARY = inputs</code></h3>

<p>Depending on what your <code>PRIMARY</code> type is, there are different <code>SECONDARY</code> types
you can use for further logic. The common <code>SECONDARY</code> types are</p>

<ul>
  <li><code>_SOURCES</code> defines the source for primary type <code>_PROGRAMS</code> or <code>_LIBRARIES</code></li>
  <li><code>_CFLAGS</code>, <code>_LDFLAGS</code>, etc. compiler flags used for primary type <code>_PROGRAMES</code>
 or <code>_LIBRARIES</code></li>
</ul>

<p>Note that the invalid character in <code>target</code> name will get substituted with
underscore. The following example illustrate all the above:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="nv">lib_LTLIBRARIES</span> <span class="o">=</span> libgettext.la
</span><span class="line"><span class="c"># the dot got substituted with underscore</span>
</span><span class="line"><span class="nv">libgettext_la_SOURCES</span> <span class="o">=</span> gettext.c gettext.h
</span><span class="line"><span class="nv">include_HEADERS</span> <span class="o">=</span> gettext.h
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The example above requires <a href="https://www.gnu.org/software/libtool/">libtool</a>. You need to declare
<code>AC_PROG_LIBTOOL</code> in your <code>configure.ac</code> for it to work.</p>

<h2 id="wraps-it-up---a-x11-example-program">Wraps it up - A X11 example program</h2>

<p>With everything we learnt so far, let’s write a more complicated autoconf
program. This is a very simple X11 program that aims to be portable on all
existing platforms with valid X11 installed. To test if X11 is installed, we use
the macro <code>AC_PATH_XTRA</code>, the manual for this macro is defined in 
<a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/System-Services.html">autoconf existing test for system services</a>.</p>

<p>The manual says: An enhanced version of <code>AC_PATH_X</code>. It adds the C compiler flags
that X needs to output variable <code>X_CFLAGS</code>, and the X linker flags to <code>X_LIBS</code>.
Define <code>X_DISPLAY_MISSING</code> if X is not available. And in the <code>AC_PATH_X</code> it
states “If this method fails to find the X Window System … set the shell
variable no_x to ‘yes’; otherwise set it to the empty string”. We can use the
logic and write our <code>configure.ac</code> script as following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">AC_INIT<span class="o">([</span>x11-example<span class="o">]</span>, <span class="o">[</span>1.0<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># safety check in case user overwritten --srcdir</span>
</span><span class="line">AC_CONFIG_SRCDIR<span class="o">([</span>x11-example.c<span class="o">])</span>
</span><span class="line">
</span><span class="line">AC_CONFIG_AUX_DIR<span class="o">([</span>build-aux<span class="o">])</span>
</span><span class="line">
</span><span class="line">AM_INIT_AUTOMAKE<span class="o">([</span>-Wall -Werror foreign<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Check for C compiler</span>
</span><span class="line">AC_PROG_CC
</span><span class="line">
</span><span class="line"><span class="c"># Check for X11</span>
</span><span class="line"><span class="c"># It exports variable X_CFLAGS and X_LIBS</span>
</span><span class="line">AC_PATH_XTRA
</span><span class="line">
</span><span class="line"><span class="c"># AC_PATH_XTRA doesn&#39;t error out by default,</span>
</span><span class="line"><span class="c"># hence we need to do it manually</span>
</span><span class="line">AS_IF<span class="o">([</span><span class="nb">test</span> <span class="s2">&quot;X$no_x&quot;</span> <span class="o">=</span> <span class="s2">&quot;Xyes&quot;</span><span class="o">]</span>,
</span><span class="line">  <span class="o">[</span>AC_MSG_ERROR<span class="o">([</span>Could not find X11<span class="o">])])</span>
</span><span class="line">
</span><span class="line">AC_CONFIG_FILES<span class="o">([</span>Makefile<span class="o">])</span>
</span><span class="line">
</span><span class="line">AC_OUTPUT
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that the <code>AC_PATH_XTRA</code> export variables <code>X_CFLAGS</code> and <code>X_LIBS</code>. To use
these variables in <code>Makefile.am</code>, just surround it with <code>@</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="nv">bin_PROGRAMS</span> <span class="o">=</span> x11-example
</span><span class="line">
</span><span class="line"><span class="nv">x11_example_SOURCES</span> <span class="o">=</span> x11-example.c
</span><span class="line"><span class="nv">x11_example_CFLAGS</span> <span class="o">=</span> @X_CFLAGS@
</span><span class="line"><span class="c"># AX_PATH_XTRA only specify the root of X11</span>
</span><span class="line"><span class="c"># we still have to include -lX11 ourselves</span>
</span><span class="line"><span class="nv">x11_example_LDFLAGS</span> <span class="o">=</span> @X_LIBS@ -lX11
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That all we need to build a platform independent X11 program! Check the full
source on <a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-2">github</a>. The X11 example program was written by Brian Hammond
2/9/96. He generously released this to public for any use.</p>

<p>This program can easily work on Linux. I’ll use OSX as an example of how cross
platform works. Before you run the example, make sure you have
<a href="http://www.xquartz.org">XQuartz</a> installed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd </span>example-2
</span><span class="line">autoreconf -vif <span class="c"># shortcut of --verbose --install --force</span>
</span><span class="line">./configure --with-x --x-includes<span class="o">=</span>/opt/X11/include/ --x-libraries<span class="o">=</span>/opt/X11/lib
</span><span class="line">make
</span><span class="line">./x11-example
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Change the <code>--x-includes</code> and <code>--x-libraries</code> to proper directory if you
installed the xquartz to a different location.</p>

<p>I only introduced very little syntax for autoconf (if-else, print message) and
automake (primary/secondary rules, use of export variables by <code>@</code>). But just
using these basic component is already very sufficient for writing conventional
build scripts. How to do it? Check the [existing tests provided by
autoconf][exsisting test]. Here are some of the most commonly used existing
checks:</p>

<ul>
  <li>Library checks: <code>AC_CHECK_LIB</code> <code>AC_SEARCH_LIBS</code>. <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Libraries.html">library documentation</a>.</li>
  <li>Header checks: <code>AC_CHECK_HEADER[S]</code>. <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Generic-Headers.html">header documentation</a>.</li>
  <li><a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Compilers-and-Preprocessors.html">Compiler characteristics</a>.</li>
</ul>

<p>For the checks that are not included in the default autoconf package, it
probably exists in the extended package <a href="http://www.gnu.org/software/autoconf-archive">autoconf archive</a>, which I’ll
cover in the next post.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-1]]></title>
    <link href="http://www.idryman.org/blog/2016/03/10/autoconf-tutorial-1/"/>
    <updated>2016-03-10T14:55:00-08:00</updated>
    <id>http://www.idryman.org/blog/2016/03/10/autoconf-tutorial-1</id>
    <content type="html"><![CDATA[<p>It’s been more than a year since my last update to my blog. I learnt a lot new
stuffs in last year, but was too busy on work to write down what I’ve learnt.
Luckily I got some breaks recently, and I’ll pick up some of the posts that
I’ve wanted to write about. First I’ll start with a autoconf tutorial series.
This is one of the difficult material to learn, but I’ll try to re-bottle it
to make it more accessible to everyone.</p>

<!-- more -->

<h2 id="what-is-autoconf">What is Autoconf?</h2>

<p>If you have ever installed third party packages, you probably already used the
result of autoconf. Autoconf, automake, and libtool are the GNU Autotools
family that generate the installation script:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">./configure
</span><span class="line">make
</span><span class="line">make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Many unix or unix-like system make use of the simplicity of these installation
steps. The linux distros usually provides custom command line options to the
<code>./configure</code> to customize the build, and further repackage it with rpm or dpkg.</p>

<p>Autoconf is not only a build system, it also does many system compatibility
checks. Does your operating system support memory-mapped file? Does your
environment has X11? The standard autoconf already support a wide variety of
checks, and there are 500 more in <a href="http://www.gnu.org/software/autoconf-archive/The-Macros.html">Autoconf Archive</a>. It’s the defacto
standard build standard for building small and large linux/unix programs.</p>

<p>Though the output of autoconf is easy for user to install, writing autoconf
build script is less intuitive, compare to other fancier solution like
<a href="https://cmake.org">CMake</a> or <a href="http://www.scons.org">Scons</a>. And that’s why I’m writing this tutorial - to
reduce the learning curve of using autoconf.</p>

<p>Through out this series, I’ll start with a minimal autoconf project, and later
introduce how to bring in debug setup, how to build a library, how to setup unit
test, how to write your own cross platform checks etc.</p>

<h2 id="hello-autoconf">Hello Autoconf</h2>

<p>The best way to learn is to practice through examples. Let’s start with a very
simple one. First create a directory holding your project, </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mkdir example-1
</span><span class="line"><span class="nv">$ </span><span class="nb">cd </span>example-1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Install the autoconf on your system if it wasn’t installed</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># OSX</span>
</span><span class="line"><span class="nv">$ </span>brew install autoconf automake libtool
</span><span class="line"><span class="c"># Ubuntu/Debian</span>
</span><span class="line"><span class="nv">$ </span>sudo apt-get install autoconf automake libtool
</span><span class="line"><span class="c"># RHEL/CentOS</span>
</span><span class="line"><span class="nv">$ </span>sudo yum install autoconf automake libtool
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And create three files: <code>configure.ac</code>, <code>Makefile.am</code>, and the program itself
<code>hello.c</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>configure.ac</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># Must init the autoconf setup</span>
</span><span class="line"><span class="c"># The first parameter is project name</span>
</span><span class="line"><span class="c"># second is version number</span>
</span><span class="line"><span class="c"># third is bug report address</span>
</span><span class="line">AC_INIT<span class="o">([</span>hello<span class="o">]</span>, <span class="o">[</span>1.0<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Safety checks in case user overwritten --srcdir</span>
</span><span class="line">AC_CONFIG_SRCDIR<span class="o">([</span>hello.c<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Store the auxiliary build tools (e.g., install-sh, config.sub, config.guess)</span>
</span><span class="line"><span class="c"># in this dir (build-aux)</span>
</span><span class="line">AC_CONFIG_AUX_DIR<span class="o">([</span>build-aux<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Init automake, and specify this program use relaxed structures.</span>
</span><span class="line"><span class="c"># i.e. this program doesn&#39;t follow the gnu coding standards, and doesn&#39;t have</span>
</span><span class="line"><span class="c"># ChangeLog, COPYING, AUTHORS, INSTALL, README etc. files.</span>
</span><span class="line">AM_INIT_AUTOMAKE<span class="o">([</span>-Wall -Werror foreign<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Check for C compiler</span>
</span><span class="line">AC_PROG_CC
</span><span class="line"><span class="c"># We can add more checks in this section</span>
</span><span class="line">
</span><span class="line"><span class="c"># Tells automake to create a Makefile</span>
</span><span class="line"><span class="c"># See https://www.gnu.org/software/automake/manual/html_node/Requirements.html</span>
</span><span class="line">AC_CONFIG_FILES<span class="o">([</span>Makefile<span class="o">])</span>
</span><span class="line">
</span><span class="line"><span class="c"># Generate the output</span>
</span><span class="line">AC_OUTPUT
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Makefile.am</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="make"><span class="line"><span class="nv">bin_PROGRAMS</span> <span class="o">=</span> hello
</span><span class="line"><span class="nv">hello_SOURCES</span> <span class="o">=</span> hello.c
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That’s the minimal build script you need for your first autoconf program.
Let’s try what we’ve got with this setup. Make sure your are in the <code>example-1</code>
directory.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># this creates the configure script</span>
</span><span class="line"><span class="nv">$ </span>autoreconf --verbose --install --force
</span><span class="line"><span class="nv">$ </span>./configure --help
</span><span class="line"><span class="nv">$ </span>./configure
</span><span class="line">ecking <span class="k">for </span>a BSD-compatible install... /usr/bin/install -c
</span><span class="line">checking whether build environment is sane... yes
</span><span class="line">checking <span class="k">for </span>a thread-safe mkdir -p... build-aux/install-sh -c -d
</span><span class="line">checking <span class="k">for </span>mawk... no
</span><span class="line">...
</span><span class="line">config.status: creating Makefile
</span><span class="line">config.status: executing depfiles commands
</span><span class="line"><span class="c"># Now try the makefile</span>
</span><span class="line"><span class="nv">$ </span>make
</span><span class="line">gcc -DPACKAGE_NAME<span class="o">=</span><span class="se">\&quot;</span>hello<span class="se">\&quot;</span> -DPACKAGE_TARNAME<span class="o">=</span><span class="se">\&quot;</span>hello<span class="se">\&quot;</span> -DPACKAGE_VERSION<span class="o">=</span><span class="se">\&quot;</span>1.0<span class="se">\&quot;</span> -DPACKAGE_STRING<span class="o">=</span><span class="se">\&quot;</span>hello<span class="se">\ </span>1.0<span class="se">\&quot;</span> -DPACKAGE_BUGREPORT<span class="o">=</span><span class="se">\&quot;\&quot;</span> -DPACKAGE_URL<span class="o">=</span><span class="se">\&quot;\&quot;</span> -DPACKAGE<span class="o">=</span><span class="se">\&quot;</span>hello<span class="se">\&quot;</span> -DVERSION<span class="o">=</span><span class="se">\&quot;</span>1.0<span class="se">\&quot;</span> -I.     -g -O2 -MT hello.o -MD -MP -MF .deps/hello.Tpo -c -o hello.o hello.c
</span><span class="line">mv -f .deps/hello.Tpo .deps/hello.Po
</span><span class="line">gcc  -g -O2   -o hello hello.o
</span><span class="line"><span class="c"># We now have the hello program built</span>
</span><span class="line"><span class="nv">$ </span>./hello
</span><span class="line">hello world!
</span><span class="line"><span class="c"># Create hello-1.0.tar.gz that contains the configure script</span>
</span><span class="line"><span class="nv">$ </span>make dist
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You  might think this is overkill for a hello world program, but you can also
think in another way. Just adding the <code>configure.ac</code> and <code>Makefile.am</code> made a
simple hello world program looks like a serious production ready project (with
all these fancy configure checks and compiler flags).</p>

<p>Let’s iterate through each of the build script.</p>

<h1 id="configureac">configure.ac</h1>

<p>The syntax for <code>configure.ac</code> is <code>MACRO_NAME([param-1],[param-2]..)</code>. The
parameter passed to the macro must be quoted by square brackets, (unless it is
another macro that you want to expand BEFORE calling the outer macro, which is
very rare). The macros will expands to shell script that perform the actual
checks. You can also write shell script in your configure.ac file. Just one
difference, you should use <code>if test &lt;expression&gt;; then...</code> instead of 
<code>if [[ &lt;expression&gt; ]]; then...</code> for condition branching, because the square
brackets would get expanded by the autoconf macro system.</p>

<ul>
  <li>
    <p><code>AC_INIT(package, version, [bug-report], [tarname], [url])</code> In every autoconf
configure script, you must first initialize autoconf with this macro. The
square braket that wraps around each parameter cannot be omitted.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_SRCDIR(dir)</code> Next we specify a unique file identifying we are in
the right directory. This is a safety check in case user override the –srcdir
command line option.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_AUX_DIR(dir)</code> By default autoconf will create many auxiliary files
that help to build and distribute the programs. However we don’t want to have
these files to mess up the project home directory. In convention we call this
macro with <code>[build-aux]</code> so that it put these extra files in <code>build-aux/</code>
instead of project home.</p>
  </li>
  <li>
    <p><code>AM_INIT_AUTOMAKE([options])</code> Initializes automake. An important note here is
in early phase of your project development, you probably want to provide the
option <code>foreign</code> to init automake. If foreign wasn’t provided, automake will
complain that your project didn’t confirm to gnu coding standards, which would
require you to have README, ChangLog, AUTHORS, and many other files in your
project’s home directory.</p>
  </li>
  <li>
    <p><code>AC_PROG_CC</code> Checks for a valid C compiler. There are hundreds more checks you
can put in this section.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_FILES(files)</code> Required by automake to create the output file. Here
we simply put the <code>Makefile</code> in. Checks the automake documentation for more
detail.
<a href="https://www.gnu.org/software/automake/manual/html_node/Requirements.html">automake</a>.</p>
  </li>
  <li>
    <p><code>AC_OUTPUT</code> Creates the configure script</p>
  </li>
</ul>

<h1 id="makefileam">Makefile.am</h1>

<p>The automake file <code>Makefile.am</code> is an extension to Makefile. You can write
standard make syntax, but normally you only need to define variables that
conforms to the <a href="https://www.gnu.org/software/automake/manual/html_node/Uniform.html">uniform naming scheme</a>. In this post I’ll only give
rough explanation, and dive in more detail in next post.</p>

<ul>
  <li>
    <p><code>bin_PROGRAMS = hello</code> The output is a PROGRAM (other options are LIBRARY,
HEADER, MAN, etc.) named <code>hello</code>, and will be installed in bin directory
(default to <code>/usr/local/bin</code>, but can be configured when invoking
<code>./configure</code>.</p>
  </li>
  <li>
    <p><code>hello_SOURCES = hello.c</code> The sources of hello program is hello.c</p>
  </li>
</ul>

<p>The complete program can be found in my github repository: 
<a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-1">Example 1</a>.</p>

<h1 id="more-make-targets">More make targets</h1>

<p>The Makefile generated by Autoconf and automake has more commands that you can
run:</p>

<ul>
  <li>
    <p><code>make all</code>
Build programs, libraries, documentation, etc. (same as make).</p>
  </li>
  <li>
    <p><code>make install</code>
Install what needs to be installed, copying the files from the package’s tree to system-wide directories.</p>
  </li>
  <li>
    <p><code>make install-strip</code>
Same as make install, then strip debugging symbols. Some users like to trade space for useful bug reports…</p>
  </li>
  <li>
    <p><code>make uninstall</code>
The opposite of make install: erase the installed files. (This needs to be run from the same build tree that was installed.)</p>
  </li>
  <li>
    <p><code>make clean</code>
Erase from the build tree the files built by make all.</p>
  </li>
  <li>
    <p><code>make maintainer-clean</code>
Erase files that generated by autoconf.</p>
  </li>
  <li>
    <p><code>make distclean</code>
Additionally erase anything ./configure created.</p>
  </li>
  <li>
    <p><code>make check</code>
Run the test suite, if any.</p>
  </li>
  <li>
    <p><code>make installcheck</code>
Check the installed programs or libraries, if supported.</p>
  </li>
  <li>
    <p><code>make dist</code>
Recreate package-version.tar.gz from all the source files.</p>
  </li>
</ul>

<p>When I first survey what build system I should pick for my own projects, I often
see other alternatives claiming autoconf is old and hard to use. This is
partially true, but the more I dig in the more I found how powerful autoconf is.
As you see, this example can already cover many common cases, with a succinct
build script and very powerful output. The package created by <code>make dist</code>
only requires a minimal unix compatible environment (shell and make) to run.</p>

<p>In the next post I’ll cover more detail in the autoconf syntax and Automake
syntax.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.gnu.org/software/autoconf/autoconf.html">Autoconf</a></li>
  <li><a href="https://www.gnu.org/software/automake/">Automake</a></li>
  <li><a href="https://autotools.io/index.html">Autoconf myth buster</a></li>
  <li><a href="http://www.lrde.epita.fr/~adl/autotools.html">Autotools tutorials</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing 64 bit assembly on Mac OS X]]></title>
    <link href="http://www.idryman.org/blog/2014/12/02/writing-64-bit-assembly-on-mac-os-x/"/>
    <updated>2014-12-02T17:18:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/12/02/writing-64-bit-assembly-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Many assembly tutorials and books doesn’t cover
how to write a simple assembly program on the Mac OS X.
Here are some baby steps that can help people who
are also interested in assembly to get started
easier.</p>

<!--more-->

<h2 id="mach-o-file-format">Mach-O file format</h2>

<p>To get started on writing OSX assembly, you need to
understand OSX executable file format – the <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html">Mach-O
file format</a>. It’s similar to ELF, but instead
of sections of data, bss, and text, it has segments that
contains sections.</p>

<p>A common assembly in Linux like</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="na">.section</span> <span class="no">data</span>
</span><span class="line"><span class="na">.section</span> <span class="no">text</span>
</span><span class="line"><span class="c"># your code here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>would translate into this in Mach-O</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="c"># __DATA is segment, __data is section</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="c"># __TEXT is segment, __text is section</span>
</span><span class="line">
</span><span class="line"><span class="c"># your code here</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Mach-O is pretty flexible. You can embed a
<code>cstring</code> section in your <code>__TEXT</code> segment instead
of putting it in <code>__DATA,__data</code>. Actually this is
the default behavior that compiler does on your Mac.</p>

<h2 id="hello-assembly">Hello Assembly</h2>

<p>Now we know how to translate common linux assembly
to mac, let’s write a basic program – do a system call
with an exit code.</p>

<p>On x86 you do a system call by <code>int x80</code> instruction. On
64 bit machine, you do this by <code>syscall</code>. Here’s the sample
code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># Simple exit program</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span> <span class="c"># system call $1 with $0x2000000 offset</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%ebx</span>         <span class="c"># set the exit code to be $0</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can compile the code by the following commands:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">as exit.s -o exit.o
</span><span class="line">ld exit.o -e _main -o <span class="nb">exit</span>     <span class="c"># -e specify the entry point of the executable</span>
</span><span class="line">./exit
</span><span class="line"><span class="nb">echo</span> <span class="nv">$?</span> <span class="c"># show last return code, should show 0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To perform a system call, you put the system call number in
<code>%eax</code>, and put the actual exit code to <code>%ebx</code>. The system
call number can be found in <code>/usr/include/sys/syscall.h</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#define	SYS_syscall        0</span>
</span><span class="line"><span class="cp">#define	SYS_exit           1</span>
</span><span class="line"><span class="cp">#define	SYS_fork           2</span>
</span><span class="line"><span class="cp">#define	SYS_read           3</span>
</span><span class="line"><span class="cp">#define	SYS_write          4</span>
</span><span class="line"><span class="cp">#define	SYS_open           5</span>
</span><span class="line"><span class="cp">#define	SYS_close          6</span>
</span><span class="line"><span class="cp">#define	SYS_wait4          7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The system call number need to add an offset <code>0x2000000</code>, because
OSX has 4 different class of system calls. You can find the reference
here <a href="http://www.opensource.apple.com/source/xnu/xnu-1699.26.8/osfmk/mach/i386/syscall_sw.h">XNU syscall</a>.</p>

<h2 id="system-call-by-using-wrapper-functions">System call by using wrapper functions</h2>

<p>If you’re like me that had no assembly background, you might
feel that <code>syscall</code> is alien to you. In C, we usually use
wrapper functions to perform the call:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># exit2.s</span>
</span><span class="line"><span class="c"># To compile it, type the following in shell</span>
</span><span class="line"><span class="c"># as exit2.s -o exit2.o</span>
</span><span class="line"><span class="c"># ld exit2.o -e _main -lc -o exit</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$5</span><span class="p">,</span> <span class="nv">%edi</span>        <span class="c"># exit(5);</span>
</span><span class="line">  <span class="nf">callq</span> <span class="no">_exit</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now we call a <code>libc</code> function instead of performing a system
call. To do this we need to link to libc by passing <code>-lc</code>
to linker <code>ld</code>. There are several things you need to do
to make a function call. </p>

<h3 id="call-frame">Call frame</h3>

<p>We need to prepare the stack before we call a function. Else
you would probably get a segmentation fault.
The values in <code>%rsp</code> and <code>%rbp</code> is used to preserve frame information.
To maintain the stack, you first push the base register <code>%rbp</code>
onto the stack by <code>pushq %rbp</code>;
then you copy the stack register <code>%rsp</code> to the base register.</p>

<p>If you have local variables, you subtract <code>%rsp</code> for space.
Remember, stack grows down and heap grows up.
When releasing the frame, you add the space back to <code>%rsp</code>.</p>

<p>A live cycle of a function would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># function start</span>
</span><span class="line"><span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line"><span class="nf">subq</span> <span class="no">$4</span><span class="p">,</span> <span class="nv">%rsp</span>      <span class="c"># reserve 4 bytes on stack</span>
</span><span class="line"><span class="nf">movl</span> <span class="no">$5</span><span class="p">,</span> <span class="p">-</span><span class="mi">4</span><span class="p">(</span><span class="nv">%rbp</span><span class="p">)</span>  <span class="c"># We usually use base register instead</span>
</span><span class="line">                   <span class="c"># of stack pointer to access data</span>
</span><span class="line"><span class="nf">addq</span> <span class="no">$4</span><span class="p">,</span> <span class="nv">%rsp</span>      <span class="c"># release the stack</span>
</span><span class="line"><span class="nf">popq</span> <span class="nv">%rbp</span>          <span class="c"># restore old %rbp</span>
</span><span class="line"><span class="nf">retq</span>               <span class="c"># function ends</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The stack size can be set at link time. On OSX, below are the
example parameters you can pass to <code>ld</code> to set the stack size:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ld stack.o -stack_size 0x4000 -stack_addr 0x7fff5fbff000 -lc -e _start -o stack
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When setting the stack size, you also have to set the stack address.
On the <a href="http://www.x86-64.org/documentation/abi.pdf">System V Application Binary Interface</a> it says</p>

<blockquote>
  <p>Although the AMD64 architecture uses 64-bit pointers, implementations
are only required to handle 48-bit addresses. Therefore, conforming processes may only
use addresses from <code>0x00000000 00000000</code> to <code>0x00007fff ffffffff</code></p>
</blockquote>

<p>I don’t know a good answer of how to chose a good stack address.
I just copy whatever a normal code produces.</p>

<h3 id="parameters-passing">Parameters passing</h3>

<p>The rules for parameter passing can be found in <a href="http://www.x86-64.org/documentation/abi.pdf">System V
Application Binary Interface</a>:</p>

<ol>
  <li>If the class is MEMORY, pass the argument on the stack.
If the size of an object is larger than four eight bytes, or
it contains unaligned fields, it has class MEMORY.</li>
  <li>If the class is INTEGER, the next available register of the sequence <code>%rdi</code>,
<code>%rsi</code>, <code>%rdx</code>, <code>%rcx</code>, <code>%r8</code> and <code>%r9</code> is used.</li>
  <li>If the class is SSE, the next available vector register is used, the registers
are taken in the order from <code>%xmm0</code> to <code>%xmm7</code>.</li>
</ol>

<p>The <code>exit()</code> function only need one integer parameter, therefore we put
the exit code in <code>%edi</code>. Since the parameter is type <code>int</code>, we use 32 bit
variance of register <code>%rdi</code> and the instruction is <code>movl</code> (mov long) instead
of <code>movq</code> (mov quad).</p>

<h2 id="hello-world">Hello world</h2>

<p>Now we know the basics of how to perform
a system call, and how to call a function.
Let’s write a hello world program.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># hello_asm.s</span>
</span><span class="line"><span class="c"># as hello_asm.s -o hello_asm.o</span>
</span><span class="line"><span class="c"># ld hello_asm.o -e _main -o hello_asm</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="nl">str:</span>
</span><span class="line">  <span class="na">.asciz</span> <span class="s">&quot;Hello world!\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000004</span><span class="p">,</span> <span class="nv">%eax</span>           <span class="c"># preparing system call 4</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$1</span><span class="p">,</span> <span class="nv">%edi</span>                    <span class="c"># STDOUT file descriptor is 1</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">str@GOTPCREL</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rsi</span>   <span class="c"># The value to print</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">$100</span><span class="p">,</span> <span class="nv">%rdx</span>                 <span class="c"># the size of the value to print</span>
</span><span class="line">  <span class="nf">syscall</span>
</span><span class="line">
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%ebx</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span>           <span class="c"># exit 0</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The global variable <code>str</code> can only be accessed through GOT
(Global Offset Table). And the GOT needs to be access from
the instruction pointer <code>%rip</code>. For more curious you can
read <a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachOTopics/1-Articles/x86_64_code.html">Mach-O Programming Topics: x86-64 Code Model</a>.</p>

<p>The register used for <code>syscall</code> parameters are a little
bit different than the normal function call.
It uses <code>%rdi</code>, <code>%rsi</code>, <code>%rdx</code>, <code>%r10</code>, <code>%r8</code> and <code>%r9</code>.
You cannot pass more than 6 parameters in <code>syscall</code>, nor
can you put the parameters on the stack.</p>

<h2 id="hello-world-using-printf">Hello world using printf</h2>

<p>Now you know the basics of assembly. A hello world
example using printf should be trivial to read:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="gas"><span class="line"><span class="c"># hello_asm2.s</span>
</span><span class="line"><span class="c"># as hello_asm2.s -o hello_asm2.o</span>
</span><span class="line"><span class="c"># ld hello_asm2.o -e _main -lc -o hello_asm2</span>
</span><span class="line"><span class="na">.section</span> <span class="no">__DATA</span><span class="p">,</span><span class="no">__data</span>
</span><span class="line"><span class="nl">str:</span>
</span><span class="line">  <span class="na">.asciz</span> <span class="s">&quot;Hello world!\n&quot;</span>
</span><span class="line">
</span><span class="line"><span class="na">.section</span> <span class="no">__TEXT</span><span class="p">,</span><span class="no">__text</span>
</span><span class="line"><span class="na">.globl</span> <span class="no">_main</span>
</span><span class="line"><span class="nl">_main:</span>
</span><span class="line">  <span class="nf">pushq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="nv">%rsp</span><span class="p">,</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movq</span> <span class="no">str@GOTPCREL</span><span class="p">(</span><span class="nv">%rip</span><span class="p">),</span> <span class="nv">%rdi</span>
</span><span class="line">  <span class="nf">movb</span> <span class="no">$0</span><span class="p">,</span> <span class="nv">%al</span>
</span><span class="line">  <span class="no">callq</span> <span class="no">_printf</span>
</span><span class="line">  <span class="nf">popq</span> <span class="nv">%rbp</span>
</span><span class="line">  <span class="nf">movl</span> <span class="no">$0x2000001</span><span class="p">,</span> <span class="nv">%eax</span>
</span><span class="line">  <span class="nf">syscall</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>The 64 bit assembly looks more vague than the tutorials
written in X86 assembly. Once you know these basic differences,
it’s easy for you to learn assembly in depth on your own,
even if the material is designed for x86. I highly recommend
the book “Programming from the ground up”. It is well written
for self study purpose.</p>

<h2 id="references">References</h2>

<ol>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachORuntime/index.html">OS X ABI Mach-O File Format Reference</a></li>
  <li><a href="http://www.x86-64.org/documentation/abi.pdf">System V Application Binary Interface</a></li>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Reference/Assembler/000-Introduction/introduction.html#//apple_ref/doc/uid/TP30000851-CH211-SW1">OS X Assembler Reference</a> Assembler Directives</li>
  <li><a href="https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html#//apple_ref/doc/uid/TP40001827-SW1">Mach-O Programming Topics</a></li>
  <li><a href="http://www.objc.io/issue-6/mach-o-executables.html">Mach-O Executables - Build Tools</a></li>
  <li>Book: Programming from the ground up.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integer Promotion Part 2]]></title>
    <link href="http://www.idryman.org/blog/2014/11/29/integer-promotion-part-2/"/>
    <updated>2014-11-29T18:34:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/11/29/integer-promotion-part-2</id>
    <content type="html"><![CDATA[<p>It’s been a while since I wrote my last article. I recently read an old book <a href="http://www.amazon.com/Expert-Programming-Peter-van-Linden/dp/0131774298">Expert C Programming</a> and found there are many C langauge details that I never think about. Review and rethink what C integer promotion rules meant to C is one of the interesting topic that I want to share with you.</p>

<!--more-->

<h2 id="what-is-type-systems">What is type systems?</h2>

<p>Type is the methods that interpret and process your data.
Sounds familiar to OOP? Definiing a class <strong>IS</strong> defining a method.
In C, expressions on different data type produces different
instructions. What instruction to generate? Depends on the data
type. (int is different than float, for example).</p>

<p>A chunk of data in memory or register can mean anything
on a CPU. The type system defines how operators works on different types.
Given the example below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="mh">0x00007ffffffffcc0</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// =&gt; 0x00007fffffffffcc4 because the type &quot;pointer to int&quot;</span>
</span><span class="line">                <span class="c1">// defines the multiplier of the offset is 4</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span><span class="o">*</span> <span class="n">r</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="n">q</span><span class="p">;</span> <span class="c1">// Invalid in C type system.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>When adding an integer to a pointer, the compiler knows the offset multiplier
by the type of the pointer points to. If <code>p</code> where defined as <code>char* p</code>, then
the multiplier would be 1. Also, the <code>+</code> operator only make sense to add an
offset to a pointer, therefore adding two pointer together is invalid in C
syntax.</p>

<h2 id="review-c-integer-promotion-rules">Review C integer promotion rules</h2>

<p>I wrote an article about C integer promotion 2 years ago: <a href="http://www.idryman.org/blog/2012/11/21/integer-promotion/">Deep C: Integer Promotion</a>. The standard integer promotion rules in C99 is listed below.</p>

<blockquote>
  <p>If an int can represent all values of the original type, the value is converted
to an int; otherwise, it is converted to an unsigned int. These are called the
integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>

<p>This is called <em>value preserving</em>. On machine level, the arithmetic works best on
a whole register (or 32 bit register). Remember that C’s philosophy is to make
your program runs as fast as possible, so it loads your small data chunk into
the whole register, then do the calculation.</p>

<p>However, things worked differently on K&amp;R C. It’s was defined as <em>unsigned
preserving</em>. When mixing a signed and unsigned integer, the result is unsigned
type. Below is the example copied from <strong>Expert C Programming</strong> book.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">if</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;C dialect after ANSI C, including C89, C99, and after</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Pre ANSI C (K&amp;R) dialect. -1 is treated as unsigned value 0xFFFFFFFF and thus greater than 1 ! </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="mixing-unsigned-and-signed-integer-in-modern-c">Mixing unsigned and signed integer in modern C</h2>

<p>Although most of the time C will preserve the value of the type for you,
you can still get surprising result. When the signed integer can’t hold
the unsigned value, everything is converted to unsigned integer.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c"><span class="line">  <span class="k">if</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-1 is less than 4</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;-1 is treated as 0xffffffff. Because sizeof returns size_t which is an unsigned int</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This program will execute the <strong>else</strong> branch and print:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="o">-</span><span class="mi">1</span> <span class="n">is</span> <span class="n">treated</span> <span class="n">as</span> <span class="mh">0xffffffff</span><span class="p">.</span> <span class="n">Because</span> <span class="k">sizeof</span> <span class="n">returns</span> <span class="kt">size_t</span> <span class="n">which</span> <span class="n">is</span> <span class="n">an</span> <span class="kt">unsigned</span> <span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Always be careful when you mix unsigned and signed integer in expressions.
When possible, type cast it to signed int. C is designed to make program fast,
but not safe for beginners. Additional checks would create a lot of overhead
in the runtime, so the developer need to know the system and language well
to avoid shooting at their own foot. Another possible reason may be that 
the original C developers were all operating system writers and compiler 
writers. Therefore, the mappings between Assembly and C langauge is
straight forward to them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Hadoop-FieldFormat]]></title>
    <link href="http://www.idryman.org/blog/2014/03/06/introducing-hadoop-fieldformat/"/>
    <updated>2014-03-06T14:25:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/03/06/introducing-hadoop-fieldformat</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/dryman/hadoop-fieldformat">Hadoop FieldFormat</a> is the new library I released that is flexible and robust for reading and setting schema information in Hadoop map-reduce program. We use this library to record the meta information for the data, and improve the semantic when building large map-reduce pipe-lined tasks. The project is quite stable now and we already used it in our production system. Any suggestion is welcome!</p>

<!--more-->

<h2 id="the-problem">The problem</h2>

<p>The map-reduce architecture is really good at aggregating large dataset and ad-hoc perform computation; however, when the number dataset increases, it becomes difficult to manage the meta data of those dataset. The biggest issue is data by default is semi-structured; there’s no schema or header information to tell you the semantic of the data. When working in raw map-reduce, this is typical code that I write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">map</span> <span class="o">(</span><span class="n">LongWritable</span> <span class="n">keyIn</span><span class="o">,</span> <span class="n">Text</span> <span class="n">valIn</span><span class="o">,</span> <span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class="line">    <span class="n">String</span> <span class="o">[]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">valIn</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\t&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class="line">    <span class="n">String</span> <span class="n">cookie</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class="line">    <span class="n">String</span> <span class="n">ua</span> <span class="o">=</span> <span class="n">fields</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
</span><span class="line">    <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There’s no semantic associated with the data, so you can only hard code the semantic and hope the fields order will stay the same forever. If the upstream process inserted a new field to this dataset, your program may still run, but produce wrong result that might be difficult to catch by downstream program.</p>

<p>The same issue happens in <a href="https://pig.apache.org">Pig</a> and <a href="http://www.cascading.org">cascading</a> too. Pig, for example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">tomcat</span> <span class="o">=</span> <span class="n">LOAD</span> <span class="err">&#39;</span><span class="n">catalina</span><span class="o">.</span><span class="na">out</span><span class="err">&#39;</span> <span class="n">USING</span> <span class="n">PigStorage</span><span class="o">(</span><span class="sc">&#39;\t&#39;</span><span class="o">)</span> <span class="n">AS</span> <span class="o">(</span><span class="n">ip</span><span class="o">,</span> <span class="n">cookie</span><span class="o">,</span> <span class="n">query</span><span class="o">,</span> <span class="n">url</span><span class="o">,</span> <span class="n">time</span><span class="o">,</span> <span class="n">ua</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the input format changed, you’ll need to be very careful to make sure all the downstream process are corrected. Moreover, if you want to run map-reduce across different versions of dataset, you may not be able to run it because the order of the fields is different!</p>

<h3 id="hive-and-hcatalog">Hive and HCatalog</h3>

<p>Goal: lightweight semantic attached to the data</p>

<h2 id="eat-our-own-dog-food----introducing-hadoop-fieldformat">Eat our own dog food – introducing Hadoop FieldFormat!</h2>

<p>You may be surprised by how simple the solution is. First, answer this:
Where does hadoop store the meta data for map-reduce jobs? <code>_logs</code>.</p>

<p>What hadoop FieldFormat does is reading and writing header.tsv. Also, provides
a convenient API in java to access the data field using the java Map interface.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop performance tuning best practices]]></title>
    <link href="http://www.idryman.org/blog/2014/03/05/hadoop-performance-tuning-best-practices/"/>
    <updated>2014-03-05T11:17:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/03/05/hadoop-performance-tuning-best-practices</id>
    <content type="html"><![CDATA[<p>I have been working on Hadoop in production for a while. Here are some of the performance tuning tips I learned from work. Many of my tasks had performance improved over 50% in general. Those guide lines work perfectly in my work place; hope it can help you as well.</p>

<!--more-->

<h2 id="tuning-hadoop-run-time-parameters">Tuning Hadoop run-time parameters</h2>

<p>Hadoop provides a set of options on cpu, memory, disk, and network for performance tuning. Most hadoop tasks are not cpu bounded, what we usually look into is to optimize usage of memory and disk spills.</p>

<h3 id="memory-tuning">Memory tuning</h3>

<p>The general rule for memory tuning is: use as much memory as you can, but don’t trigger swapping. The parameter you can set for task memory is <code>mapred.child.java.opts</code>. You can put it in your configuration file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.child.java.opts<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>-Xms1024M -Xmx2048M<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can tune the best parameters for memory by monitoring memory usage on server using Ganglia, Cloudera manager, or Nagios. Cloudera has a slide focused on memory usage tuning, the link is <a href="http://www.slideshare.net/Hadoop_Summit/optimizing-mapreduce-job-performance">here</a></p>

<h3 id="minimize-the-map-disk-spill">Minimize the map disk spill</h3>

<p>Disk IO is usually the performance bottleneck. There are a lot of parameters you can tune for minimizing spilling. What I use the most are:</p>

<ul>
  <li>compress mapper output</li>
  <li>Use 70% of heap memory for spill buffer in mapper</li>
</ul>

<p>In your configuration file, you can write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.compress.map.output<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.map.output.compression.codec<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>com.hadoop.compression.lzo.LzoCodec<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>io.sort.mb<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>800<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Although you can further tune reducer buffer, mapper sort record percent, and various of stuff, I found the best thing to do is reduce the mapper output size. Most of the time, the performance is fast enough after I refactor the mapper to output as little data as possible. For more information, check the same <a href="http://www.slideshare.net/Hadoop_Summit/optimizing-mapreduce-job-performance">cloudera’s performance tuning guide</a>.</p>

<h3 id="tuning-mapper-tasks">Tuning mapper tasks</h3>

<p>Unlike reducer tasks which you can specify the number of reducer, the number of mapper tasks is set implicitly. The tuning goal for the mapper is control the amount of mapper and the size of each job. When dealing with large files, hadoop split the file in to smaller chunk so that mapper can run it in parallel. However, the initializing new mapper job usually takes few seconds, this is also a overhead that we want to minimize. These are the things you can do:</p>

<ul>
  <li>
    <p>Reuse jvm task</p>
  </li>
  <li>
    <p>If the average mapper running time is shorter than one minute, you can increase the <code>mapred.min.split.size</code>, so that less mappers are allocated in slot and thus reduces the mapper initializing overhead.</p>
  </li>
  <li>
    <p>Use Combine file input format for bunch of smaller files. I had an implementation that also use <code>mapred.min.split.size</code> to implicitly control the mapper size. You can find the <a href="https://github.com/dryman/Hadoop-CombineFileInputFormat">project on github</a>. The explanation of the project can be found on <a href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1/">my blog</a>.</p>
  </li>
</ul>

<p>The configuration file would look like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.job.reuse.jvm.num.tasks<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>-1<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.max.split.size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>268435456<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>mapred.min.split.size<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>134217728<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="use-configuration-file-and-command-line-arguments-to-set-parameters">Use configuration file and command line arguments to set parameters</h3>

<p>When I first started on hadoop, I setup those parameters in java program, but it is so hard-coded and inflexible. Thankfully, hadoop provides <code>Tool</code> interface and <code>ToolRunner</code> class to parse those parameters for you. Here’s a sample program:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExampleJob</span> <span class="kd">extends</span> <span class="n">Configured</span> <span class="kd">implements</span> <span class="n">Tool</span><span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">ExampleJob</span><span class="o">(),</span> <span class="n">args</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">getConf</span><span class="o">();</span>
</span><span class="line">    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class="line">    <span class="c1">// configure the rest of the job</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your main class implements the interface, your program can take the config file as input:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar ExampleJob-0.0.1.jar ExampleJob -conf my-conf.xml arg0 arg1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You can even pass extra parameters through command line like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">hadoop jar ExampleJob-0.0.1.jar ExampleJob -Dmapred.reduce.tasks<span class="o">=</span>20 arg0 arg1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Setting configuration as run-time arguments make you easier to test different parameters without recompile the program.</p>

<h2 id="tuning-application-specific-performance">Tuning application-specific performance</h2>

<p>Beyond general hadoop parameter setup, you can optimize your map-reduce program using some small tricks. Here are the tricks that I used the most.</p>

<h3 id="minimize-your-mapper-output">Minimize your mapper output</h3>

<p>Recall that mapper spill size is a serious performance bottleneck. The size of mapper output is sensitive to disk IO, network IO, and memory sensitive on shuffle phase. Minimizing the mapper output can improve the general performance a lot.</p>

<p>To do this, you can try the following</p>

<ol>
  <li>
    <p>Filter out records on mapper side, not on reducer side.</p>
  </li>
  <li>
    <p>Use minimal data to form your map output key and map output value.</p>
  </li>
  <li>
    <p>Extends <code>BinaryComparable</code> interface or use Text for your map output key</p>
  </li>
  <li>
    <p>Set mapper output to be compressed</p>
  </li>
</ol>

<p>Above all the optimization tips, I found this make the biggest change to many of my tasks, unless I can’t find a smaller key to reduce the mapper output. </p>

<h3 id="balancing-reducers-loading">Balancing reducer’s loading</h3>

<p>Another common performance issue that you might encounter is unbalanced reducer tasks: one or several reducer takes most of the output from mapper and ran extremely long compare to other reducers.</p>

<p>To solve this, you can either</p>

<ol>
  <li>
    <p>Implement a better hash function in <code>Partitioner</code> class.</p>
  </li>
  <li>
    <p>If you know what keys are causing the issue, you can write a preprocess job to separate keys using MultipleOutputs. Then use another map-reduce job to process the special keys that cause the problem.</p>
  </li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>It’s fun to write raw map-reduce jobs because it gives you more precise control over performance tuning. If you already experienced hive or pig, I encourage you to try how to optimize the same job using raw map-reduce. You can find a lot of performance gain and more space to tune the performance. For more curious, you can also check the <a href="http://www.slideshare.net/ydn/hadoop-summit-2010-tuning-hadoop-to-deliver-performance-to-your-application">Yahoo’s tuning hadoop performance guides</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Jasper Server on Linux]]></title>
    <link href="http://www.idryman.org/blog/2014/02/26/setting-up-jasper-server-on-linux/"/>
    <updated>2014-02-26T13:26:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/02/26/setting-up-jasper-server-on-linux</id>
    <content type="html"><![CDATA[<p>Jasper is one of the standard report generator in the industry. However, setting up Jasper is a pain of ass. This post is my note for setting up Jasper on Linux, in case I have to do it again in the future…</p>

<!--more-->

<h3 id="setting-up-an-ubuntu-instance-on-amazon">Setting up an Ubuntu instance on Amazon</h3>

<p>The first thing you need to do when you launch an Amazon EC2 instance is add the hostname to hosts. Copy <code>/etc/hostname</code> to <code>/etc/hosts</code> like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">127.0.0.1 localhost ip-10-0-0-1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>ip-10-0-0-1</code> is the host name in your <code>/etc/hostname</code>. You’ll need this setup else the jasper installation script might fail.</p>

<h3 id="update-aptitude-and-install-postgresql">Update aptitude and install PostgresQL</h3>

<p>This section is referenced from <a href="https://help.ubuntu.com/10.04/serverguide/postgresql.html">Ubuntu PostgreSQL HowTo</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo apt-get update
</span><span class="line"><span class="nv">$ </span>sudo apt-get install postgresql
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After Postgres is installed, you’ll need to setup its permission and password, so that jasper can connect to it.</p>

<p>First, enable postgres to be reached from localhost. Edit <code>/etc/postgresql/9.1/main/postgresql.conf</code> and un-comment this line:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">listen_addresses</span> <span class="o">=</span> <span class="s1">&#39;localhost&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, login to postgres using postgres user:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo -u postgres psql
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You should be able to login without using password. Now, update your password:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="n">postgres</span><span class="o">=#</span> <span class="k">ALTER</span> <span class="k">USER</span> <span class="n">postgres</span> <span class="k">with</span> <span class="k">encrypted</span> <span class="n">password</span> <span class="s1">&#39;your_password&#39;</span><span class="p">;</span>
</span><span class="line"><span class="n">postgres</span><span class="o">=#</span> <span class="err">\</span><span class="n">q</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>After setting the password, edit the file <code>/etc/postgresql/9.1/main/pg_hba.conf</code> and set the <code>postgres</code> user to use md5 authentication.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">local</span>   <span class="k">all</span>             <span class="n">postgres</span>                                <span class="n">md5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, restart the postgres server:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo /etc/init.d/postgres restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="download-and-run-jasperserver-install-script">Download and run jasperserver install script</h3>

<p>Got to <a href="http://community.jaspersoft.com/download">Jaspersoft Downloads</a> and get the <code>jasperreports-server-cp-5.5.0-linux-x64-installer.run</code> script. In our case we run it as super user.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>chmod a+x jasperreports-server-cp-5.5.0-linux-x64-installer.run
</span><span class="line"><span class="nv">$ </span>sudo ./jasperreports-server-cp-5.5.0-linux-x64-installer.run
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You’ll go through several steps:</p>

<ol>
  <li>
    <p>It prints out the license. Read through it and select <code>y</code> when the prompt <code>Do you accept this license? [y/n]: y</code> shows up.</p>
  </li>
  <li>
    <p>It asks you to choose complete install or custom install. Choose <strong>custom</strong>.</p>
  </li>
  <li>
    <p>It asks you to select a folder for install destination. I chose the default <code>/opt/jasperreports-server-cp-5.5.0</code>.</p>
  </li>
  <li>
    <p>It asks you to use bundled tomcat or existing one. Choose <strong>bundled</strong>.</p>
  </li>
  <li>
    <p>It asks you to use bundled postgres or existing one. Choose <strong>existing</strong>.</p>
  </li>
  <li>
    <p>It asks you the Tomcat server port. Just use the default <code>8080</code>.</p>
  </li>
  <li>
    <p>It asks you postgres binary location. Use <code>/usr/lib/postgresql/9.1/bin</code>.</p>
  </li>
  <li>
    <p>It asks you host and port for postgres server. Use the default <code>127.0.0.1</code> and <code>5432</code>.</p>
  </li>
  <li>
    <p>It asks you the postgres password. Type it in.</p>
  </li>
  <li>
    <p>It asks you whether to install sample database and sample reports. Pick whatever you like.</p>
  </li>
  <li>
    <p>Proceed the rest of the installation.</p>
  </li>
</ol>

<p>Once you’re done with the installation. You can start the tomcat server using the command</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="setup-plsql-query-adapter">Setup plsql query adapter</h3>

<p>This section is referenced to <a href="http://community.jaspersoft.com/wiki/no-query-executer-factory-registered-plsql-language-jasperserver-51">Jaspersoft wiki</a>. We found that when selecting query language as <code>plsql</code>, jasperserver rejects the uploaded report.</p>

<p>To solve the issue, you’ll need to extend jasperserver with this plugin: <a href="http://www.java2s.com/Code/Jar/j/Downloadjasperreportsextensions353jar.htm">jasperreports-extensions-3.5.3.jar</a>. Download the jar, and place it to <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/webapps/jasperserver/WEB-INF/lib/</code>.</p>

<p>Now, cd to <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/webapps/jasperserver/WEB-INF</code>, and add one line to <code>classes/jasperreports.properties</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">net.sf.jasperreports.query.executer.factory.plsql<span class="o">=</span>com.jaspersoft.jrx.query.PlSqlQueryExecuterFactory
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Edit <code>flows/queryBeans.xml</code>. Change the line <code>&lt;property name="queryLanguages" ref="queryLanguages"&gt;</code> to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;queryLanguages&quot;</span> <span class="na">ref=</span><span class="s">&quot;queryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;list&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>hql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">  <span class="nt">&lt;/list&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Edit <code>applicationContext.xml</code>. Search for <code>supportedQueryLanguages</code> and change it to the following.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;com.jaspersoft.jasperserver.api.engine.jasperreports.util.DataSourceServiceDefinition&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;jdbcDataSourceServiceFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;supportedQueryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;set&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>SQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="c">&lt;!-- Add these two value lines for the Oracle PL/SQL Language --&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>PLSQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">        <span class="nt">&lt;/set&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/bean&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;com.jaspersoft.jasperserver.api.engine.jasperreports.util.DataSourceServiceDefinition&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;serviceBeanName&quot;</span> <span class="na">value=</span><span class="s">&quot;jndiJdbcDataSourceServiceFactory&quot;</span><span class="nt">/&gt;</span>
</span><span class="line">    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;supportedQueryLanguages&quot;</span><span class="nt">&gt;</span>
</span><span class="line">        <span class="nt">&lt;set&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>sql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>SQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="c">&lt;!-- Add these two value lines for the Oracle PL/SQL Language --&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>plsql<span class="nt">&lt;/value&gt;</span>
</span><span class="line">            <span class="nt">&lt;value&gt;</span>PLSQL<span class="nt">&lt;/value&gt;</span>
</span><span class="line">
</span><span class="line">            <span class="nt">&lt;/set&gt;</span>
</span><span class="line">        <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/bean&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, restart the jasper server.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh stop
</span><span class="line"><span class="nv">$ </span>/opt/jasperreports-server-cp-5.5.0/ctlscript.sh start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="increase-jasper-memory-usage">Increase Jasper memory usage</h3>

<p>More specifically, tomcat’s memory usage. The default memory setting is quite low and jasper is pretty in-responsive to user clicks. To change the setting, edit <code>/opt/jasperreports-server-cp-5.5.0/apache-tomcat/scripts/ctl.sh</code> and change the two <code>JAVA_OPTS</code> to</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">JAVA_OPTS</span><span class="o">=</span><span class="s2">&quot;-server -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=512m -Xss2m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Djava.awt.headless=true&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Relaunch your jasper server again. Now it should run more smoothly.</p>

<h2 id="conclusion">Conclusion</h2>

<p>ITS A PAIN TO RUN JASPER…</p>

<p>Thanks to all the people that wrote wiki and articles to help me out. I hope I’ll never need to set it up again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture path info in hadoop InputFormat class]]></title>
    <link href="http://www.idryman.org/blog/2014/01/27/capture-path-info-in-hadoop-inputformat-class/"/>
    <updated>2014-01-27T15:11:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/27/capture-path-info-in-hadoop-inputformat-class</id>
    <content type="html"><![CDATA[<p>On the last post I presented how to use Mapper context object to obtain Path information. This is a nice way to hack for ad-hoc jobs; however, it’s not really reusable and abstract. In this post, I’ll show you how to subclass <code>Text</code>, <code>TextInputFormat</code>, and <code>LineRecordReader</code> and create reusable components across all of your hadoop tasks.</p>

<!--more-->

<h2 id="input-workflow">Input WorkFlow</h2>

<p>Before we go through all the classes, let me show you how hadoop read the files in.</p>

<ol>
  <li>
    <p>By default, hadoop uses <code>TextInputFormat</code>, which inherits <code>FileInputFormat</code>, to process the input files.</p>
  </li>
  <li>
    <p><code>TextInputFormat</code> allocates <code>LineRecordReader</code> and passed it to <code>Task</code> runtime.</p>
  </li>
  <li>
    <p><code>Task</code> first initiates <code>LineRecordReader</code>, then wrap the <code>LineRecordReader</code> into <code>Context</code> object.</p>
  </li>
  <li>
    <p>In <code>Mapper</code> <code>run</code> methods, it calls the method <code>nextKeyValue()</code> in <code>Context</code>, and reads the <code>LongWritable key</code> from <code>context.getCurrentKey()</code> and <code>Text value</code> from <code>context.getCurrentValue()</code>. Those methods delegates to <code>LineRecordReader</code>’s methods <code>nextKeyValue()</code>, <code>getCurrentKey()</code>, and <code>getCurrentValue()</code>.</p>
  </li>
  <li>
    <p>Finally, <code>Mapper</code> passes the key-value pair to <code>map</code> method that we usually overrides.</p>
  </li>
</ol>

<p>In order to put the path information into this workflow, we can extend the <code>Text</code> class and put the path information into it. To make this work, we need to create three new classes: <code>TextWithPath</code>, <code>TWPInputFormat</code>, and <code>TWPRecordReader</code>.</p>

<h2 id="textwithpathjava">TextWithPath.java</h2>

<p>Here is our content wrapper – <code>TextWithPath</code>. It doesn’t do much; there’s a new constructor which accepts <code>Path</code>, and there’s a getter method to get <code>Path</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextWithPath</span> <span class="kd">extends</span> <span class="n">Text</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="nf">TextWithPath</span><span class="o">(</span><span class="n">Path</span> <span class="n">path</span><span class="o">){</span>
</span><span class="line">    <span class="kd">super</span><span class="o">();</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="n">Path</span> <span class="nf">getPath</span><span class="o">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="twpinputformatjava">TWPInputFormat.java</h2>

<p>The new <code>TWPInputFormat</code> is almost identical to <code>TextInputFormat</code>, except it uses <code>TextWithPath</code> instead of <code>Text</code>, and the <code>createRecordReader</code> method returns <code>TWPRecordReader</code> instead of <code>LineRecordReader</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.CompressionCodec</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.CompressionCodecFactory</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.compress.SplittableCompressionCodec</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.JobContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileInputFormat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TWPInputFormat</span> <span class="kd">extends</span> <span class="n">FileInputFormat</span> <span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">TextWithPath</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">RecordReader</span> <span class="nf">createRecordReader</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">split</span><span class="o">,</span>
</span><span class="line">      <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">String</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">().</span><span class="na">get</span><span class="o">(</span>
</span><span class="line">        <span class="s">&quot;textinputformat.record.delimiter&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="kt">byte</span><span class="o">[]</span> <span class="n">recordDelimiterBytes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">delimiter</span><span class="o">)</span>
</span><span class="line">      <span class="n">recordDelimiterBytes</span> <span class="o">=</span> <span class="n">delimiter</span><span class="o">.</span><span class="na">getBytes</span><span class="o">();</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="nf">TWPRecordReader</span><span class="o">(</span><span class="n">recordDelimiterBytes</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSplitable</span><span class="o">(</span><span class="n">JobContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Path</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">CompressionCodec</span> <span class="n">codec</span> <span class="o">=</span>
</span><span class="line">      <span class="k">new</span> <span class="nf">CompressionCodecFactory</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">()).</span><span class="na">getCodec</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">==</span> <span class="n">codec</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">codec</span> <span class="k">instanceof</span> <span class="n">SplittableCompressionCodec</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="twprecordreaderjava">TWPRecordReader.java</h2>

<p>Finally, in the <code>TWPRecordReader</code>, this is where I put my logic in. In the <code>initialize</code> method, you can get the <code>FileSplit</code> and get the <code>Path</code> object out of it. Next, let’s override <code>nextKeyValue</code>, and updates the <code>value</code> on every call. Lastly, remember to override <code>getCurrentValue()</code>, else it will only return parent’s value (Text), not the value with <code>TextWithPath</code> class.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.FileSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.LineRecordReader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TWPRecordReader</span> <span class="kd">extends</span> <span class="n">LineRecordReader</span><span class="o">{</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">TextWithPath</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="nf">TWPRecordReader</span><span class="o">(</span><span class="kt">byte</span><span class="o">[]</span> <span class="n">recordDelimiterBytes</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">(</span><span class="n">recordDelimiterBytes</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">genericSplit</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">    <span class="kd">super</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="n">genericSplit</span><span class="o">,</span> <span class="n">context</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileSplit</span> <span class="n">split</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">genericSplit</span><span class="o">;</span>
</span><span class="line">    <span class="n">path</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextKeyValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">nextKeyValue</span><span class="o">()){</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TextWithPath</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">      <span class="n">value</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kd">super</span><span class="o">.</span><span class="na">getCurrentValue</span><span class="o">());</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">      <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">TextWithPath</span> <span class="nf">getCurrentValue</span><span class="o">(){</span>
</span><span class="line">    <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="demo">Demo</h2>

<p>Here is a demo code to test the output. In addition to normal map reduce tasks, we set the input format class to <code>TWPInpuFormat</code>; on the Mapper side, we expect the input is <code>TextWithPath</code>, not <code>Text</code>. The whole program can be downloaded from this github repo. <a href="https://github.com/dryman/Hadoop-TextWithPath">Hadoop TextWithPath</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configuration</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.conf.Configured</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.IntWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.LongWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.NullWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Mapper</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.output.FileOutputFormat</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.reduce.IntSumReducer</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.Tool</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.ToolRunner</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoRun</span> <span class="kd">extends</span> <span class="n">Configured</span> <span class="kd">implements</span> <span class="n">Tool</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="k">new</span> <span class="n">Configuration</span><span class="o">(),</span> <span class="k">new</span> <span class="n">DemoRun</span><span class="o">(),</span> <span class="n">args</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">run</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="n">getConf</span><span class="o">();</span>
</span><span class="line">    <span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">conf</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setJobName</span><span class="o">(</span><span class="s">&quot;test TextWithPath Input&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setJarByClass</span><span class="o">(</span><span class="n">DemoRun</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">TWPInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">TWPInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">TestMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputKeyClass</span><span class="o">(</span><span class="n">Text</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setMapOutputValueClass</span><span class="o">(</span><span class="n">NullWritable</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setReducerClass</span><span class="o">(</span><span class="n">IntSumReducer</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class="line">
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span><span class="line">    <span class="n">job</span><span class="o">.</span><span class="na">waitForCompletion</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">TestMapper</span> <span class="kd">extends</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">LongWritable</span><span class="o">,</span> <span class="n">TextWithPath</span><span class="o">,</span> <span class="n">Text</span><span class="o">,</span> <span class="n">IntWritable</span><span class="o">&gt;{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Only override `run` instead of `map` method; because we just want to see one output</span>
</span><span class="line"><span class="cm">     * per mapper, instead of printing every line.</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span><span class="o">{</span>
</span><span class="line">      <span class="n">context</span><span class="o">.</span><span class="na">nextKeyValue</span><span class="o">();</span>
</span><span class="line">      <span class="n">TextWithPath</span> <span class="n">twp</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCurrentValue</span><span class="o">();</span>
</span><span class="line">      <span class="n">context</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="k">new</span> <span class="n">Text</span><span class="o">(</span><span class="n">twp</span><span class="o">.</span><span class="na">getPath</span><span class="o">().</span><span class="na">toString</span><span class="o">()),</span> <span class="k">new</span> <span class="n">IntWritable</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="one-more-thing">One more thing</h2>

<p>I wrote another hadoop utility that reads a header file from HDFS input source, and passes a <code>FieldWritable</code> object to <code>Mapper</code> class instead of <code>Text</code>. The <code>FieldWritable</code> implements <code>Map</code> interface and can obtain TSV fields by it’s header key. The project is on <a href="https://github.com/dryman/hadoop-fieldformat">github</a> but still highly experimental. Once the API and implementation is stable, I’ll write another post to introduce it. Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capture directory context in Hadoop Mapper]]></title>
    <link href="http://www.idryman.org/blog/2014/01/26/capture-directory-context-in-hadoop-mapper/"/>
    <updated>2014-01-26T15:12:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/26/capture-directory-context-in-hadoop-mapper</id>
    <content type="html"><![CDATA[<p>I have been using hadoop for data processing and datawarehousing for a while. One of the problem we encountered was map-reduce framework abstracts the input from files to lines, and thus it’s really difficult to apply logic based on different file or directories. Things got worse when we need to aggregate data across various versions of input sources. After digging in Hadoop source code, here is my solution.</p>

<!--more-->

<h2 id="meets-inputsplit-in-mapper">Meets InputSplit in Mapper</h2>

<p>Here is the first solution, it’s a bit ugly but works. In Hadoop <code>Mapper</code> class, you can override the <code>setup</code> method to initiate mapper with corresponding context. The context contains <code>inputSplit</code>, which can be cast to <code>FileInputSplit</code>, and contains the file and directory information in it. This is how I did it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileSplit</span> <span class="n">fileSplit</span><span class="o">;</span>
</span><span class="line">  <span class="n">InputSplit</span> <span class="n">is</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getInputSplit</span><span class="o">();</span>
</span><span class="line">  <span class="n">FileSystem</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">FileSystem</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">());</span>
</span><span class="line">  <span class="n">fileSplit</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">is</span><span class="o">;</span>
</span><span class="line">  <span class="n">Path</span> <span class="n">filePath</span> <span class="o">=</span> <span class="n">fileSplit</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If the input directory looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00000</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00001</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00002</span>
</span><span class="line">       <span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00003</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And the path argument you passed to <code>FileInputFormat</code> is <code>/input</code>. The resulting paths in the snippet would be one of these:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00000</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00001</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00002</span>
</span><span class="line"><span class="o">/</span><span class="n">input</span><span class="o">/</span><span class="n">part</span><span class="o">-</span><span class="n">r</span><span class="o">-</span><span class="mi">00003</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Each Mapper would get different <strong>file</strong> path instead of getting the directory <code>/input</code>. If you want to handle the logic better, you can do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Path</span> <span class="n">finalPath</span><span class="o">;</span>
</span><span class="line"><span class="k">if</span> <span class="o">(</span><span class="n">fs</span><span class="o">.</span><span class="na">isFile</span><span class="o">(</span><span class="n">filePath</span><span class="o">)){</span>
</span><span class="line">  <span class="n">finalPath</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">filePath</span><span class="o">.</span><span class="na">getParrent</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">  <span class="n">finalPath</span> <span class="o">=</span> <span class="n">filePath</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="taggedinputsplit">TaggedInputSplit</h2>

<p>This works for most of the time; however, if you set the input to be <code>/input/*/part*</code>. The <code>InputSplit</code> would be an internal type called <code>TaggedInputSplit</code> instead of <code>FileInputSplit</code>. Although <code>TaggedInputSplit</code> has a method called <code>getInputSplit</code> to get the wrapped class, it is a private class and you can only use java reflection to hack it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">InputSplit</span> <span class="n">is</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getInputSplit</span><span class="o">();</span>
</span><span class="line"><span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">&quot;getInputSplit&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">method</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">fileSplit</span> <span class="o">=</span> <span class="o">(</span><span class="n">FileSplit</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>
</span><span class="line"><span class="n">Path</span> <span class="n">filePath</span> <span class="o">=</span> <span class="n">fileSplit</span><span class="o">.</span><span class="na">getPath</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="more-general-solutions">More general solutions</h2>

<p>The solutions above is working on production environment. However, it is a bit too hacky and not general enough. On the next post, I’ll show you how to implement <code>InputFomrat</code>, <code>RecordReader</code>, and <code>Writable</code> classes to solve this problem with lower level APIs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Monad Tutorial in 15 Minutes]]></title>
    <link href="http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial/"/>
    <updated>2014-01-23T19:21:00-08:00</updated>
    <id>http://www.idryman.org/blog/2014/01/23/yet-another-monad-tutorial</id>
    <content type="html"><![CDATA[<p>Functional programming has become popular these days, but unlike object-oriented languages, each FP language is so different from the other. Some of these use strict evaluation while others use lazily evaluated models; tons of new concurrent models were introduced; further more, states are handled differently too.</p>

<p>Haskell, for example, does not have states, but uses its powerful type system to construct the stateful program flow normally used in other languages. As you might guess, Monad is one of the type that does the trick. Defining a Monad type is pretty much like defining a class in an object oriented language. However, Monad can do much more than a class. It’s a type that can be used for exception handling, constructing parallel program workflow or even a parser generator!</p>

<p>By learning Monad, You’ll know a different perspective of how to program, and rethink the composition of data logic beyond the object-oriented programming kingdom.</p>

<!--more-->

<h2 id="what-is-a-type">What is a type</h2>

<p>Before we jump into Monad itself, let’s quickly go through the type systems. What is a type? We usually think of type as a static thing like <code>int</code> or <code>float</code>, but actually, type is more dynamic; <strong>types are the rules associated with the data, not the actual data itself</strong>. It is important to remember this point.</p>

<p>For example, an <code>int</code> is treated as <code>int</code> only when you use <code>addl</code> CPU instruction to present <code>+</code> operation on a 64 bit machine. On the other hand, <code>float</code> uses <code>addss</code> the instruction for <code>+</code> and <code>%xmm</code> registers for computations. It’s the <em>rules</em>, or the <em>generated instructions</em>, that define the type.</p>

<p>The whole concept of Object-Oriented Programming is to let you use classes/interfaces to define types, the rules (methods) that interacts with the actual data. For more advanced needs people use templates(c++) or generics(java) to define more abstracted rules that are more reusable. Monad, is pretty much like that generic class.</p>

<p>Now we understand what a type is; it’s just a set of rules, or methods in Object-Oriented terms. A Monad, is just yet another type, and the definition of this type is defined by four rules:</p>

<ol>
  <li>bind <code>(&gt;&gt;=)</code></li>
  <li>then <code>(&gt;&gt;)</code></li>
  <li><code>return</code></li>
  <li><code>fail</code></li>
</ol>

<p>By going through these four rules and looking at the examples below, you’ll understand what a Monad is and why is it so awesome and powerful!</p>

<h2 id="monad-lesson-1-the-bind-operator-">Monad lesson 1: the bind operator <code>(&gt;&gt;=)</code></h2>

<p>The Monad bind operator is a function type signature. A type signature is like an abstract method defined in an abstract class:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span>  <span class="kt">Monad</span> <span class="n">m</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">(</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span><span class="p">)</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You may not familiar with Haskell syntax, but actually it’s pretty straight forward.</p>

<p><img width="60%" style="margin-left:20%;" src="http://www.idryman.org/images/monad/type-signature.png" /></p>

<p>It takes 2 inputs and returns an output.</p>

<ol>
  <li>
    <p>A Monad that contains type <code>a</code> as the first input</p>
  </li>
  <li>
    <p>A function <code>(a -&gt; m b)</code> as the second input. <code>(a -&gt; m b)</code> is a first order function that takes <code>a</code> as input, and returns Monad <code>m b</code>. You can think of this as a delegate design pattern in Object-Oriented world, except you don’t need to pass in a whole object, but only a function itself is sufficient.</p>
  </li>
  <li>
    <p>The implementation will return Monad <code>m b</code> as a result.</p>
  </li>
</ol>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/monad/monad-structure.png" /></p>

<p>Why is this definition powerful? Well, one benefit is that you can wrap common logic in Monad and save yourself time.</p>

<hr />

<h2 id="application-1-exception-handling">Application 1: exception handling</h2>

<p>Exception handling is always a pain in the ass. Lets demonstrate how to use a Monad to reduce the code size and un-nest if-else blocks.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">=</span> <span class="n">io_function1</span><span class="p">(</span> <span class="n">input1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">output1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* do some logic */</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">=</span> <span class="n">io_function2</span><span class="p">(</span> <span class="n">input2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">output2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">         * some more logic</span>
</span><span class="line"><span class="cm">         * and maybe more nested functions</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">      <span class="cm">/* handle error 2 */</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">    <span class="cm">/* handle error 1 */</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- need to fix this part -->
<p>There’s nothing wrong with nested if-else blocks. The logic is straightforward and easy to understand. To un-nest the if-else statements, there are several ways to do it. You can either use a <code>goto</code> statement and pass the control to a barrier label, or use try-catch block in C++ or a similar language that supports it. Or, here comes the Maybe Monad for the rescue!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">data</span>  <span class="kt">Maybe</span> <span class="n">a</span>  <span class="ow">=</span>  <span class="kt">Nothing</span> <span class="o">|</span> <span class="kt">Just</span> <span class="n">a</span>
</span><span class="line">
</span><span class="line"><span class="kr">instance</span>  <span class="kt">Monad</span> <span class="kt">Maybe</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="n">x</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span> <span class="n">x</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;=</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>A Maybe Monad has two constructors: <code>Nothing</code> and <code>Just a</code>. It’s a simple kind of error Monad, where all errors are represented by <code>Nothing</code>. The rules are simple:</p>

<ol>
  <li>If the first input <code>M a</code> is <code>Just x</code>, run the second input (the function) with value <code>x</code></li>
  <li>If the first input is <code>Nothing</code>, just return <code>Nothing</code></li>
</ol>

<p>When you combine several Maybe Monad handling functions together, if one of the upstream function went wrong by returning <code>Nothing</code>, all the downstream function(s) won’t be executed.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">maybeHalf</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">Maybe</span> <span class="kt">Int</span>         <span class="c1">-- Haskell type definition</span>
</span><span class="line"><span class="nf">maybeHalf</span> <span class="n">a</span>                           <span class="c1">-- Actual function body</span>
</span><span class="line">         <span class="o">|</span> <span class="n">even</span> <span class="n">a</span> <span class="ow">=</span> <span class="kt">Just</span> <span class="p">(</span><span class="n">div</span> <span class="n">a</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">         <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first line is Haskell function type definition. <code>maybeHalf</code> takes an <code>Int</code> and returns <code>Maybe Int</code> type. Other than that, the function body tells us:</p>

<ol>
  <li>
    <p>If input <code>a</code> is even, return <code>a / 2</code> wrapped in <code>Maybe</code> Monad constructor <code>Just</code>.</p>
  </li>
  <li>
    <p>Otherwise, return <code>Maybe</code> Monad constructor <code>Nothing</code>.</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Just</span> <span class="mi">5</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Nothing</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="kt">Just</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span> <span class="o">&gt;&gt;=</span> <span class="n">maybeHalf</span>
</span><span class="line"><span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Cool, now the nested if-else logic is replaced! What do we learn from this?</p>

<ol>
  <li>
    <p>Error handling if-else logic is encapsulated from the user.</p>
  </li>
  <li>
    <p>User can use the defined data type <code>Just a</code> or <code>Nothing</code> to <strong>lift</strong> the information (correct or error) to upper Monad.</p>
  </li>
</ol>

<p>A programming language’s type system deeply colors the way we think and write code in that language.
In the object-oriented kingdom, we use objects to encapsulate error messages,
and then code the program to throw the exception upwards and hopefully the try-catch block will capture it and handle the error gracefully.
In contrast, you can use a type to build the try-catch block, and also encapsulate error or success state!</p>

<h2 id="application-2-accumulate-states">Application 2: accumulate states</h2>

<p>So far, we’ve seen that Monad can help us wrap common (usually nested) logic into a type.
User can <strong>lift</strong> the data to the upward Monad, and Monad will do the if-else logic for you.
Nevertheless, Monad can do more for you! <code>Maybe</code> Monad only passes the data to the next
user defined function, and here we introduce the <code>Writer</code> Monad, which will accumulate the
data you lift to it.</p>

<h4 id="writer-monad-type-definition">Writer Monad, type definition</h4>

<p>Here is the type definition of Writer Monad:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">instance</span> <span class="p">(</span><span class="kt">Monoid</span> <span class="n">w</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="kt">Monad</span> <span class="p">(</span><span class="kt">Writer</span> <span class="n">w</span><span class="p">)</span> <span class="kr">where</span>
</span><span class="line">    <span class="n">return</span> <span class="n">x</span> <span class="ow">=</span> <span class="kt">Writer</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">mempty</span><span class="p">)</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Writer</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">v</span><span class="p">))</span> <span class="o">&gt;&gt;=</span> <span class="n">f</span> <span class="ow">=</span> <span class="kr">let</span> <span class="p">(</span><span class="kt">Writer</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">v&#39;</span><span class="p">))</span> <span class="ow">=</span> <span class="n">f</span> <span class="n">x</span> <span class="kr">in</span> <span class="kt">Writer</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">v</span> <span class="p">`</span><span class="n">mappend</span><span class="p">`</span> <span class="n">v&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Don’t be scared! Writer Monad uses <code>Monoid</code> to concat the data you lift to it.
<code>Monoid</code> defines <code>mempty</code> and <code>mappend</code> functions. <code>mappend</code>, as it’s name suggests, appends
the data you passed to it; and <code>mempty</code> is just an empty element.
<code>mappend</code> and <code>mempty</code> are just abstract ways to merge data together.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class="line"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="s">&quot;hello &quot;</span> <span class="s">&quot;world&quot;</span>
</span><span class="line"><span class="s">&quot;hello world&quot;</span>
</span><span class="line"><span class="kt">Prelude</span> <span class="kt">Data</span><span class="o">.</span><span class="kt">Monoid</span><span class="o">&gt;</span> <span class="n">mappend</span> <span class="s">&quot;hello &quot;</span> <span class="n">mempty</span>
</span><span class="line"><span class="s">&quot;hello &quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Writer Monad’s definition simply takes the return value of user defined function <code>f</code>, extracts
the value <code>v'</code> out of it, and uses <code>mappend</code> to append the old <code>v</code> and new <code>v'</code>.</p>

<h4 id="writer-monad-in-action">Writer Monad, in action</h4>

<p>Let me take a modified example from <a href="http://learnyouahaskell.com/for-a-few-monads-more">Learn You a Haskell for Great good</a>. To log the process of deriving the greatest common divisor, we can do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">import</span> <span class="nn">Control.Monad.Writer</span>
</span><span class="line">
</span><span class="line"><span class="nf">gcd&#39;</span> <span class="ow">::</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="kt">Writer</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span>
</span><span class="line"><span class="nf">gcd&#39;</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">]</span>
</span><span class="line">    <span class="o">|</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class="line">        <span class="n">tell</span> <span class="p">[</span><span class="s">&quot;Finished with &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">a</span><span class="p">]</span>
</span><span class="line">        <span class="n">return</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class="line">    <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kr">do</span>
</span><span class="line">        <span class="n">tell</span> <span class="p">[</span><span class="n">show</span> <span class="n">a</span> <span class="o">++</span> <span class="s">&quot; mod &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="n">b</span> <span class="o">++</span> <span class="s">&quot; = &quot;</span> <span class="o">++</span> <span class="n">show</span> <span class="p">(</span><span class="n">a</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">b</span><span class="p">)]</span>
</span><span class="line">        <span class="n">return</span> <span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span> <span class="p">`</span><span class="n">mod</span><span class="p">`</span> <span class="n">b</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The Writer Monad does not have a constructor like Maybe Monad does, so you need to use <code>tell</code> and <code>return</code> to build the Writer Monad and return it back. To show the result of the writer log, you’ll also need function <code>runWriter</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class="line"><span class="p">([</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span>
</span><span class="line"><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">,</span><span class="s">&quot;3 mod 2 = 1&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">runWriter</span> <span class="o">$</span> <span class="n">gcd&#39;</span> <span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span> <span class="o">&gt;&gt;=</span> <span class="n">gcd&#39;</span>
</span><span class="line"><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="s">&quot;8 mod 3 = 2&quot;</span><span class="p">,</span><span class="s">&quot;3 mod 2 = 1&quot;</span><span class="p">,</span><span class="s">&quot;2 mod 1 = 0&quot;</span><span class="p">])</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="monad-lesson-2-the-then-operator-">Monad Lesson 2: the then operator <code>&gt;&gt;</code></h2>

<p>So, now we learned you can put different logic into a Monad to operate states. All the state passing is done by the bind operator <code>&gt;&gt;=</code>, which wraps the data and passes it to the downstream handler. However, Sometimes, we don’t care about the wrapped value and just want to pass the state downstream. For example, performing side effects.</p>

<p>The definition of <em>then</em> operator <code>&gt;&gt;</code> looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="ow">::</span> <span class="n">m</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">b</span>
</span><span class="line">    <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">x</span> <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="kr">_</span> <span class="ow">-&gt;</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Unlike <em>bind</em> operator <code>&gt;&gt;=</code> which unwraps the value passed between user defined functions, <em>then</em> operator ignores the wrapped value (it uses <code>_</code> as variable) and only captures the states <code>x</code> and <code>y</code>.</p>

<p>What is the use case of this? Recall that Haskell is a purely a functional language that doesn’t have states or variables; However, the Monad system can encapsulate hidden states, so the solution is to put a hidden <code>#realworld#</code> variable in <code>IO Monad</code> that records the standard input-output status, and also the file seek position, etc.</p>

<h2 id="application-3-io-monad">Application 3: IO Monad</h2>

<p>It’s easier to understand in examples. Let’s try the <code>putStrLn</code> function, which takes a <code>String</code>, and returns an <code>IO Monad</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">putStrLn</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since it doesn’t need to take things from standard input, we have no need to <em>bind</em> variables.
The usage is trivial:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;hello, world&quot;</span>
</span><span class="line"><span class="nf">hello</span><span class="p">,</span> <span class="n">world</span>
</span><span class="line"><span class="o">*</span><span class="kt">Main</span><span class="o">&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;hello, world&quot;</span> <span class="o">&gt;&gt;</span> <span class="n">putStrLn</span> <span class="s">&quot;baby&quot;</span>
</span><span class="line"><span class="nf">hello</span><span class="p">,</span> <span class="n">world</span>
</span><span class="line"><span class="nf">baby</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>With every <code>&gt;&gt;</code> operator, the <code>IO ()</code> Monad changes the <code>#realworld#</code> variable in the background. It’s just like <code>Writer</code> Monad changes the accumulated states, but more abstract. For more details about the <code>IO ()</code> Monad, please visit <a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a>.</p>

<h3 id="do-notation">do notation</h3>

<p>For convenience, Haskell provides us <strong>do notation</strong> to simplify the writing of <em>bind</em> and <em>then</em>, so instead of writing:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="n">putStr</span> <span class="s">&quot;What is your name?&quot;</span>
</span><span class="line">       <span class="o">&gt;&gt;</span> <span class="n">readLn</span>
</span><span class="line">       <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">putStr</span> <span class="s">&quot;How old are you?&quot;</span>
</span><span class="line">       <span class="o">&gt;&gt;</span> <span class="n">readLn</span>
</span><span class="line">       <span class="o">&gt;&gt;=</span> <span class="nf">\</span><span class="n">b</span> <span class="ow">-&gt;</span> <span class="n">print</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>you can write:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">main</span> <span class="ow">=</span> <span class="kr">do</span> <span class="n">putStr</span> <span class="s">&quot;What is your name?&quot;</span>
</span><span class="line">          <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class="line">          <span class="n">putStr</span> <span class="s">&quot;How old are you?&quot;</span>
</span><span class="line">          <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">readLn</span>
</span><span class="line">          <span class="n">print</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This example is taken from <a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a>. All the Monads above can be rewritten in this form. Hooray!</p>

<h2 id="monad-lesson-3-return-and-fail">Monad Lesson 3: <code>return</code> and <code>fail</code></h2>

<p>We only have two functions left to describe Monad, which are <code>return</code> and <code>fail</code>. Actually, we already know them! The complete <code>Maybe</code> definition is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">instance</span>  <span class="kt">Monad</span> <span class="kt">Maybe</span>  <span class="kr">where</span>
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="n">x</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span> <span class="n">x</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;=</span> <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class="line">
</span><span class="line">    <span class="p">(</span><span class="kt">Just</span> <span class="kr">_</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="n">k</span>      <span class="ow">=</span> <span class="n">k</span>
</span><span class="line">    <span class="kt">Nothing</span>  <span class="o">&gt;&gt;</span>  <span class="kr">_</span>      <span class="ow">=</span> <span class="kt">Nothing</span>
</span><span class="line">
</span><span class="line">    <span class="n">return</span>              <span class="ow">=</span> <span class="kt">Just</span>
</span><span class="line">    <span class="n">fail</span> <span class="kr">_</span>              <span class="ow">=</span> <span class="kt">Nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>return</code> function is the wrapper that we have used so far, and <code>fail</code> is the function to represent, as you can guess, failure. The definition of <code>return</code> and <code>fail</code> in Monad is:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="kr">class</span> <span class="kt">Monad</span> <span class="n">m</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">return</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span><span class="line">  <span class="n">fail</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="n">m</span> <span class="n">a</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>fail</code> can take an additional string to report the failure message. With <em>bind</em>, <em>then</em>, <em>return</em>, and <em>fali</em> functions, we then know the whole definition of the Monad type!</p>

<h2 id="monad-lesson-4-beyond-states">Monad Lesson 4: Beyond states</h2>

<p>So far, we introduced <code>Maybe</code>, <code>Writer</code>, and <code>IO ()</code> Monads which use states heavily, but Monad can do more than abstract states. Remember, the core of Monad type is to wrap around logic. One of the applications it can do is define work flow. Here comes the <a href="http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#fig_rpar_rpar">Eval Monad</a> to the rescue; let’s take a look on the example in the online book:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="hs"><span class="line"><span class="nf">runEval</span> <span class="o">$</span> <span class="kr">do</span>
</span><span class="line">   <span class="n">a</span> <span class="ow">&lt;-</span> <span class="n">rpar</span> <span class="p">(</span><span class="n">f</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">   <span class="n">b</span> <span class="ow">&lt;-</span> <span class="n">rpar</span> <span class="p">(</span><span class="n">f</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">   <span class="n">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Once you wrap the function <code>f</code> in <code>Eval</code> Monad, it generates the logic to evaluate the code in parallel. You can further use the combination of the <code>rpar</code> and <code>rseq</code> functions defined by <code>Eval</code>, to construct the dependencies of each individual job. Check the link for more details!</p>

<p>Another nontrivial example of Monad is <a href="http://www.haskell.org/haskellwiki/Parsec">Parsec parser combinator library</a>. In this case, the wrapped logic is used for generating a parser from smaller components. Read <a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a> to explore this decent Monad!</p>

<h2 id="conclusion">Conclusion</h2>

<p>I started to learn Haskell a while ago, but I found explaining what a Monad type is in a easy way was extremely difficult. The final approach I choose was to break it down into four functions and explore them through examples. 
I found this helped me understand it better, and I hope it helps you out as well!</p>

<p>Once you understand what the Monad type is, you can easily use for all sorts of Haskell libraries on the fly. In the Haskell world, Monad is THE design pattern that is used for almost every important library. Functional programming introduced a different way to convolute the logic and data. It’s also elegant and powerful. I hope you enjoyed reading this post!</p>

<p>Any comments are welcome. ;)</p>

<h2 id="references">References</h2>

<ul>
  <li>
    <p><a href="http://www.leonardoborges.com/writings/2012/12/08/monads-in-small-bites-part-iv-monads/">Monads in small bites</a></p>
  </li>
  <li>
    <p><a href="http://www.haskell.org/haskellwiki/IO_inside">IO inside - HaskellWiki</a></p>
  </li>
  <li>
    <p><a href="http://learnyouahaskell.com/for-a-few-monads-more">Learn You a Haskell for Great good</a></p>
  </li>
  <li>
    <p><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch02.html#fig_rpar_rpar">Eval Monad</a></p>
  </li>
  <li>
    <p><a href="http://www.haskell.org/haskellwiki/Parsec">Parsec parser combinator library</a></p>
  </li>
  <li>
    <p><a href="http://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 hours</a></p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert utf8 literals in Java]]></title>
    <link href="http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java/"/>
    <updated>2013-10-03T20:37:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/10/03/convert-uf8-literals-in-java</id>
    <content type="html"><![CDATA[<p>I thought this problem is already been solved, but it’s not: consider a string like <code>\xe6\x84\x8f\xe6\xb3\x95\xe5\x8d\x8a\xe5\xaf\xbc hello world</code>, how can you transform it to an utf8 encoded string <code>意法半导 hello world</code>? Note that the string you get is encoded in ascii encoding, not utf8; the original utf8 is transfered into hex literals. I thought that I can use whatever library I found on the first result returned by google, but actually there’s no trivial solution out there on the web.</p>

<!--more-->

<h2 id="icu4j">ICU4J</h2>

<p>The only library that you can use for handling utf8 on java platform, is <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a>. THE Unicode processing library devloped by IBM. If you know any other library that can process the literal string, please tell me, I’ll be really appreciated.</p>

<p>With <a href="http://icu-project.org/apiref/icu4j/">ICU4J</a> you can use <code>com.ibm.icu.impl.Utility.unescape(String s)</code> to convert the literal string to utf8 string. However, java string internally doesn’t use utf8 encoding, instead it uses UTF-16 (Big Endian) to present unicode characters. To fully convert the string from utf8 literal to java unicode representation, you need to decode it with <strong>ISO-8859-1</strong> then read the bytes back to string using encoding <strong>UTF-8</strong>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">com.ibm.icu.impl.Utility</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf_literals</span> <span class="o">=</span> <span class="s">&quot;\\xe6\\x84\\x8f\\xe6\\xb3\\x95\\xe5\\x8d\\x8a\\xe5\\xaf\\xbc hello world&quot;</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="n">String</span> <span class="n">utf8_str</span> <span class="o">=</span> <span class="n">Utility</span><span class="o">.</span><span class="na">unescape</span><span class="o">(</span><span class="n">utf_literals</span><span class="o">);</span>
</span><span class="line"><span class="kt">byte</span><span class="o">[]</span> <span class="n">b</span> <span class="o">=</span> <span class="n">utf8_str</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;ISO-8859-1&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">java_utf_str</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">b</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">);</span>
</span><span class="line">
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">java_utf_str</span><span class="o">);</span>
</span><span class="line"><span class="c1">// ==&gt;  意法半导 hello world</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>One more thing. In order to print the utf string in Eclipse, you have to set the encoding of the output to utf8, else you’ll see a bunch of question marks.</p>

<p>I’m quite surprised that no one ever write a post of how do you solved this task. I know the solution is short yet not that trivial, but it still took me several hours to dig in and out on different libraries and solutions on the web to reach the final answer. Hope this post can save your time if you encountered the same problem!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java fast IO using java.nio API]]></title>
    <link href="http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api/"/>
    <updated>2013-09-28T17:18:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/28/java-fast-io-using-java-nio-api</id>
    <content type="html"><![CDATA[<p>For modern computing, IO is always a big bottleneck to solve. I recently encounter a problem is to read a 355MB index file to memory, and do a run-time lookup base the index. This process will be repeated by thousands of Hadoop job instances, so a fast IO is a must. By using the <code>java.nio</code> API I sped the process from 194.054 seconds to 0.16 sec! Here’s how I did it.</p>

<!--more-->

<h2 id="the-data-to-process">The Data to Process</h2>

<p>This performance tuning practice is very specific to the data I’m working on, so it’s better to explain the context. We have a long ip list (26 millions in total) that we want to put in the memory. The ip is in text form, and we’ll transform it into signed integer and put it into a java array. (We use signed integer because java doesn’t support unsigned primitive types…) The transformation is pretty straight forward:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">ip2integer</span> <span class="o">(</span><span class="n">String</span> <span class="n">ip_str</span><span class="o">){</span>
</span><span class="line">  <span class="n">String</span> <span class="o">[]</span> <span class="n">numStrs</span> <span class="o">=</span> <span class="n">ip_str</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\.&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">numStrs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">4</span><span class="o">){</span>
</span><span class="line">    <span class="n">num</span> <span class="o">=</span>
</span><span class="line">        <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">2</span><span class="o">])</span> <span class="o">*</span> <span class="mi">256</span>
</span><span class="line">        <span class="o">+</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">numStrs</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
</span><span class="line">    <span class="n">num</span> <span class="o">+=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;IP is wrong: &quot;</span><span class="o">+</span> <span class="n">ip_str</span><span class="o">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, reading ip in text form line by line is really slow.</p>

<h2 id="strategy-1-line-by-line-text-processing">Strategy 1: Line-by-line text processing</h2>

<p>This approach is straight forward. Just a standard readline program in java.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ipArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">26123456</span><span class="o">];</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsText</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;ip.tsv&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataOutputStream</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">fos</span><span class="o">);</span>
</span><span class="line">  <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">ip_num</span> <span class="o">=</span> <span class="n">ip2integer</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class="line">    <span class="n">ipArray</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">ip_num</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result time was <code>194.054</code> seconds.</p>

<h2 id="strategy-2-encode-ip-in-binary-format">Strategy 2: Encode ip in binary format</h2>

<p>The file size of the <code>ip.tsv</code> is 355MB, which is inefficient to store or to read. Since I’m only reading it to an array, why not store it as a big chunk of binary array, and read it back while I need it? This can be done by <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataInputStream.html">DataInputStream</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/io/DataOutputStream.html">DataOutputStream</a>. After shrinking the file, the file size became 102MB.</p>

<p>Here’s the code to read ip in binary format:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPAsDataStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">DataInputStream</span> <span class="n">dis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataInputStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">try</span> <span class="o">{</span>
</span><span class="line">    <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
</span><span class="line">      <span class="n">ipArr</span><span class="o">[</span><span class="n">i</span><span class="o">++]</span> <span class="o">=</span> <span class="n">dis</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">EOFException</span> <span class="n">e</span><span class="o">){</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;EOF&quot;</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The resulting time was <code>72</code> seconds. Much slower than I expected.</p>

<h2 id="strategy-3-read-the-file-using-javanio-api">Strategy 3: Read the file using java.nio API</h2>

<p>The <code>java.nio</code> is a new IO API that maps to low level system calls. With these system calls we can perform libc operations like <code>fseek</code>, <code>rewind</code>, <code>ftell</code>, <code>fread</code>, and bulk copy from disk to memory. For the C API you can view it from <a href="http://www.gnu.org/software/libc/manual/html_node/Low_002dLevel-I_002fO.html">GNU C library reference</a>.</p>

<p>The terminology in C and Java is a little bit different. In C, you control the file IO by <a href="http://www.gnu.org/software/libc/manual/html_node/Opening-and-Closing-Files.html#Opening-and-Closing-Files">file descriptors</a>; while in <code>java.nio</code> you use a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html">FileChannel</a> for reading, writing, or manipulate the position in the file. Another difference is you can bulk copy directly using the <code>fread</code> call, but in Java you need an additional <code>ByteBuffer</code> layer to map the data. To understand how it work, it’s better to read it from code:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readIPFromNIO</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;ip.bin&quot;</span><span class="o">));</span>
</span><span class="line">  <span class="n">FileChannel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">fis</span><span class="o">.</span><span class="na">getChannel</span><span class="o">();</span>
</span><span class="line">  <span class="n">ByteBuffer</span> <span class="n">bb</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocateDirect</span><span class="o">(</span><span class="mi">64</span><span class="o">*</span><span class="mi">1024</span><span class="o">);</span>
</span><span class="line">  <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="n">ipArr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">];</span>
</span><span class="line">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;File size: &quot;</span><span class="o">+</span><span class="n">channel</span><span class="o">.</span><span class="na">size</span><span class="o">()/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">  <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">while</span> <span class="o">((</span><span class="n">len</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">bb</span><span class="o">))!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
</span><span class="line">    <span class="c1">//System.out.println(&quot;Offset: &quot;+offset+&quot;\tlen: &quot;+len+&quot;\tremaining:&quot;+bb.hasRemaining());</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">asIntBuffer</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">ipArr</span><span class="o">,</span><span class="n">offset</span><span class="o">,(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">);</span>
</span><span class="line">    <span class="n">offset</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">len</span><span class="o">/</span><span class="mi">4</span><span class="o">;</span>
</span><span class="line">    <span class="n">bb</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code should be quite self-documented. The only thing to note is the byte-buffer’s <code>flip()</code> method. This call convert the buffer from writing data to buffer from disk to reading mode, so that we can read the data to int array via method <code>get()</code>. Another thing worth to mention is java use big-endian to read and write data by default. You can use <code>ByteBuffer.order(ByteOrder.LITTLE_ENDIAN)</code> to set the endian if you need it. For more about <code>ByteBuffer</code> here’s a <a href="http://mindprod.com/jgloss/bytebuffer.html">good blog post</a> that explains it in detail.</p>

<p>With this implementation, the result performance is <code>0.16</code> sec! Glory to the <code>java.nio</code>!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (2)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2/"/>
    <updated>2013-09-22T18:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-2</id>
    <content type="html"><![CDATA[<p>Followed the previous article, in this post I ran several benchmarks and tuned the performance from 3 hours 34 minutes to 6 minutes 8 seconds!</p>

<!--more-->

<h2 id="original-job-without-any-tuning">Original job without any tuning</h2>

<ul>
  <li><code>job_201308111005_0317</code></li>
  <li>NumTasks: 9790</li>
  <li>Reuse JVM: false</li>
  <li>mean complete time: 9-Sep-2013 10:08:47 (17sec)</li>
  <li>Finished in: 3hrs, 34mins, 26sec</li>
</ul>

<p>We had 9790 files to process, and the total size of the files is 53 GB. Note that for every task it still took 17 seconds to process the file.</p>

<h2 id="using-combinefileinputformat-without-setting-the-maxsplitsize">Using CombineFileInputFormat without setting the MaxSplitSize</h2>

<ul>
  <li><code>job_201308111005_0330</code></li>
  <li>NumTasks: 1</li>
  <li>Reuse JVM: false</li>
</ul>

<p>In this benchmark I didn’t set the <code>MaxSplitSize</code> in <code>CFInputFormat.java</code>, and thus Hadoop merge all the files into one super big task.
After running this task for 15 minutes, hadoop killed it. Maybe its a timeout issue, I didn’t dig into this.
The start and the end of the task logs look like this:</p>

<pre><code>13/09/09 16:17:29 INFO mapred.JobClient:  map 0% reduce 0%
13/09/09 16:32:45 INFO mapred.JobClient:  map 40% reduce 0%
 
13/09/09 16:33:02 INFO mapred.JobClient: Task Id : attempt_201308111005_0330_m_000000_0, Status : FAILED
java.lang.Throwable: Child Error
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:271)
    Caused by: java.io.IOException: Task process exit with nonzero status of 255.
    at org.apache.hadoop.mapred.TaskRunner.run(TaskRunner.java:258)
</code></pre>

<h2 id="using-combinefileinputformat-with-block-size-64-mb">Using CombineFileInputFormat with block size 64 MB</h2>

<ul>
  <li><code>job_201308111005_0332</code></li>
  <li>Reuse JVM = false</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 16:55:02 (24sec)</li>
  <li>Finished in: 23mins, 6sec</li>
</ul>

<p>After modifying <code>MaxSplitSize</code> the total runtime has reduced to 23 minutes! The total tasks drops from 9790 to 760, about 12 times smaller. The time difference is 9.3 times faster, pretty nice! However, the mean complete time doesn’t scale like other factors. The reason was it’s a big overhead to start JVM over and over again.</p>

<h2 id="using-combinefileinputformat-with-block-size-64mb-and-reuse-jvm">Using CombineFileInputFormat with block size 64MB and reuse JVM</h2>

<p>To reuse the JVM, just set <code>mapred.job.reuse.jvm.tasks</code> to <code>-1</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">argv</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">    <span class="n">Configuration</span> <span class="n">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Configuration</span><span class="o">();</span>
</span><span class="line">    <span class="n">conf</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="s">&quot;mapred.job.reuse.jvm.num.tasks&quot;</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ToolRunner</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">conf</span><span class="o">,</span> <span class="k">new</span> <span class="n">HadoopMain</span><span class="o">(),</span> <span class="n">argv</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The result is awesome! <strong>6 minutes and 8 seconds</strong>, wow!</p>

<ul>
  <li><code>job_201308111005_0333</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 64MB</li>
  <li>NumTasks: 760</li>
  <li>mean complete time: 9-Sep-2013 17:30:23 (5sec)</li>
  <li>Finished in: 6mins, 8sec</li>
</ul>

<h2 id="use-fileinputformat-and-reuse-jvm">Use FileInputFormat and reuse JVM</h2>

<p>Just curious the performance difference if we only change the JVM parameter:</p>

<ul>
  <li><code>job_201308111005_0343 </code></li>
  <li>NumTasks: 9790</li>
  <li>mean complete time: 10-Sep-2013 17:04:18 (3sec)</li>
  <li>Reuse JVM = true</li>
  <li>Finished in: 24mins, 49sec</li>
</ul>

<h2 id="tuning-performance-over-block-size">Tuning performance over block size</h2>

<p>Let’s jump to the conclusion first: changing the block size doesn’t affect the performance that much, and I found 64 MB is the best size to use. Here are the benchmarks:</p>

<h3 id="mb">512 MB</h3>

<ul>
  <li><code>job_201308111005_0339</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 512MB</li>
  <li>NumTasks: 99</li>
  <li>mean complete time: 10-Sep-2013 11:55:26 (24sec)</li>
  <li>Finished in: 7min 13sec</li>
</ul>

<h3 id="mb-1">128 MB</h3>

<ul>
  <li><code>job_201308111005_0340</code></li>
  <li>Reuse JVM = true</li>
  <li>max split size = 128 MB</li>
  <li>NumTasks: 341</li>
  <li>mean complete time: 10-Sep-2013 13:13:20 (9sec)</li>
  <li>Finished in: 6mins, 41sec</li>
</ul>

<h1 id="conclusion">Conclusion</h1>

<p>So far the best practice I learned from these benchmarks are:</p>

<ol>
  <li>Setup the <code>mapred.job.reuse.jvm.num.tasks</code> flag in configuration. This is the easiest tuning to do, and it makes nearly 10 times performance improvement.</li>
  <li>Write your own <code>CombineFileInputFormat</code> implementation.</li>
  <li>The block size can be 64 MB or 128 MB, but doesn’t make big difference between the two.</li>
</ol>

<p>Still, try to model your problems into sequence file or map file in hadoop. HDFS should handle localities with these files automatically.
What about <code>CFInputFormat</code>? Does it handle locality in HDFS system too?
I can’t confirm it but I guess sorting the keys based on line offset first then file name also guarantees the locality of assigning data to mapper. When I have time to dig more from HDFS API, I’ll look back to this benchmark and see what can I further tune the program.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Process Small Files on Hadoop using CombineFileInputFormat (1)]]></title>
    <link href="http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1/"/>
    <updated>2013-09-22T14:39:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/09/22/process-small-files-on-hadoop-using-combinefileinputformat-1</id>
    <content type="html"><![CDATA[<p>Processing small files is an old typical problem in hadoop; On <a href="http://stackoverflow.com/questions/14541759/how-can-i-work-with-large-number-of-small-files-in-hadoop">Stack Overflow</a> it suggested people to use <a href="http://hadoop.apache.org/docs/r1.1.1/api/org/apache/hadoop/mapred/lib/CombineFileInputFormat.html">CombineFileInputFormat</a>,  but I haven’t found a good step-to-step article that teach you how to use it. So, I decided to write one myself.</p>

<!--more-->

<p>From <a href="http://blog.cloudera.com/blog/2009/02/the-small-files-problem/">Cloudera’s blog</a>:</p>

<blockquote>
  <p>A small file is one which is significantly smaller than the HDFS block size (default 64MB).
If you’re storing small files, then you probably have lots of them (otherwise you wouldn’t turn to Hadoop),
and the problem is that HDFS can’t handle lots of files.</p>
</blockquote>

<p>In my benchmark, just using a custom <code>CombineFileInputFormat</code> can speedup the program from 3 hours to 23 minutes, and after some further tuning, the same task can be run in 6 minutes!</p>

<h2 id="benchmark-setup">Benchmark Setup</h2>

<p>To test the raw performance of different approaches to solve small problems, I setup a map only hadoop job that basically just do grep and perform a small binary search. The binary search part is to generate the reduce side keys that I’ll use in further data processing; it took only a little resource (8MB index) to run, so it does not affect the result of the benchmark.</p>

<p>The data to process is some server log data, 53.1 GB in total. The hadoop clusters consist 6 nodes, using hadoop version 1.1.2. In this benchmark I implemented <code>CombineFileInputFormat</code> to shrink the map jobs; I also tested the difference of reusing JVM or not, and different number of block sizes to combine files.</p>

<h2 id="combinefileinputformat">CombineFileInputFormat</h2>

<p>The code listed here is modified from <a href="https://svn.apache.org/repos/asf/hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/MultiFileWordCount.java">Hadoop example code</a>. To use <code>CombineFileInputFormat</code> you need to implement three classes. The class <code>CombineFileInputFormat</code> is an abstract class with no implementation, so you must create a subclass to support it; we’ll name the subclass <code>CFInputFormat</code>. The subclass will initiate a delegate <code>CFRecordReader</code> that extends <code>RecordReader</code>; this is the code that does the file processing logic. We’ll also need a class for <code>FileLineWritable</code>, which replaces <code>LongWritable</code> normally used as a key to file lines.</p>

<h3 id="cfinputformatjava">CFInputFormat.java</h3>

<p>The <code>CFInputFormat.java</code> doesn’t do much. You implement <code>createRecordReader</code> to pass in the record reader that does the combine file logic, that’s all. Note that you can call <code>setMaxSplitSize</code> in the initializer to control the size of each chunk of files; if you don’t want to split files into half, remember to return <code>false</code> in <code>isSplitable</code> method, which defaults to <code>true</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.JobContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileInputFormat</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.CFRecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFInputFormat</span> <span class="kd">extends</span> <span class="n">CombineFileInputFormat</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">public</span> <span class="nf">CFInputFormat</span><span class="o">(){</span>
</span><span class="line">    <span class="kd">super</span><span class="o">();</span>
</span><span class="line">    <span class="n">setMaxSplitSize</span><span class="o">(</span><span class="mi">67108864</span><span class="o">);</span> <span class="c1">// 64 MB, default block size on hadoop</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;</span> <span class="n">createRecordReader</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="k">new</span> <span class="n">CombineFileRecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;((</span><span class="n">CombineFileSplit</span><span class="o">)</span><span class="n">split</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">CFRecordReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">isSplitable</span><span class="o">(</span><span class="n">JobContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Path</span> <span class="n">file</span><span class="o">){</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="cfrecordreaderjava">CFRecordReader.java</h3>

<p><code>CFRecordReader</code> is a delegate class of <code>CombineFileRecordReader</code>, a built in class that pass each split (typically a whole file in this case) to our class <code>CFRecordReader</code>. When the hadoop job starts, <code>CombineFileRecordReader</code> reads all the file sizes in HDFS that we want it to process, and decides how many splits base on the <code>MaxSplitSize</code> we defined in <code>CFInputFormat</code>. For every split (must be a file, because we set <code>isSplitabe</code> to false), <code>CombineFileRecordReader</code> creates a <code>CFRecrodReader</code> instance via a custom constructor, and pass in <code>CombineFileSplit</code>, context, and index for <code>CFRecordReader</code> to locate the file to process with.</p>

<p>When processing the file, the <code>CFRecordReader</code> creates a <code>FileLineWritable</code> as the key for hadoop mapper class. With each line a <code>FileLineWritable</code> consists the file name and the offset length of that line. The difference between <code>FileLineWritable</code> and the normally used <code>LongWritable</code> in mapper is <code>LongWritable</code> only denote the offset of a line in a file, while <code>FileLineWritable</code> adds the file information into the key.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.idryman.combinefiles.FileLineWritable</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FSDataInputStream</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.FileSystem</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.fs.Path</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.InputSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.RecordReader</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.TaskAttemptContext</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.lib.input.CombineFileSplit</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.util.LineReader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CFRecordReader</span> <span class="kd">extends</span> <span class="n">RecordReader</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">,</span> <span class="n">Text</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">end</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="kt">long</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileSystem</span> <span class="n">fs</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Path</span> <span class="n">path</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">FileLineWritable</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">Text</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">private</span> <span class="n">FSDataInputStream</span> <span class="n">fileIn</span><span class="o">;</span>
</span><span class="line">  <span class="kd">private</span> <span class="n">LineReader</span> <span class="n">reader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="nf">CFRecordReader</span><span class="o">(</span><span class="n">CombineFileSplit</span> <span class="n">split</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">context</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">index</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">path</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getPath</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="n">fs</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">path</span><span class="o">.</span><span class="na">getFileSystem</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getConfiguration</span><span class="o">());</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">startOffset</span> <span class="o">=</span> <span class="n">split</span><span class="o">.</span><span class="na">getOffset</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">end</span> <span class="o">=</span> <span class="n">startOffset</span> <span class="o">+</span> <span class="n">split</span><span class="o">.</span><span class="na">getLength</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">  <span class="n">fileIn</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class="line">  <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LineReader</span><span class="o">(</span><span class="n">fileIn</span><span class="o">);</span>
</span><span class="line">  <span class="k">this</span><span class="o">.</span><span class="na">pos</span> <span class="o">=</span> <span class="n">startOffset</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">(</span><span class="n">InputSplit</span> <span class="n">arg0</span><span class="o">,</span> <span class="n">TaskAttemptContext</span> <span class="n">arg1</span><span class="o">)</span>
</span><span class="line">    <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// Won&#39;t be called, use custom Constructor</span>
</span><span class="line">  <span class="c1">// `CFRecordReader(CombineFileSplit split, TaskAttemptContext context, Integer index)`</span>
</span><span class="line">  <span class="c1">// instead</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">float</span> <span class="nf">getProgress</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">startOffset</span> <span class="o">==</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">1.0f</span><span class="o">,</span> <span class="o">(</span><span class="n">pos</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">)</span> <span class="o">/</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">startOffset</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">FileLineWritable</span> <span class="nf">getCurrentKey</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="n">Text</span> <span class="nf">getCurrentValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">  <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextKeyValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileLineWritable</span><span class="o">();</span>
</span><span class="line">    <span class="n">key</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">path</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="n">key</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Text</span><span class="o">();</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">newSize</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">newSize</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="n">pos</span> <span class="o">+=</span> <span class="n">newSize</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">newSize</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span><span class="o">{</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The reason to use a custom constructor
is not documented anywhere in hadoop api nor document. You can only find it in <a href="http://grepcode.com/file/repo1.maven.org/maven2/com.ning/metrics.collector/1.2.1/org/apache/hadoop/mapreduce/lib/input/CombineFileRecordReader.java#40">hadoop source code</a>, line 40:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line">   <span class="kd">static</span> <span class="kd">final</span> <span class="n">Class</span> <span class="o">[]</span> <span class="n">constructorSignature</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span> <span class="o">[]</span>
</span><span class="line">                                          <span class="o">{</span><span class="n">CombineFileSplit</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">TaskAttemptContext</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class="line">                                           <span class="n">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="filelinewritablejava">FileLineWritable.java</h3>

<p>This file is very simple: store the file name and offset, and override the <code>compareTo</code> method to compare the file name first, then compare the offset.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">idryman</span><span class="o">.</span><span class="na">combinefiles</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataInput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.DataOutput</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.Text</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.io.WritableComparable</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileLineWritable</span> <span class="kd">implements</span> <span class="n">WritableComparable</span><span class="o">&lt;</span><span class="n">FileLineWritable</span><span class="o">&gt;{</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">long</span> <span class="n">offset</span><span class="o">;</span>
</span><span class="line">  <span class="kd">public</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">readFields</span><span class="o">(</span><span class="n">DataInput</span> <span class="n">in</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLong</span><span class="o">();</span>
</span><span class="line">    <span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">Text</span><span class="o">.</span><span class="na">readString</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">write</span><span class="o">(</span><span class="n">DataOutput</span> <span class="n">out</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">    <span class="n">out</span><span class="o">.</span><span class="na">writeLong</span><span class="o">(</span><span class="n">offset</span><span class="o">);</span>
</span><span class="line">    <span class="n">Text</span><span class="o">.</span><span class="na">writeString</span><span class="o">(</span><span class="n">out</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">FileLineWritable</span> <span class="n">that</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">fileName</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="na">fileName</span><span class="o">);</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">signum</span><span class="o">((</span><span class="kt">double</span><span class="o">)(</span><span class="k">this</span><span class="o">.</span><span class="na">offset</span> <span class="o">-</span> <span class="n">that</span><span class="o">.</span><span class="na">offset</span><span class="o">));</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>               <span class="c1">// generated hashCode()</span>
</span><span class="line">    <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">fileName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">offset</span> <span class="o">^</span> <span class="o">(</span><span class="n">offset</span> <span class="o">&gt;&gt;&gt;</span> <span class="mi">32</span><span class="o">));</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="nd">@Override</span>
</span><span class="line">  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// generated equals()</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">getClass</span><span class="o">()</span> <span class="o">!=</span> <span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">())</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="n">FileLineWritable</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">CFFileLineWritableInputFormat</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">fileName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">fileName</span><span class="o">))</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">offset</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">offset</span><span class="o">)</span>
</span><span class="line">      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="job-setup">job setup</h2>

<p>Finally is the job setup for hadoop cluster to run. We just need to assign the classes to job:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">import</span> <span class="nn">org.apache.hadoop.mapreduce.Job</span><span class="o">;</span>
</span><span class="line"><span class="c1">// standard hadoop conf</span>
</span><span class="line"><span class="n">Job</span> <span class="n">job</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Job</span><span class="o">(</span><span class="n">getConf</span><span class="o">());</span>
</span><span class="line"><span class="n">FileInputFormat</span><span class="o">.</span><span class="na">addInputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setInputFormatClass</span><span class="o">(</span><span class="n">CFInputFormat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setMapperClass</span><span class="o">(</span><span class="n">MyMapper</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">setNumReduceTasks</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// map only</span>
</span><span class="line"><span class="n">FileOutputFormat</span><span class="o">.</span><span class="na">setOutputPath</span><span class="o">(</span><span class="n">job</span><span class="o">,</span> <span class="k">new</span> <span class="n">Path</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
</span><span class="line"><span class="n">job</span><span class="o">.</span><span class="na">submit</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The benchmark result is in the next post.</p>

<h2 id="download">Download</h2>

<p>The whole project can be downloaded from 
<a href="https://github.com/dryman/Hadoop-CombineFileInputFormat">Hadoop CombineFileInputFormat</a>.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my emacs setting on servers]]></title>
    <link href="http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers/"/>
    <updated>2013-08-29T10:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers</id>
    <content type="html"><![CDATA[<p>My desktop emacs config is complecated, however I need a minimal config for emacs installed on ubuntu servers. This is my note of how to configure emacs on servers that works for me.</p>

<!--more-->

<h2 id="emacs24">Emacs24</h2>

<p>First, I need to get Emacs24 installed on ubuntu, which is not by default. This link <a href="http://www.mikeyboldt.com/2011/11/30/install-emacs-24-in-ubuntu/">Install Emacs 24 in Ubuntu</a> is a great guide of how to install emacs 24. Here are the commands you need to type:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo add-apt-repository ppa:cassou/emacs
</span><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install emacs24</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="configure-packges-archives">Configure Packges Archives</h2>

<p>With Emacs 24, you can use the package managing system easily. Open your <code>~/.emacs</code> file and enter</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span><span class="o">.</span><span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;package-archives</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span><span class="o">.</span><span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Save the file, and <code>M-x eval-buffer</code>, then <code>M-x package-refresh-contents</code>. Now you’re ready to install most of the emacs plugins.</p>

<h2 id="plugins-i-installed">Plugins I installed</h2>

<ol>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/ParEdit">Paredit.el</a>: a mode for editing structured s-expressions, very useful for lisp based programs including emacs-lisp and clojure.</p>
  </li>
  <li>
    <p><a href="https://github.com/clojure-emacs/clojure-mode">clojure mode</a>: mode for editing clojure files </p>
  </li>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a>: Move your cursor to where you eyes are looking at.</p>
  </li>
</ol>

<h2 id="some-other-configs">Some other configs</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="scm"><span class="line"><span class="p">(</span><span class="nf">global-visual-line-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">tool-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">show-paren-mode</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">menu-bar-mode</span> <span class="mi">-1</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">inhibit-startup-message</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq-default</span> <span class="nv">indent-tabs-mode</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; it&#39;s dangerous to keep backup files in the same directory on the server</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">backup-directory-alist</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.&quot;</span> <span class="o">.</span> <span class="s">&quot;~/.backup_emacs&quot;</span><span class="p">))</span>
</span><span class="line">      <span class="nv">auto-save-file-name-transforms</span> <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;.*&quot;</span> <span class="s">&quot;~/.backup_emacs&quot;</span> <span class="nv">t</span><span class="p">))</span>
</span><span class="line">      <span class="nv">backup-by-copying</span> <span class="nv">t</span>    <span class="c1">; Don&#39;t delink hardlinks</span>
</span><span class="line">      <span class="nv">version-control</span> <span class="nv">t</span>      <span class="c1">; Use version numbers on backups</span>
</span><span class="line">      <span class="nv">delete-old-versions</span> <span class="nv">t</span>  <span class="c1">; Automatically delete excess backups</span>
</span><span class="line">      <span class="nv">kept-new-versions</span> <span class="mi">20</span>   <span class="c1">; how many of the newest versions to keep</span>
</span><span class="line">      <span class="nv">kept-old-versions</span> <span class="mi">5</span>    <span class="c1">; and how many of the old</span>
</span><span class="line"><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; configure paredit</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;clojure-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-hook</span> <span class="ss">&#39;emacs-lisp-mode-hook</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">paredit-mode</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; auto complete for emacs lisp</span>
</span><span class="line"><span class="p">(</span><span class="nf">setq</span> <span class="nv">tab-always-indent</span> <span class="ss">&#39;complete</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">add-to-list</span> <span class="ss">&#39;completion-styles</span> <span class="ss">&#39;initials</span> <span class="nv">t</span><span class="p">)</span>
</span><span class="line"><span class="p">(</span><span class="nf">define-key</span> <span class="nv">global-map</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;RET&quot;</span><span class="p">)</span> <span class="ss">&#39;newline-and-indent</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; ace jump mode</span>
</span><span class="line"><span class="p">(</span><span class="nf">global-set-key</span> <span class="p">(</span><span class="nf">kbd</span> <span class="s">&quot;&lt;ESC&gt;&lt;ESC&gt;&quot;</span><span class="p">)</span> <span class="ss">&#39;ace-jump-mode</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hope these helps :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimal NodeJS router]]></title>
    <link href="http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router/"/>
    <updated>2013-08-16T15:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/16/minimal-nodejs-router</id>
    <content type="html"><![CDATA[<p>Here comes the problem, you’re prototyping a website that has powerful front-end like <a href="http://emberjs.com">EmberJS</a> or <a href="http://angularjs.org">AngularJS</a>, and sync JSON data with your NodeJS back-end, but you want your nodejs code to be lite and clean.</p>

<p>You can use some nodeJS framework like restify, expressJS, director or whatever, but is there a way to write a minimal router using regex and switch statements? Yes.</p>

<!--more-->

<p>The solution is pretty simple. JS switch statement can accept expressions as comparison keys, so simply do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kd">var</span> <span class="nx">rest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./rest_route.js&#39;</span><span class="p">);</span>
</span><span class="line"><span class="nx">Http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">){</span>
</span><span class="line">  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class="line">  <span class="k">switch</span><span class="p">(</span><span class="kc">true</span><span class="p">){</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers$&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">servers</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/servers/\\d&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">server</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/nodes&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">nodes</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">case</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;/api/1/url/&#39;</span><span class="p">).</span><span class="nx">test</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="nx">rest</span><span class="p">.</span><span class="nx">urlapi</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span><span class="nx">response</span><span class="p">);</span>
</span><span class="line">      <span class="k">break</span><span class="p">;</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span>
</span><span class="line">      <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This may not as consistent as other heavy routers, but it’s really suitable for prototyping a new web app. Have fun and use it to hack your new weekend project!</p>
]]></content>
  </entry>
  
</feed>
