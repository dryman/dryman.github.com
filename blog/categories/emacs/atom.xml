<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2017-05-07T22:23:24-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[my emacs setting on servers]]></title>
    <link href="http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers/"/>
    <updated>2013-08-29T10:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/08/29/my-emacs-setting-on-servers</id>
    <content type="html"><![CDATA[<p>My desktop emacs config is complecated, however I need a minimal config for emacs installed on ubuntu servers. This is my note of how to configure emacs on servers that works for me.</p>

<!--more-->

<h2 id="emacs24">Emacs24</h2>

<p>First, I need to get Emacs24 installed on ubuntu, which is not by default. This link <a href="http://www.mikeyboldt.com/2011/11/30/install-emacs-24-in-ubuntu/">Install Emacs 24 in Ubuntu</a> is a great guide of how to install emacs 24. Here are the commands you need to type:</p>

<p><code>
sudo add-apt-repository ppa:cassou/emacs
sudo apt-get update
sudo apt-get install emacs24
</code></p>

<h2 id="configure-packges-archives">Configure Packges Archives</h2>

<p>With Emacs 24, you can use the package managing system easily. Open your <code>~/.emacs</code> file and enter</p>

<p><code>scm
(require 'package)
(add-to-list 'package-archives '("marmalade"."http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("melpa"."http://melpa.milkbox.net/packages/") t)
(package-initialize)
</code></p>

<p>Save the file, and <code>M-x eval-buffer</code>, then <code>M-x package-refresh-contents</code>. Now you’re ready to install most of the emacs plugins.</p>

<h2 id="plugins-i-installed">Plugins I installed</h2>

<ol>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/ParEdit">Paredit.el</a>: a mode for editing structured s-expressions, very useful for lisp based programs including emacs-lisp and clojure.</p>
  </li>
  <li>
    <p><a href="https://github.com/clojure-emacs/clojure-mode">clojure mode</a>: mode for editing clojure files </p>
  </li>
  <li>
    <p><a href="http://www.emacswiki.org/emacs/AceJump">Ace Jump</a>: Move your cursor to where you eyes are looking at.</p>
  </li>
</ol>

<h2 id="some-other-configs">Some other configs</h2>

<p>```scm
(global-visual-line-mode t)
(tool-bar-mode -1)
(show-paren-mode t)
(menu-bar-mode -1)
(setq inhibit-startup-message t)
(setq-default indent-tabs-mode nil)</p>

<p>;; it’s dangerous to keep backup files in the same directory on the server
(setq backup-directory-alist ‘((“.” . “~/.backup_emacs”))
      auto-save-file-name-transforms ‘((“.*” ”~/.backup_emacs” t))
      backup-by-copying t    ; Don’t delink hardlinks
      version-control t      ; Use version numbers on backups
      delete-old-versions t  ; Automatically delete excess backups
      kept-new-versions 20   ; how many of the newest versions to keep
      kept-old-versions 5    ; and how many of the old
)</p>

<p>;; configure paredit
(add-hook ‘clojure-mode-hook (lambda () (paredit-mode 1)))
(add-hook ‘emacs-lisp-mode-hook (lambda () (paredit-mode 1)))</p>

<p>;; auto complete for emacs lisp
(setq tab-always-indent ‘complete)
(add-to-list ‘completion-styles ‘initials t)
(define-key global-map (kbd “RET”) ‘newline-and-indent)</p>

<p>;; ace jump mode
(global-set-key (kbd “<esc><esc>") 'ace-jump-mode)
```</esc></esc></p>

<p>Hope these helps :D</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs loves iPython Notebook]]></title>
    <link href="http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook/"/>
    <updated>2013-05-29T11:41:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/29/emacs-loves-ipython-notebook</id>
    <content type="html"><![CDATA[<!--more-->

<h2 id="install">Install</h2>

<p>Installing emacs ipython notebook is pretty simple.</p>

<ol>
  <li>
    <p>follow the steps in <a href="/blog/2013/03/13/python-setup-on-mac-osx/">Setting up Python on OSX Mountain Lion</a>.</p>
  </li>
  <li>
    <p>Refresh emacs packages <code>M-x package-refresh-contents</code></p>
  </li>
  <li>
    <p><code>M-x package-install</code> <code>ein</code></p>
  </li>
</ol>

<h2 id="usage">Usage</h2>

<ol>
  <li>
    <p><code>cd directory</code></p>
  </li>
  <li>
    <p><code>ipython notebook --pylab inline</code></p>
  </li>
  <li>
    <p><code>M-x ein:notebooklist-open</code></p>
  </li>
</ol>

<p>Than, check on <a href="https://github.com/tkf/emacs-ipython-notebook">Emacs IPython Notebook</a> to see what key-bindings you can use in EIN mode. I only use <code>C-c C-c</code> to execute a buffer, and <code>C-c C-u</code> for changing the cell type. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs and PDF]]></title>
    <link href="http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/"/>
    <updated>2013-05-20T22:07:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/20/emacs-and-pdf</id>
    <content type="html"><![CDATA[<p>Emacs has a built-in pdf viewer named <code>doc-view-mode</code>. It require ghostscript to convert the pdf files. On my OSX 10.8 laptop, I use <code>ghostscript 9.07 (2013-02-14)</code> version, installed by</p>

<p><code>bash
brew install ghostscript
</code></p>

<h3 id="screen-shot">screen shot</h3>

<p><img src="/images/emacs/emacs-docview.png" alt="Screen shot" /></p>

<h3 id="usage-and-configs">Usage and configs</h3>

<p>Using docview is pretty simple, just use your emacs to open the file and it’s done. I added two keyboard macro to help me navigate the PDF.</p>

<p><code>scm
;; view docs
(fset 'doc-prev "\C-xo\C-x[\C-xo")
(fset 'doc-next "\C-xo\C-x]\C-xo")
(global-set-key (kbd "M-[") 'doc-prev)
(global-set-key (kbd "M-]") 'doc-next)
</code></p>

<p>The keybindings is only for two windows layout. You can use <code>M-[</code> or <code>M-]</code> to navigate the pages while your cursor is in another window. So that you can write your notes and navigate without leaving your notes! Pretty neat, right?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs W3m]]></title>
    <link href="http://www.idryman.org/blog/2013/05/20/emacs-w3m/"/>
    <updated>2013-05-20T21:18:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/20/emacs-w3m</id>
    <content type="html"><![CDATA[<p>This year I switched from vim to emacs. The reason is quite simple, I want to try different things, that’s all. Emacs is a highly configurable editor that you can use it to read emails, chat on irc, read pdf files, or whatever you can imagine. One of the most useful plugin is using <code>emacs-w3m</code> to browse websites.</p>

<!--more-->

<h3 id="install">Install</h3>

<p>Emacs-w3m is an old package, luckily the latest package still functions well :D</p>

<p>This installation guide is mac specific, but you can replace the first command to other platform-specific package installer. I use Mac OSX 10.8, and the latest homebrew until May 15, 2013. In your shell, type in the following:</p>

<p>```bash
brew install w3m
mkdir -p ~/.emacs.d/vendor
cd ~/.emacs.d/vendor
cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot login
cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m</p>

<p>cd emacs-w3m
autoconf
make
```</p>

<p>Then, in your <code>.emacs</code>,</p>

<p><code>scm
(add-to-list 'load-path "~/.emacs.d/vendor/emacs-w3m/")
(require 'w3m-load)
</code></p>

<p>That’s all you need. :)</p>

<p><img src="/images/emacs/emacs-w3m.png" alt="emacs-w3m" /></p>

<h3 id="other-settings">Other settings</h3>

<p>If you want to open url links in w3m from org files, you can use the following setting, reference to <a href="http://www.emacswiki.org/emacs/BrowseUrl#toc26">emacs wiki post</a>.</p>

<p><code>scm
(defadvice org-open-at-point (around org-open-at-point-choose-browser activate)
  (let ((browse-url-browser-function
         (cond ((equal (ad-get-arg 0) '(4))
                'browse-url-generic)
               ((equal (ad-get-arg 0) '(16))
                'choose-browser)
               (t
                (lambda (url &amp;optional new)
                  (w3m-browse-url url t)))
               )))
    ad-do-it))
</code></p>

<p>If you want more from <code>emacs-w3m</code>, check out <a href="http://www.emacswiki.org/emacs/emacs-w3m">EmacsWiki: emacs-w3m</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing swank.js]]></title>
    <link href="http://www.idryman.org/blog/2013/03/23/installing-swank-dot-js/"/>
    <updated>2013-03-23T08:05:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/03/23/installing-swank-dot-js</id>
    <content type="html"><![CDATA[<p>People say that emacs is the most extendable editor in the world; however, I didn’t really understand how powerful it is until one of it extension <strong>Swank.js</strong> blowed my mind. Take a look at this awesome screen cast produced by <a href="http://emacsrocks.com">emacs rocks</a>.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/qwtVtcQQfqc" frameborder="0" allowfullscreen=""></iframe>

<!--more-->

<p>Awesome, is it? However, installing <code>swank.js</code> is really nontrivial. As a result, I want to share my note on setting up <code>swank.js</code> on my machine.</p>

<h2 id="system-information">System information</h2>

<ul>
  <li>Mac OSX 10.8</li>
  <li>Emacs 24.3</li>
  <li>package manager: <a href="http://mxcl.github.com/homebrew/">homebrew</a></li>
  <li>C compiler: Apple LLVM version 4.2 (clang-425.0.27) (based on LLVM 3.2svn) Target: x86_64-apple-darwin12.3.0</li>
</ul>

<p>My Emacs is installed via <a href="http://mxcl.github.com/homebrew/">homebrew</a>.</p>

<p><code>sh
brew install emacs --cocoa
</code></p>

<h2 id="installation-steps">Installation steps</h2>

<h3 id="section">1.</h3>
<p>Setting up emacs ecosystem. In <code>~/.emacs</code> or <code>~/.emacs.d/init.el</code>:</p>

<p><code>scm
(require 'package)
(add-to-list 'package-archives
  '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
'("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
</code></p>

<p>Remember to evaluate the buffer <code>M-x eval-buffer</code>.</p>

<h3 id="section-1">2.</h3>
<p><code>node.js</code>, <code>npm</code>, and <code>swank-js</code> server.</p>

<p><code>sh
brew install npm
export PATH="/usr/local/share/npm/bin:$PATH"    # put this in .bash_profile
npm install -g swank-js
</code></p>

<h3 id="section-2">3.</h3>
<p>Setting up <code>slime</code> (lisp-emacs protocol)</p>

<p><code>sh
brew install sbcl
cd ~/.emacs.d/
git clone https://github.com/antifuchs/slime.git
</code></p>

<p>In <code>.emacs</code>:</p>

<p><code>scm
(add-to-list 'load-path "~/.emacs.d/slime")
(setq inferior-lisp-program "/usr/local/bin/sbcl")
(require 'slime)
(slime-setup)
</code></p>

<h3 id="section-3">4.</h3>
<p>Install <code>swank.js</code> dependencies in emacs:</p>

<pre><code>M-x package-install exec-path-from-shell
M-x package-install js2-mode
M-x package-install slime
M-x package-install slime-js
M-x package-isntall js2-refactor
M-x package-install ac-slime
</code></pre>

<h3 id="section-4">5.</h3>
<p>Useful configurations written by <a href="https://github.com/magnars">Magnar Sveen</a> (author of <a href="http://emacsrocks.com">emacs rocks</a>.</p>

<p><code>sh
cd ~/.emacs.d/
curl -LO https://raw.github.com/magnars/.emacs.d/master/setup-slime-js.el
</code></p>

<h3 id="section-5">6.</h3>
<p>Final configurations in <code>.emacs</code></p>

<p><code>scm
;; swank-js settings
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(global-set-key [f5] 'slime-js-reload)
(add-hook 'js2-mode-hook
          (lambda ()
            (slime-js-minor-mode 1)))
(load-file "~/.emacs.d/setup-slime-js.el")
</code></p>

<h2 id="usage">Usage</h2>

<p>First, you need a real server running at port 3000. You can do that either using <code>python -m SimpleHTTPServer 3000</code> or other server programs like Ruby on Rails. You can change the default port setting by overwritten the variable <code>slime-js-target-url</code> in your <code>.emacs</code>.</p>

<p>Next, use the command <code>M-x slime-js-jack-in-browser</code> in emacs. It should open up Chrome in your workspace. However, my Chrome browser didn’t work well with <code>swank-js</code>; an alternative solution is to open <code>localhost:8009</code> in safari. It worked for me anyway. Now, you should see that emacs shows a prompt like this:</p>

<pre><code>; SLIME 2013-03-12
Remote attached: (browser) Safari6.0
 
NODE&gt; 
</code></pre>

<p>Type in <code>alert("hello world!")</code> and press enter. You should see your browser pop up an alert window with <strong>hello world</strong>, and that’s it! You’ve successfully installed <code>swank.js</code>!!</p>

<p><img src="/images/emacs/swank-js-screenshot-50.png" alt="Swank JS Screenshot" /></p>

<p>Wow, it’s really complicated. I can’t remember it unless I write it down.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://github.com/swank-js/swank-js">Swank JS</a></li>
  <li><a href="https://github.com/antifuchs/slime">Slime github mirror</a></li>
  <li><a href="https://github.com/magnars/.emacs.d/blob/master/setup-slime-js.el">Setup slime js</a></li>
  <li><a href="http://emacsrocks.com/e11.html">Emacs Rocks discussions</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
