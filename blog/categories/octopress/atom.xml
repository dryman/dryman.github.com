<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-06-17T16:22:28+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress hacker news plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin/"/>
    <updated>2012-04-05T14:49:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/05/jekyll-octopress-hacker-news-plugin</id>
    <content type="html"><![CDATA[<h3 id="inspiration">Inspiration</h3>

<p>I found out that some cool blogs have a cute <em>hacker news like button</em> on each of its
posts. </p>

<p>{% img /images/hn_like.png %}</p>

<p>The service is <a href="http://hnlike.com/">HN Like Button</a>, created by <a href="http://hacksandthoughts.posterous.com/">shashyal</a>.
To use it you can use the generator like so:</p>

<p>{% img /images/gen_hn_like.png %}</p>

<p>However, we don’t want to do that every time, right? So I decided to write a
small Jekyll plugin to generate the button automatically. Hope you can enjoy it!</p>

<!-- more -->

<h3 id="the-hidden-api-of-hnlike">The hidden API of HNLike</h3>

<p>Well…not really. The generated html snippet looks like this:
{% codeblock lang:html %}
&lt;iframe frameborder="no" scrolling="no" height="50px" width="350px"
 src="http://hnlike.com/upvote.php?link=http%3A%2F%2Fdryman.github.com%2Fblog%2F2012%2F04%2F04%2Fjekyll-graphviz-plugin%2F&amp;title=Jekyll%20Graphviz%20Plugin"
 &gt;iframes not supported by your browser&lt;/iframe&gt;
{% endcodeblock %}</p>

<p>Observe that in the <code>src</code> after the <code>upvote.php?</code> there are only two
key valure pairs:</p>

<ol>
  <li><code>link=</code><strong>html link</strong></li>
  <li><code>&amp;title=</code><strong>title text</strong></li>
</ol>

<p>We just need to replace the <strong>html link</strong> and <strong>title text</strong> to our URL-escaped
string and it is done.</p>

<h3 id="integrate-with-jekyll">Integrate with Jekyll</h3>

<p>Jekyll/Octopress is designed to extend its functionality by users. For details
you can take a look at <a href="http://octopress.org/docs/theme/template/">Theming and Customization - Octopress</a>. Follow
the instructions, I simply added a new html snippet in <code>source/_includes/</code>.</p>

<p>{% codeblock hn_like.html lang:html https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html link %}
{% raw %}
{% if site.hn_like_button %}
  <script type="text/javascript">
    (function(){
      var hn_like = document.createElement('iframe');
      hn_like.frameborder="no";
      hn_like.scrolling="no";
      hn_like.height="28px";
      hn_like.width="115px";
      hn_like.src = "http://hnlike.com/upvote.php?link="
                    + encodeURIComponent(document.location)
                    + "&amp;title="
                    + encodeURIComponent("{{ page.title }}");
      hn_like.innerHTML="iframes not supported by your browser";
      var twitter = document.getElementsByClassName("twitter-share-button")[0];</script></p>

<pre><code>  twitter.parentNode.insertBefore(
    hn_like,
    twitter
  );
})();   &lt;/script&gt; {% endif %} {% endraw %} {% endcodeblock %}
</code></pre>

<p>I modified the height and width otherwise it will be too big. Also I use jekyll
liquid helpers instead of <code>document.title</code> to form title text. Finally I use the
<code>twitter-share-button</code> element to position where I should insert the button in.</p>

<h3 id="installation-steps">Installation steps</h3>

<ol>
  <li>
    <p>To extend the built in snippet, download <a href="https://github.com/dryman/dryman.github.com/blob/src/source/_includes/hn_like.html">hn_like.html</a> into your 
<code>source/_includes</code> directory</p>
  </li>
  <li>
    <p>Add one line {% raw %} <code>{% include hn_like.html %}</code> {% endraw %} into <code>source/_includes/after_footer.html</code>.</p>
  </li>
  <li>
    <p>Add</p>
  </li>
</ol>

<p>{% codeblock lang:yaml %}
# hacker news like button
hn_like_button: true
{% endcodeblock %}</p>

<p>into your <code>_config.yml</code>.</p>

<h2 id="edit">Edit:</h2>

<p>The vote won’t update immediately. It will show up until hacker news index the
post and can be reached via HN search API.</p>

<h2 id="edit-2012-04-07">Edit: 2012-04-07</h2>

<p>I changed my domain name and all HN/Twitter/FB/G+ counts reset to zero. So I
submit the post to HN again.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll/Octopress graphviz plugin]]></title>
    <link href="http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin/"/>
    <updated>2012-04-04T17:37:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/04/04/jekyll-graphviz-plugin</id>
    <content type="html"><![CDATA[<p>I created a graphviz plugin for Octopress/Jekyll today. For example:</p>

<p>{% raw %}
    {% graphviz %}
    digraph G {
      compound=true;
      subgraph cluster0 {
      a -&gt; b;
      a -&gt; c;
      b -&gt; d;
      c -&gt; d;
      }
      subgraph cluster1 {
      e -&gt; g;
      e -&gt; f;
      }
      b -&gt; f [lhead=cluster1];
      d -&gt; e;
      c -&gt; g [ltail=cluster0, lhead=cluster1];
      c -&gt; e [ltail=cluster0];
      d -&gt; h;
    }
    {% endgraphviz %}
{% endraw %}</p>

<p>will produce:</p>

<p>{% graphviz %}
digraph G {
  compound=true;
  subgraph cluster0 {
  a -&gt; b;
  a -&gt; c;
  b -&gt; d;
  c -&gt; d;
  }
  subgraph cluster1 {
  e -&gt; g;
  e -&gt; f;
  }</p>

<p>b -&gt; f [lhead=cluster1];
  d -&gt; e;
  c -&gt; g [ltail=cluster0, lhead=cluster1];
  c -&gt; e [ltail=cluster0];
  d -&gt; h;
}
{% endgraphviz %}</p>

<!-- more -->

<p>You can see how it works on real post:</p>

<ol>
  <li><a href="http://www.idryman.org/blog/2012/04/10/practical-software-verification-using-SPIN/">Practical Software Verification Using SPIN</a></li>
  <li><a href="http://www.idryman.org/blog/2012/04/14/recursion-best-practices/">Recursion Best Practices</a></li>
</ol>

<hr />

<h3 id="installation">Installation:</h3>

<ol>
  <li>Download the file from <a href="https://github.com/dryman/dryman.github.com/blob/src/plugins/graphviz_block.rb">here</a>.</li>
  <li>Put it into your <code>my_octopress/plugin</code> folder.</li>
  <li>Add one line <code>source/images/graphviz</code> into your <code>.gitignore</code> file</li>
</ol>

<p>Remeber that you should have graphviz installed in your system. Else it will
raise an error.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[handcraft algorithm environment in kramdown]]></title>
    <link href="http://www.idryman.org/blog/2012/03/13/handcraft-algorithm-environment-in-kramdown/"/>
    <updated>2012-03-13T09:13:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/13/handcraft-algorithm-environment-in-kramdown</id>
    <content type="html"><![CDATA[<p>I love $\LaTeX$. The typesetting in $\LaTeX$ is so beautiful that that no other
typesetting system can compete with. Unfortunately, I cannot write $\LaTeX$ for blog
post. I have to use <a href="http://kramdown.rubyforge.org/">kramdown</a> or other
wiki/markup languages, because $\LaTeX$ doesn’t perform well in HTML output.
However, I missed some features in $\LaTeX$. One of those is <a href="http://en.wikibooks.org/wiki/LaTeX/Algorithms_and_Pseudocode">Algorithm and
Pseudocode packages</a>.
So, I discovered some tricks to form algorithm-like typesettings.</p>

<!-- more -->

<ol>
  <li>Use <code>\begin{align}</code> to align the lines.</li>
  <li>Use <code>\mbox{text...}</code> to put descriptions in.</li>
  <li>Use <code>\quad</code> and <code>\qquad</code> to make indentions.</li>
</ol>

<p>Here is the example input:</p>

<p>{% codeblock lang:latex%}
$$
\begin{align}
   Q=&amp; \mbox{On input string $w$:} <br />
     &amp; 1.\; \mbox{Construct the following Turing machine $P_w$} <br />
     &amp; \quad    P_w = \mbox{On any input:} <br />
     &amp; \qquad   1.\; \mbox{Erase input.} <br />
     &amp; \qquad   2.\; \mbox{Write w on the tape.} <br />
     &amp; \qquad   3.\; \mbox{Halt.}  <br />
     &amp; 2.\; \mbox{Output }\langle P_w\rangle  <br />
\end{align}
$$
{% endcodeblock %}</p>

<p>and <strong>Voilà</strong>!</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
   Q=& \mbox{On input string $w$:} \\
     & 1.\; \mbox{Construct the following Turing machine $P_w$} \\
     & \quad    P_w = \mbox{On any input:} \\
     & \qquad   1.\; \mbox{Erase input.} \\
     & \qquad   2.\; \mbox{Write w on the tape.} \\
     & \qquad   3.\; \mbox{Halt.}  \\
     & 2.\; \mbox{Output }\langle P_w\rangle  \\
\end{align}
 %]]&gt;</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing math equations on Octopress]]></title>
    <link href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/"/>
    <updated>2012-03-10T16:23:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress</id>
    <content type="html"><![CDATA[<p>Octopress is a wonderful blogging framework for hackers, but it does not support
math typesetting by default. What hacker doesn’t use Latex math?</p>

<p>The followings are configs to make you write latex math equations in Octopress.
Then you can translate this</p>

<p>{% codeblock lang:latex %}
$$
\begin{align}
\mbox{Union: } &amp; A\cup B = {x\mid x\in A \mbox{ or } x\in B} <br />
\mbox{Concatenation: } &amp; A\circ B  = {xy\mid x\in A \mbox{ and } y\in B} <br />
\mbox{Star: } &amp; A^\star  = {x<em>1x</em>2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A} <br />
\end{align}
$$
{% endcodeblock %}</p>

<p>into this</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<!-- more -->

<p><strong>Voilà!</strong></p>

<hr />

<h2 id="here-are-the-instructions">Here are the instructions:</h2>

<ol>
  <li>Use <a href="http://kramdown.rubyforge.org/">kramdown</a> instead of rdiscount</li>
</ol>

<p>kramdown is a free GPL-licensed Ruby library for parsing and converting a
superset of Markdown. It is completely written in Ruby, supports standard
Markdown and latex math equations.</p>

<pre><code>gem install kramdown
</code></pre>

<ol>
  <li>Change settings in <code>_config.yml</code></li>
</ol>

<p><code>_config.yml</code> is configurations for Jekyll’s settings. find <code>markdown</code> and
change <code>rdiscount</code> to <code>kramdown</code></p>

<ol>
  <li>
    <p>Change <code>gem 'ridiscount'</code> to <code>gem 'kramdown</code> in <code>Gemfile</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>
  </li>
  <li>
    <p>Put <a href="http://www.mathjax.org/">MathJax</a> CDN and configs in
<code>source/_layouts/default.html</code>.</p>
  </li>
</ol>

<p>{% codeblock lang:html %}
<!-- mathjax config similar to math.stackexchange -->
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
{% endcodeblock %}</p>

<ol>
  <li>Fix <a href="http://www.mathjax.org/">MathJax</a> right-click bug</li>
</ol>

<p>I found the solution on <a href="http://luikore.github.com/2011/09/good-things-learned-from-octopress/">luikore’s blog</a>. The problem was when you right-click on a MathJax formula, the whole browser becomes white. To fix it, open <code>sass/base/_theme.scss</code> and change the div under body from</p>

<p>{% codeblock lang:scss %}
body {
  &gt; div {
    background: $sidebar-bg $noise-bg;
{% endcodeblock %}</p>

<p>to</p>

<p>{% codeblock lang:scss %}
body {
  &gt; div#main {
    background: $sidebar-bg $noise-bg;
{% endcodeblock %}</p>

<p>and it is done.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>It’s useful if you want to depoloy your code on differnt machines.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Octopress configs]]></title>
    <link href="http://www.idryman.org/blog/2012/03/10/my-octopress-configs/"/>
    <updated>2012-03-10T16:12:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/03/10/my-octopress-configs</id>
    <content type="html"><![CDATA[<h2 id="installation-note">installation note</h2>

<p>This is an installation note for <a href="http://octopress.org">Octopress</a> blogging framework. My configuration is developed on OSX with ruby 1.9.2, and xcode 4.2.</p>

<!-- more -->

<h2 id="required-developement-tools">Required developement tools</h2>

<ol>
  <li><a href="https://github.com/kennethreitz/osx-gcc-installer">osx-gcc installer</a></li>
  <li>install <a href="http://mxcl.github.com/homebrew/">homebrew</a> if not yet installed</li>
</ol>

<h2 id="manage-rubies-with-rvmhttpbeginrescueendcom">Manage Rubies with <a href="http://beginrescueend.com/">RVM</a></h2>

<p>Install RVM</p>

<pre><code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>Reload your Shell environment:</p>

<pre><code>source ~/.bash_profile
</code></pre>

<p>Install ruby:</p>

<pre><code>rvm install 1.9.2 --with-gcc=gcc-4.2
</code></pre>

<p>Note: Octopress requires ruby 1.9.2</p>

<p>Use ruby 1.9.2</p>

<pre><code>rvm use 1.9.2 --default
</code></pre>

<h2 id="setup-octopresshttpoctopressorg">Setup <a href="http://octopress.org">Octopress</a></h2>

<pre><code>git clone git://github.com/imathis/octopress.git your-blog
cd your-blog
gem install bundler
bundle install
rake install
</code></pre>

<h2 id="setup-github-pages">Setup github pages</h2>
<p>add new repository as <em>your-name.github.com</em></p>

<pre><code>rake setup_github_pages
Enter the read/write url for your repository: git@github.com:your-name/your-name.github.com.git
rake generate
rake deploy
</code></pre>

<p>Now you can go to github.com/your-name.github.com to see your repository</p>

<pre><code>git add .
git commit -m 'blog init'
git push origin source
</code></pre>

<p>Wait about 10 minutes and you can see your inited blog on your-name.github.com!</p>
]]></content>
  </entry>
  
</feed>
