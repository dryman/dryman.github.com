<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-09-16T17:41:00+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taiwan Typhoon App (1)]]></title>
    <link href="http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1/"/>
    <updated>2012-09-16T16:11:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1</id>
    <content type="html"><![CDATA[<p>Taiwan is an island next to Pacific ocean, and one kind of serious disaster in
Taiwan is typhoon. Fortunately, We have best typhoon researches in the world,
and I want to make a step further to let people read typhoon predictions on iOS.</p>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/typhoon_tw/typhoon-08-23.png" /></p>

<!-- more -->

<p>There are two main resources that we can get typhoon prediction. One is <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">Central
Weather Bureau, Taiwan (CWB)</a>, and the other is <a href="http://jtwccdn.appspot.com/JTWC/">Joint Typhoon Warning
Center (JTWC)</a>. Here I’ll focus on <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> data.</p>

<h2 id="setup-inspect-environment">Setup inspect environment</h2>

<p>At the first scene, <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> seems hard to parse because it uses images
to show potential track area instead of using JSON API and google map.</p>

<p><img src="/images/typhoon_tw/cwb_pta.png" alt="cwb pta" title="figure 2" /></p>

<p>The html code is quite dirty and hard to inspect. The tip is to find the <code>iframe</code>
element from the inspector.</p>

<p><img src="/images/typhoon_tw/inspect_iframe.png" alt="inspect iframe" title="figure 3" /></p>

<p>Then, open the direct link in another window.</p>

<p><img src="/images/typhoon_tw/cwb_pta_iframe.png" alt="cwb iframe" title="figure 4" /></p>

<p>Now we have a relatively cleaner html to inspect.</p>

<p><img src="/images/typhoon_tw/inspector.png" alt="inspector" title="figure 5" /></p>

<h3 id="get-the-information-source">Get the information source</h3>

<p>I’m lucky. The source is right in JavaScript file.</p>

<p><img src="/images/typhoon_tw/ty_infos.png" alt="ty info" title="figure 6" /></p>

<p>Though it’s not JSON, but almost (lol). The direct link is</p>

<p><img src="/images/typhoon_tw/ty_infos_dir.png" alt="ty info dir" title="figure 7" /></p>

<p>The parameter of the link seems to be a clue that we can query history records,
but it doesn’t. With or without the parameter it always gives us the newest
information of typhoons.</p>

<h2 id="parse">Parse</h2>

<p>We only interested in <code>var typhs= [...]</code>. It’s easy to get data out using regular
expression.</p>

<p>I tested regular expression with Perl before I actually implement it in
Objective-C. If you need a tool to do text processing, Perl is always the best
choice. I strongly recommend people to learn Perl, it’s worthy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>https://github.com/dryman/Taiwan-Typhoon-iOS/blob/master/parse.pl source </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'>    <span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>    <span class="k">use</span> <span class="mf">5.010</span><span class="p">;</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">English</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="nb">undef</span> <span class="nv">$INPUT_RECORD_SEPARATOR</span><span class="p">;</span>  <span class="c1"># disable input seprator &quot;\n&quot;</span>
</span><span class='line'><span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&quot;ty_infos.js&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$_</span> <span class="o">=</span> <span class="o">&amp;</span><span class="ow">lt</span><span class="p">;</span><span class="nv">$fh</span><span class="o">&amp;</span><span class="ow">gt</span><span class="p">;;</span>                     <span class="c1"># read endire file as string into $_</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/\[.+?\];/s</span><span class="p">;</span>                    <span class="c1"># /s modifier let &#39;.&#39; match &quot;\n&quot;</span>
</span><span class='line'>                                <span class="c1"># +? match not greedly</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$MATCH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Beware that not to match greedly, else you won’t get what you want. Now we can
write it in much more verbose Objective-C.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSRegularExpression</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="err">@”\</span><span class="p">[.</span><span class="o">+?</span><span class="err">\</span><span class="p">];</span><span class="err">”</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range_of_match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">rangeOfFirstMatchInString:</span><span class="n">ty_infos</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ty_infos</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">ty_infos</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range_of_match</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">range_of_match</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSArray</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Earthquake early warning prototype]]></title>
    <link href="http://www.idryman.org/blog/2012/09/15/earthquake-early-warning-prototype/"/>
    <updated>2012-09-15T14:48:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/09/15/earthquake-early-warning-prototype</id>
    <content type="html"><![CDATA[<p>I made a  prototype of earthquake early warning system in one week. The scenario
goes as follows: We use a Friendly ARM SBC (Single-Board Computer) as an
earthquake signal collector and processor. If the signal was identified as
serious earthquake, it would send a message to our server. Then our server will
authenticate the message and use Apple Push Notification Service (APNS) to
notify some iPhone registered for the notifications.</p>

<p>The demo video:</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/jpXXkftFtI4" frameborder="0" allowfullscreen=""></iframe>

<!-- more -->

<h2 id="apple-push-notification-service-apns">Apple Push Notification Service (APNS)</h2>

<p>There are two ways to show up a notification even if app wasn’t active. One is
local notification and the other is server-pushed notification.</p>

<blockquote>
  <p>Local notification are scheduled by an iOS application. It’s iOS only.</p>
</blockquote>

<blockquote>
  <p>Push notification are sent by a remote server to Apple Push Notification
   service, which pushes the notification to devices on which the application is
   installed.</p>
</blockquote>

<p>There are a lot of limitation in alert message. So one must use it wisely. The
maximum size allowed for a notification payload is <em>256 bytes</em>. APNS refuses any
notification that exceeds this limit. The notification is encoded in a JSON
string, the properties go as follows:</p>

<ul>
  <li><strong>alert</strong> If this property is included, iOS display a standard alert. This
property can be a string or a dictionary. If it was a dictionary, below are
the properties of <strong>alert</strong>.
    <ul>
      <li><strong>body</strong> The text of the alert message</li>
      <li><strong>action-loc-key</strong> Display an alert with two buttons. The right buttons’s
title would be this key.</li>
      <li><strong>loc-key</strong> A key to an alert-message string in a <code>Localizable.strings</code>
file for the current localization.</li>
      <li><strong>loc-args</strong> Variable string to appear in place of format specifiers 
in <strong>loc-key</strong>.</li>
      <li><strong>launch-image</strong> The file name of an image in application bundle, which
will be shown on the display message.</li>
    </ul>
  </li>
  <li><strong>badge</strong> The number to display as the badge of the application icon.</li>
  <li><strong>sound</strong> The name of the sound in the application bundle. Set the property to
<em>default</em> then the default sound is played.</li>
</ul>

<p>To develop and deploy the provider side of a client/server application, you must
get SSL certificatates from Apple Dev Center. Apple has a <a href="http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ProvisioningDevelopment/ProvisioningDevelopment.html#//apple_ref/doc/uid/TP40008194-CH104-SW1">guide for
this</a>.</p>

<p>After setting up provisioning on Dev Center, you can get the certificate and key
in <code>.pem</code> format, with following commands.</p>

<pre><code>openssl pkcs12 -clcerts -nokeys -out apns-dev-cert.pem -in apns-dev-cert.p12
openssl pkcs12 -nocerts -out apns-dev-key.pem -in apns-dev-key.p12
</code></pre>

<p>Remember to setup your bundle identifier and code sign as same as your
provisioning profile uploaded to apple.</p>

<p>Sometimes you might bump into bugs that your code sign wouldn’t work when you
renew your bundle identifier. If so, just restart XCode.</p>

<h2 id="server-cgi-script">Server CGI script</h2>

<p>I use Perl to be cgi server. There are already a lot of APNS plugins that you
can find in most popular languages. So just pick what is comfortable to you
for implementing server side application.</p>

<p>My script that handles APNS looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'><span class="k">use</span> <span class="nn">Net::</span><span class="n">APNS</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="k">my</span> <span class="nv">$apns</span> <span class="o">=</span> <span class="nn">Net::</span><span class="n">APNS</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="k">new</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$notifier</span> <span class="o">=</span> <span class="nv">$apns</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">notify</span><span class="p">({</span>
</span><span class='line'>  <span class="n">cert</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">cert</span><span class="o">.</span><span class="n">pem</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="n">key</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">key</span><span class="o">.</span><span class="n">pem</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>  <span class="n">passwd</span> <span class="o">=&amp;</span><span class="ow">gt</span><span class="p">;</span> <span class="err">“</span><span class="n">passwd</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">devicetoken</span><span class="p">(</span><span class="err">“</span><span class="mi">202154</span><span class="n">bb3b92e71f02b011183dfc7ad1261b69007346b52d1c8bcdb5aef9f4dd</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">message</span><span class="p">(</span><span class="err">“</span><span class="n">Earthquake</span><span class="o">!!</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">badge</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">sound</span><span class="p">(</span><span class="err">‘</span><span class="n">default</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="n">sandbox</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$notifier</span><span class="o">-&amp;</span><span class="ow">gt</span><span class="p">;</span><span class="nb">write</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The device token is generated by your app. You will first register when your app
launch, then get the token from method <code>- (void)application:(UIApplication
*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData
*)deviceToken</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@implementation</span> <span class="nc">FCAppDelegate</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerForRemoteNotificationTypes:</span>
</span><span class='line'>      <span class="p">(</span><span class="n">UIRemoteNotificationTypeAlert</span><span class="o">|</span>
</span><span class='line'>       <span class="n">UIRemoteNotificationTypeBadge</span><span class="o">|</span>
</span><span class='line'>       <span class="n">UIRemoteNotificationTypeSound</span><span class="p">)];</span>
</span><span class='line'>  <span class="c1">// Override point for customization after application launch.</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">deviceToken</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="err">@”</span><span class="n">My</span> <span class="n">token</span> <span class="n">is</span> <span class="o">%</span><span class="err">@”</span><span class="p">,</span> <span class="n">deviceToken</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
  </li>
</ul>

<h2 id="arm-board">ARM board</h2>

<p>I use Friendly ARM 6410 for prototyping.</p>

<p><img src="/images/mini6410.jpg" alt="mini6410" title="figure 1" /></p>

<p>Here are some configuration details:</p>

<h3 id="booting">booting</h3>

<p>In <code>minicom</code> remote shell:</p>

<pre><code>&gt; boot-args:
&gt; root=/dev/mtdblock2 rootfstype=yaffs2 init=/linuxrc console=ttySAC0,115200
</code></pre>

<p>The boot args is quite important else you won’t get the shell from the device or
you may not boot it successfully. It took me a while to find the correct boot
args.</p>

<h3 id="cross-compile">cross compile</h3>

<p>If some desired library are not included in the board, you can cross compile
it from source. However, the configuration is a bit complex then normal
compilation:</p>

<pre><code>$ ./configure --host=arm-linux-gnu --target=arm-linux CC=arm-linux-gcc \
$ AR=arm-linux-ar LD=arm-linux-ld RANLIB=arm-linux-ranlib \
$ --prefix=/opt/curl --without-ssl
</code></pre>

<p>The cross compiled library can be uploaded to ARM board via ftp:</p>

<pre><code>$ ncftp -u user -p passwd $IP
&gt; put curl.tar.gz
</code></pre>

<p>You can find the <code>$IP</code> in minicom remote shell by <code>ifconfig</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grand central dispatch vs OpenMP]]></title>
    <link href="http://www.idryman.org/blog/2012/08/05/grand-central-dispatch-vs-openmp/"/>
    <updated>2012-08-05T12:41:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/08/05/grand-central-dispatch-vs-openmp</id>
    <content type="html"><![CDATA[<p>In 2009 Apple released a new task parallelism technology called 
<a href="http://developer.apple.com/library/ios/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch (GCD)</a>. Apple worked hard on tuning GCD; stated that only 15
instructions are required to queue up a work unit in GCD, while creating a
traditional thread could easily require several hundred instructions.<br />
The main advantage of GCD is that programmer/user does not required to choose
how many thread for application that optimize the most. It can save a lot of
time for programmers because getting the most power out of CPUs requires a lot
of measurement. With GCD, let the operating system decide it for you, <em>it just
works.</em></p>

<!-- more -->

<p>Most GCD documentation provided by Apple take focus on user applications:
background process, asynchronous callbacks, non-blocking UI, dispatched IOs
…etc. GCD and c/obj-c blocks works pretty good in those scenarios, but we
want a more general comparison between GCD and traditional thread models. <strong>Which
is faster?</strong>
Currently no one has made a general benchmark for this. I targeted to use an
industry standard benchmark for GCD vs threads, and I ended up by picking 
<a href="http://en.wikipedia.org/wiki/Conjugate_gradient_method">Conjugate Gradient</a> computation in 
<a href="http://www.nas.nasa.gov/publications/npb.html">NAS Parallel Benchmark (NPB) maintained by NASA</a> as my benchmark model.</p>

<p>I uses <a href="http://openmp.org/wp/">OpenMP</a> implementation in CG problem. It is an shared memory
threading API which is much easier to use then POSIX thread. However it is still
required for programmer/user to pick thread number in run time or in compile time.
NASA only provide fortran code, so I uses <a href="http://jason.cse.ohio-state.edu/examples/npb/index.html">Ohio’s C implementation</a>.</p>

<h2 id="benchmark-result">Benchmark result</h2>

<p><img src="/images/npb_cg.png" alt="NPB CG" title="figure 1" /></p>

<p>The result is quite promising! Problem sizes in NPB are predefined and indicated
as different classes: </p>

<ul>
  <li>Class W: vector size: 7000, iterations: 15 (90’s workstation size, now likely
too small)</li>
  <li>Class A: vector size: 14000, iterations: 15</li>
  <li>Class B: vector size: 75000, iterations: 75</li>
</ul>

<p>I tested OpenMP with different thread numbers and it performs differently on
different problem size. It not quite obvious to choose a correct thread number
for the problem, and GCD implementations beats them all.</p>

<h2 id="bottleneck-implementation">Bottleneck implementation</h2>

<p>The OpenMP implementation looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="cp">#pragma omp parallel {  </span><span class="c1">// Spawn threads for all computations in the block</span>
</span><span class='line'>    <span class="cm">/* </span>
</span><span class='line'><span class="cm">      some other code… </span>
</span><span class='line'><span class="cm">    */</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">#</span><span class="n">pragma</span> <span class="n">omp</span> <span class="k">for</span> <span class="n">private</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">k</span><span class="p">)</span>  <span class="c1">// Bottleneck</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">lastrow</span><span class="o">-</span><span class="n">firstrow</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">iresidue</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">sum1</span><span class="p">,</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>    <span class="n">iresidue</span> <span class="o">=</span> <span class="p">(</span><span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum1</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sum2</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">iresidue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">iresidue</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>   <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum2</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>      <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* more code */</span>
</span><span class='line'>  <span class="p">}</span> <span class="cm">/* end parallel */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Other code instead of bottleneck are basically vector initialization, copy,
multiply and norm computations. I tested all of these, but they don’t make
big differences between OpenMP, GCD, and BLAS1 functions.</p>

<p>GCD implementation looks much like the original code:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>      <span class="c1">// c_queue is a concurrent queue</span>
</span><span class='line'>      <span class="n">dispatch_apply</span> <span class="p">(</span><span class="n">NA</span><span class="p">,</span> <span class="n">c_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">sum1</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">sum2</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">size_t</span> <span class="n">iresidue</span> <span class="o">=</span> <span class="p">(</span><span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">i</span><span class="p">)</span> <span class="o">%</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">iresidue</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="n">iresidue</span><span class="p">;</span> <span class="n">k</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">rowstr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="p">;</span> <span class="n">k</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>   <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="p">]];</span>
</span><span class='line'>          <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum2</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">p</span><span class="p">[</span><span class="n">colidx</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span> <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'>        <span class="n">q</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>What a great news! It is much easier then I thought to transfer the original
code into GCD.</p>

<h2 id="parallel-reduction-in-openmp-gcd-and-blas">Parallel reduction in OpenMP, GCD, and BLAS</h2>

<p>As I concluded before, it doesn’t make big difference between three of these.
The implementations are:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>OpenMP  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="cp">#pragma omp parallel private (i,j,k)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="cp">#pragma omp single nowait</span>
</span><span class='line'>      <span class="n">rho</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>    <span class="cp">#pragma omp for reduction(+:rho)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">NA</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">rho</span> <span class="o">=</span> <span class="n">rho</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>GCD  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="o">/*</span> <span class="n">clang</span> <span class="o">-</span><span class="n">fblocks</span> <span class="o">-</span><span class="n">O3</span> <span class="o">-</span><span class="n">DCACHE_LINE_SIZE</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">shell</span> <span class="n">sysctl</span> <span class="o">-</span><span class="n">n</span> <span class="n">hw</span><span class="p">.</span><span class="n">cachelinesize</span><span class="p">)</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;/</span>
</span><span class='line'>    <span class="cp">#include &amp;lt;dispatch/dispatch.h&amp;gt;</span>
</span><span class='line'>    <span class="cp">#define STRIDE (1024&lt;/em&gt;(CACHE_LINE_SIZE/sizeof(double)))</span>
</span><span class='line'>    <span class="cp">#define DIVIDE (NA/STRIDE)</span>
</span><span class='line'>    <span class="cp">#define RESIDUE (NA%STRIDE)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">__block</span> <span class="kt">double</span> <span class="n">rho</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">s_queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">DIVIDE</span><span class="o">*</span><span class="n">STRIDE</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">NA</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="n">rho</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">dispatch_apply</span><span class="p">(</span><span class="n">DIVIDE</span><span class="p">,</span> <span class="n">c_queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">idx</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="n">STRIDE</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">j_e</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">STRIDE</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">sum</span><span class="o">=</span><span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sum</span> <span class="o">+=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">j</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">j_e</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">s_queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">rho</span> <span class="o">+=</span> <span class="n">sum</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CBLAS  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="cm">/* clang -lcblas </span>
</span><span class='line'><span class="cm">       when linking */</span>
</span><span class='line'>    <span class="cp">#include &amp;lt;Accelerate/Accelerate.h&amp;gt; </span><span class="c1">// header for OSX&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">// rho = x.x</span>
</span><span class='line'><span class="c1">//               size, vectorX,  incX, vectorY, incY</span>
</span><span class='line'><span class="n">rho</span> <span class="o">=</span> <span class="n">cblas_ddot</span><span class="p">(</span>  <span class="n">NA</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>  <span class="mi">1</span>  <span class="p">,</span>  <span class="o">&amp;</span><span class="n">amp</span><span class="p">;(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>    <span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>I think it does not make difference because those operations are all one
dimensional BLAS1 problems.</p>

<h4 id="note-on-cache-line-size">Note on cache line size</h4>

<p>I thought that cache line size matters when I start implementing GCD version of
parallel reduction. But it ended up that you just need to give it a large enough
size for compiler to generate SIMD optimization. Note that you can get the CPU
cache line size by command <code>sysctl -n hw.cachelinesize</code> from shell.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I think the best practice so far is to use BLAS whenever you can. It’s cleaner
and highly optimized by libraries developed by Apple, Intel, or other HPC
foundations. For other operation that BLAS don’t support, GCD is a good choice
and easy to migrate to. The pros and cons go as follows:</p>

<h4 id="openmp-over-gcd">OpenMP over GCD</h4>

<ul>
  <li>Supported by gcc, while clang doesn’t.</li>
  <li>Can be used on C, CPP, and Fortran (and many more?)</li>
  <li>Many existing numerical code uses OpenMP</li>
  <li>Easier to get start with. eg. <code>#omp parallel for</code></li>
  <li>Better syntax in reduction: <code>#omp reduction (+:sum)</code></li>
</ul>

<h4 id="gcd-over-openmp">GCD over OpenMP</h4>

<ul>
  <li>Much easier to tune performance.</li>
  <li>Tighter logic construction. Everything is encapsulated in blocks.</li>
  <li>No separated thread spawns and private variables like OpenMP.</li>
  <li>Much less parameters to adjust in compile time and run time.</li>
  <li>Highly optimized in any kinks of problem sizes.</li>
  <li>Works on iOS (OpenMP does not)</li>
</ul>

<p>I think the greatest advantage you can gain from GCD is that it is highly optimized 
on different problem sizes, because operating system takeovers task load balancing. 
It surprised me that on class W problem, OpenMP version with 16 threads is twice
as slow compares to 1 thread version. With GCD, you no longer need to handle
this unexpected result! Cheers.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handle touch events in UIWebView]]></title>
    <link href="http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview/"/>
    <updated>2012-06-18T17:53:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview</id>
    <content type="html"><![CDATA[<p>This is an annoying problem that related to my recent project. The goal is
simple: </p>

<blockquote>
  <p>handle <strong>single touch event</strong> in <code>UIWebView</code> and let it handle other touch
events as defaults.</p>
</blockquote>

<p>However this is really hard to achive…</p>

<h3 id="edit-620">Edit: 6/20</h3>

<p>I found this post:<a href="http://mithin.in/2009/08/26/detecting-taps-and-events-on-uiwebview-the-right-way/">DETECTING TAPS AND EVENTS ON UIWEBVIEW – THE RIGHT
WAY</a>.
He handles touch event via <code>- (void) sendEvent:(UIEvent*) event</code> instead of
UIGesutreRecognizer. His approach is more general and less hacky than mine. Have
a look at it also!</p>

<!-- more -->

<h3 id="responder-chain">responder chain</h3>

<p>First we need to review cocoa event responder chain, aka event delivery paths.
According to apple <a href="http://developer.apple.com/library/ios/#documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/EventsiPhoneOS/EventsiPhoneOS.html#//apple_ref/doc/uid/TP40009541-CH2-SW1">Event Handling Guide for iOS</a>:</p>

<blockquote>
  <p>The window object uses hit-testing and the responder chain to find the view to
receive the touch event. In hit-testing, a window calls <code>hitTest:withEvent:</code> on
the top-most view of the view hierarchy; this method proceeds by recursively
calling <code>pointInside:withEvent:</code> on each view in the view hierarchy that returns
<code>YES</code>, proceeding down the hierarchy until it finds the subview within whose
bounds the touch took place. That view becomes the hit-test view.</p>
</blockquote>

<p>For example, we have a single view application with a <code>UIWebView</code> in it. The
touch event on UIWebView will be delivered in following order:</p>

<ol>
  <li>UIWebView</li>
  <li>Container view</li>
  <li>Custom view controller</li>
  <li>Singleton application delegate</li>
</ol>

<p>Even if we added a <code>UIGestureRecognizer</code> on top of <code>UIWebVIew</code> in Interface
Builder, it would not be on the event deliver path.</p>

<h3 id="add-uigesturerecognizer-programmatically">Add <code>UIGestureRecognizer</code> programmatically</h3>

<p>The standard way to add touch event listener goes as follows:</p>

<ol>
  <li>alloc and init <code>UITapGestureRecognizer</code>, setup tap count and delegate</li>
  <li>attach the recognizer to container view</li>
  <li>adopt <code>&lt;UIGestureRecognizerDelegate&gt;</code> protocol and return <code>YES</code> on method <code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGesture    Recognizer:(UIGestureRecognizer *)otherGestureRecognizer</code></li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// init your view here</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// UIGestureRecognizerDelegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">otherGestureRecognizer</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The last step we let cocoa event system pass the event through every possible
handler in the responder chain. Thus both <code>UIWebView</code> and
<code>UITapGestureRecognizer</code> will handle the touch event. Now we only have to make
sure it handles single tap event, not long touch, double tap, or drag event.</p>

<h3 id="problem-of-uitapgesturerecognizer">Problem of <code>UITapGestureRecognizer</code></h3>

<p>At first, I tried to implement my event handler with cocoa target action
mechanism, and use <code>requireGestureRecognizerToFail</code> to tell cocoa that I don’t
want it to trigger double tap nor triple tap events.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'>    <span class="c1">// Touch event handler</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tripleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap:</span><span class="p">)];</span>
</span><span class='line'><span class="n">tripleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">doubleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">tripleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">doubleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">doubleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];{</span> <span class="p">}</span> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">singleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="n">gesture</span> <span class="p">{</span> <span class="c1">// handle event } </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>However, <strong>it just don’t work!!</strong> It always triggered the <code>singleTap:</code> method
when I tapped twice or more. I need to find another way to fix the problem.</p>

<h3 id="hack-on-uigesturerecognizerdelegate">Hack on <code>&lt;UIGestureRecognizerDelegate&gt;</code></h3>

<p>There are two useful instance method in <code>&lt;UIGestureRecognizerDelegate&gt;</code>:</p>

<ol>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch</code>
  return <code>YES</code> (the default) to allow the gesture recognizer to examine the touch object,
  NO to prevent the gesture recognizer from seeing this touch object.
  This method is called before <code>touchesBegan:withEvent:</code> is called on the gesture
  recognizer for a new touch.</p>
  </li>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer</code>
  return <code>YES</code> to allow both gestureRecognizer and otherGestureRecognizer to recognize
  their gestures simultaneously. The default implementation returns <code>NO</code>—-no two
  gestures can be recognized simultaneously. This method would be called
  frequently during long touch, drag, double tapped or any other kinds of
  events.</p>
  </li>
</ol>

<p>The <code>(UITouch *) touch</code> in first method has property <code>tapCount</code>, which is what
we want. Sadly this method is called immediately as user tap on the device.
That is, if we log out the message like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="err">@”</span><span class="n">gestureRecognizer</span> <span class="nl">shouldReceiveTouch:</span> <span class="n">tapCount</span> <span class="o">=</span> <span class="o">%</span><span class="n">d</span><span class="err">”</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And tap twice, it will print out</p>

<pre><code>gestureRecognizer shouldReceiveTouch: tapCount = 1
gestureRecognizer shouldReceiveTouch: tapCount = 2
</code></pre>

<p>because <code>gestureRecognizer shouldReceiveTouch:</code> will be triggered every time
you touch the screen.</p>

<p>The way to differ single tap and others is to use a <code>NSTimer</code> that triggers the
handler later and cancel the timer if <code>tapCount &gt;= 2</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">WTViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">assign</span><span class="p">)</span> <span class="n">UIGestureRecognizerState</span> <span class="n">gestureState</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="n">implementation</span> <span class="n">WTViewController</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">gestureState</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="n">touch</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">timerWithTimeInterval:</span><span class="mf">0.5</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSingleTap:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer:</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="nl">forMode:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">otherGestureRecognizer</span><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">gestureRecognizer</span><span class="p">.</span><span class="n">state</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Handler will be called from timer</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleSingleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">gestureState</span><span class="o">==</span><span class="n">UIGestureRecognizerStateRecognized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="err">@”</span><span class="n">SingleTap</span><span class="err">”</span> <span class="nl">message:</span><span class="err">@”</span><span class="n">Oh</span> <span class="n">yes</span><span class="o">!</span><span class="err">”</span> <span class="nl">delegate:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span><span class="err">@”</span><span class="n">OK</span><span class="err">”</span> <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The timer can solve multiple taps issue, but it cannot recognize long touch. The
long touch cannot be recognized in <code>gestureRecognizer shouldReceiveTouch:</code>
method, but can be detected in
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> method. If the touch went
too long, the <code>gestureRecognizer.state</code> would be
<code>UIGestureRecognizerStateFailed</code>. Thus I record the state and check it when the
timer finished.</p>

<p>There is one more thing that I should mentioned:
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> may not be called as
frequently as we might expected. If we tap once, wait, and long touch the
device, <code>handleSingleTap</code> may still recognize the event to be a quick tap
because <code>self.gestureState</code> may still be <code>UIGestureRecognizerStateRecognized</code> at
the time. The way to prevent this result is to reset <code>self.gestureState</code>
every time we start the timer.</p>

<h3 id="source-code">Source code</h3>

<p>You can find the source code on my <a href="https://github.com/dryman/UIWebTouch">github page</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug UIWebView in your iOS app]]></title>
    <link href="http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app/"/>
    <updated>2012-06-17T15:44:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app</id>
    <content type="html"><![CDATA[<p>It is often to embed a UIWebView in an iOS app. However it doesn’t provide the
powerful webkit inspector by default. Nathan de Vries has written a
<a href="http://atnan.com/blog/2011/11/17/enabling-remote-debugging-via-private-apis-in-mobile-safari/">post</a> to solve the problem, but the solution didn’t work on my XCode
4 with Clang front end.</p>

<!-- more -->

<p>This is Nathan’s solution:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Nathan’s solution </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="n">_enableRemoteInspector</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler will complain that you can’t force <code>WebView</code> to perform private
method <code>_enableRemoteInspector</code>. Thus, I use <code>performSelector:@selector()</code> instead
of direct method call. Guess what? The compiler accept the hack. Awesome!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'><span class="cp">    // enable the hack only when we use simulator</span>
</span><span class='line'><span class="cp">#if (TARGET_IPHONE_SIMULATOR)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">_enableRemoteInspector</span><span class="p">)];</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now simply run your iphone simulator and open the url <code>localhost:9999</code> to view your inspector. <strong>Voilà!</strong></p>

<h3 id="edit">Edit</h3>

<p><a href="https://github.com/brainlock">brainlock</a> shared his <a href="https://github.com/brainlock/ios-remote-inspector">remote inspector</a> that can use proxy
to debug <em>on the device</em>. Awesome!</p>

]]></content>
  </entry>
  
</feed>
