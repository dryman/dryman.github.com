<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-06-17T16:25:24+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug UIWebView in your iOS app]]></title>
    <link href="http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app/"/>
    <updated>2012-06-17T15:44:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app</id>
    <content type="html"><![CDATA[<p>It is often to embed a UIWebView in an iOS app. However it doesn’t provide the
powerful webkit inspector by default. Nathan de Vries has written a
<a href="http://atnan.com/blog/2011/11/17/enabling-remote-debugging-via-private-apis-in-mobile-safari/">post</a> to solve the problem, but the solution didn’t work on my XCode
4 with Clang front end.</p>

<!-- more -->

<p>This is Nathan’s solution:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Nathan’s solution </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="n">_enableRemoteInspector</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler will complain that you can’t force <code>WebView</code> to perform private
method <code>_enableRemoteInspector</code>. Thus, I use <code>performSelector:@selector()</code> instead
of direct method call. Guess what? The compiler accept the hack. Awesome!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'><span class="cp">    // enable the hack only when we use simulator</span>
</span><span class='line'><span class="cp">#if (TARGET_IPHONE_SIMULATOR)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">_enableRemoteInspector</span><span class="p">)];</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now simply run your iphone simulator and open the url <code>localhost:9999</code> to view your inspector. <strong>Voilà!</strong></p>

]]></content>
  </entry>
  
</feed>
