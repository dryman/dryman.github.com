<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2017-05-09T07:56:22-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dance with Objective-C dynamic types]]></title>
    <link href="http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types/"/>
    <updated>2012-10-30T13:58:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/10/30/dance-with-objective-c-dynamic-types</id>
    <content type="html"><![CDATA[<p>Objective-C is a super set of C language. The entire language is a preprocessor
skin added to C language and a powerful runtime system. With this runtime system,
one can have full featured object oriented programming interface, functional
programming environment, and magical dynamic typing system. </p>

<p>In this post, I’ll go through common tasks you can do with Objective-C typing
system, including querying normal <code>NSObject</code> types, packing static type with
<code>NSValue</code>, testing core foundation references, and validating if a pointer is a
valid object pointer.</p>

<!-- more -->

<h2 id="objective-c-type-system">Objective-C type system</h2>

<p>To determine an Objective-C object type is super easy. Just use <code>isKindOfClass</code>
method and it is done.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testObjectType:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do something with number</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span> <span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// do something with values…</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Why do we need this mechanism? One application is implementing key value coding
with some known range of types. For example, Core Animation listed these
properties are animatable:</p>

<ul>
  <li>anchorPoint</li>
  <li>backgroundColor</li>
  <li>backgroundFilters</li>
  <li>borderColor</li>
  <li>borderWidth</li>
  <li>bounds</li>
  <li>compositingFilter</li>
  <li>contents</li>
  <li>contentsRect</li>
  <li>cornerRadius</li>
  <li>doubleSided</li>
  <li>filters</li>
  <li>frame</li>
  <li>hidden</li>
  <li>mask</li>
  <li>masksToBounds</li>
  <li>opacity</li>
  <li>position</li>
  <li>shadowColor</li>
  <li>shadowOffset</li>
  <li>shadowOpacity</li>
  <li>shadowRadius</li>
  <li>sublayers</li>
  <li>sublayerTransform</li>
  <li>transform</li>
  <li>zPosition</li>
</ul>

<p>These properties are categorized in several types includes <code>CGPoint</code>, <code>CGRect</code>,
<code>CGFloat</code>, <code>CGImageRef</code>, <code>CGColorRef</code>, and even <code>BOOL</code>. Each kind of type
require individual implementation to operate its value. Thankfully,
Objective C dynamic type system allows us to pass-in the value with generic type
<code>id</code> and determine the actual type at runtime. <code>id</code> is simply a void
pointer. The objective c object itself is a struct which have a <code>isa</code> pointer
points to actual class which defines its instance variables, methods, and class
inheritances.</p>

<h2 id="packaging-static-c-types-with-nsvalue">Packaging static C types with NSValue</h2>

<p>Objective C is a skin language based on C, so it is very often to use C types
like int, float, pointer to struct…etc. However, these static types violate
Objective-C’s dynamic typing idioms. Apple introduced <code>NSValue</code> as a container
for a single C or Objective-C data item. It can hold any C types such as int,
float, char, pointers, structures, and object ids. It not only wrap the item
into an Objective-C object, but also encode the type information of the original
object.</p>

<p>To create an <code>NSValue</code> object, you pass it a pointer to the item, along with the
encoded type information generated by <code>@encode()</code> keyword.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGPoint</span> <span class="n">origin</span> <span class="o">=</span> <span class="n">CGPointMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">NSValue</span> <span class="o">*</span> <span class="n">originValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithBytes:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">origin</span> <span class="nl">objCType:</span><span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>@encode()</code> is a compiler directive which can accepts all types that can be used
as an argument of C <code>sizeof()</code> operator. <code>@encode()</code> returns a <code>const char*</code>
string encoding that type. The encoding is specified in 
<a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective-C runtime type encodings</a>.</p>

<p>To illustrate this, see the following examples:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="kt">int</span> <span class="o">**</span> <span class="p">)</span>
</span><span class='line'><span class="c1">// ==&amp;gt; “{^^i}”</span>
</span><span class='line'><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ==&amp;gt; “{CGPoint=ff}”</span>
</span><span class='line'><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">CGColorRef</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ==&amp;gt; “^{CGColor=}”</span>
</span><span class='line'><span class="err">@</span><span class="n">encoding</span><span class="p">(</span><span class="n">NSObject</span><span class="p">)</span>
</span><span class='line'><span class="c1">// ==&amp;gt; “{NSObject=#}”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>With this encoded type information, it only takes few steps to determine which
type it is at runtime:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSValue</span><span class="o">*</span> <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nf">strcmp</span><span class="p">([</span><span class="n">value</span> <span class="n">objCType</span><span class="p">],</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">origin</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">value</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">origin</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// do things with origin…</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="uikit-addition-to-nsvalue">UIKit addition to NSValue</h3>

<p>UIKit added a <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/UIKit/Reference/NSValue_UIKit_Additions/Reference/Reference.html">category for NSValue</a> to represent iOS related
geometry-based data. You can use these method instead of encoding <code>CGPoint</code>,
<code>CGRect</code>, and else every time.</p>

<h2 id="bridging-with-core-foundation-objects">Bridging with Core Foundation objects</h2>

<p>Though <code>NSValue</code> covers many kind of types, in practice there are still some
types don’t fit this solution for dynamic typing. More specifically,
<code>CGColorRef</code>, <code>CGImageRef</code> and other Core Foundation types that can be treated
as Objective-C object through <a href="http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free briding</a> are the types we
don’t pack with <code>NSValue</code>.</p>

<p>A core foundation references is also a void pointer as same as <code>id</code> is.
To find out the type of an unknown <code>CFTypeRef</code>, you can query it with C function
<code>CFGetTypeID</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">obj</span><span class="p">),</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">imgRef</span> <span class="o">=</span> <span class="n">CFBridgingRetain</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// do things with imgRef</span>
</span><span class='line'>    <span class="n">CFRelease</span><span class="p">(</span><span class="n">imgRef</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>A CFTypeRef marked as <code>id</code> type can also accept basic objective C messages like
<code>isKindOfType:</code>. Hence testing an <code>id</code> typed object is quite safe as long as it
is either a <code>NSObject</code>, <code>NSValue</code>, <code>CFTypeRef</code>, <code>CGColorRef</code> or any other
Objective-C object/Core Foundation reference.</p>

<h2 id="testing-if-a-pointer-is-a-valid-nsobject">Testing if a pointer is a valid NSObject</h2>

<p>There is a blog post on Cocoa with love about
<a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a>.
In my point of view, programmer <em>should</em> pass in a valid object for sure. If it
is not a valid object, just let it crash.</p>

<h2 id="puting-it-all-together">Puting it all together</h2>

<p>This piece of code is part of my project <a href="https://github.com/dryman/FCAnimationFactory">FCAnimationFactory</a> for the
purpose of interpolating different kinds of value with respect to their types.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>FCAnimationFactory.m  </span><a href='https://github.com/dryman/FCAnimationFactory/blob/master/FCEasingAnimation/FCAnimationFactory.m'>link</a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">float</span><span class="p">))</span><span class="nf">makeValueScalingBlockFromValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">fromValue</span> <span class="nf">ToValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">toValue</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fromValue</span><span class="o">==</span><span class="nb">nil</span> <span class="o">||</span> <span class="n">toValue</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span> <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="err">@”</span><span class="n">fromValue</span> <span class="n">and</span> <span class="n">toValue</span> <span class="n">must</span> <span class="n">not</span> <span class="n">be</span> <span class="nb">nil</span><span class="err">”</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">fromValue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * single float is handled in NSNumber</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">v1</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">v2</span> <span class="o">=</span> <span class="p">[(</span><span class="n">NSNumber</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">diffValue</span> <span class="o">=</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">v1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">result</span> <span class="o">=</span> <span class="n">factor</span><span class="o">*</span><span class="n">diffValue</span> <span class="o">+</span> <span class="n">v1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">result</span><span class="p">];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * NSValue handles CGPoint, CGSize, CGRect, and CATransform3D</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">value</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">NSValue</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">objCType</span> <span class="o">=</span> <span class="p">[</span><span class="n">value</span> <span class="n">objCType</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGPoint</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGPoint</span> <span class="n">pt0</span><span class="p">,</span> <span class="n">pt1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">pt0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">pt1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt1</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">pt0</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGPoint:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGSize</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGSize</span> <span class="n">size0</span><span class="p">,</span> <span class="n">size1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">size0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">size1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">size1</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">size0</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGSize:</span><span class="n">CGSizeMake</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CGRect</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">CGRect</span> <span class="n">rect0</span><span class="p">,</span> <span class="n">rect1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">fromValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rect0</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[(</span><span class="n">NSValue</span><span class="o">*</span><span class="p">)</span><span class="n">toValue</span> <span class="nl">getValue:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">rect1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">float</span> <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">rect1</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span><span class="o">*</span><span class="n">factor</span> <span class="o">+</span> <span class="n">rect0</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCGRect:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)];</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">objCType</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">CATransform3D</span><span class="p">))</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CATransform3D type currently not supported&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;Unknown NSValue type %s&quot;</span><span class="p">,</span><span class="n">objCType</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGColorGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span>
</span><span class='line'>        <span class="n">CGColorRef</span> <span class="n">fromColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">fromValue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">CGColorRef</span> <span class="n">toColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CGColorRef</span><span class="p">)</span><span class="n">toValue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">size_t</span> <span class="n">num</span> <span class="o">=</span> <span class="n">CGColorGetNumberOfComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">fromComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">fromColor</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="n">CGFloat</span> <span class="o">*</span><span class="n">toComp</span> <span class="o">=</span> <span class="n">CGColorGetComponents</span><span class="p">(</span><span class="n">toColor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">CGFloat</span> <span class="n">newComp</span><span class="p">[</span><span class="n">num</span><span class="p">];</span> <span class="c1">// same as malloca</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">newComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">toComp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">*</span> <span class="n">factor</span> <span class="o">+</span> <span class="n">fromComp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">CGColorRef</span> <span class="n">retColor</span> <span class="o">=</span> <span class="n">CGColorCreate</span><span class="p">(</span><span class="n">CGColorGetColorSpace</span><span class="p">(</span><span class="n">fromColor</span><span class="p">),</span> <span class="n">newComp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">retColor</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">CFGetTypeID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">value</span><span class="p">)</span> <span class="o">==</span> <span class="n">CGImageGetTypeID</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;CGImageRef should be handled in another class&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSAssert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">@&quot;value type unknown&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">float</span> <span class="n">factor</span><span class="p">){</span> <span class="k">return</span> <span class="nb">nil</span><span class="p">;};</span>    <span class="c1">// turn off compiler warnings } </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>It is amazing that a langauge so close to C can create such a rich type system
without byte code, VM, or complex sybol tricks (like what C++ does). Though
handling differnt types can be a bit painful sometimes, but it brings powerful
polimorphsm to the language. Thus programmer can create highly abstract API
and framework with differnt data types that share the same methods.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.cocoawithlove.com/2010/10/testing-if-arbitrary-pointer-is-valid.html">how to test if an arbitary pointer is a valid NSObject</a></li>
  <li><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Objective C type encoding</a></li>
  <li><a href="http://developer.apple.com/library/mac/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/Inspecting.html">Inspecting core foundation object</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block and debugger]]></title>
    <link href="http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger/"/>
    <updated>2012-09-30T14:32:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger</id>
    <content type="html"><![CDATA[<p>In the last post, we discussed block byref internal structures and showed the
sample code of how to <code>printf</code> it. However, we don’t want to write that much
helper functions every time! Thanks for
<a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a>, we can now load
<code>gdb</code>/<code>lldb</code> plugins and no need to do that anymore! ;D</p>

<!-- more -->

<h2 id="gdb">GDB</h2>

<p>Add these line into your <code>~.gdbinit</code> file. It was originally created by Big Nerd
Ranch Inc.
I renamed the functions from <code>dump-block-literal</code> and <code>dump-block-byref</code> to
<code>pblock</code> and <code>pbyref</code>.</p>

<pre><code>define pblock
    printf "%s", (const char*)_Block_dump($arg0)
end

document pblock
    Dumps runtime information about the supplied block reference
    Argument is the name or address of a block literal
end

define pbyref
    printf "%s", (const char*)_Block_byref_dump((char*)&amp;$arg0 - 2*sizeof(int) - 2*sizeof(void*))
end

document pbyref
    Dumps runtime information about the supplied __block variable
    Argument is a pointer to the variable embeded in a block byref structure
end
</code></pre>

<p>To use it, you just simply type <code>pbyref</code> and <code>pblock</code> followed by a variable in <code>gdb</code>.</p>

<pre><code>(gdb) pbyref x
byref data block 0x7fff5fbff480 contents:
  forwarding: 0x7fff5fbff480
  flags: 0x0
  size: 32

(gdb) pblock localBlock
^0x7fff5fbff450 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="lldb">LLDB</h2>

<p>I made a <code>lldb</code> version this weekend. You can find it on <a href="https://github.com/dryman/lldb-block-helper">Github</a>.
I tried to use <code>command alias</code> or <code>command regex</code> at first, but it just won’t
work. So I just write a python plugin for lldb and load it in <code>.lldbinit</code>. The
code is quite trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>blockHelper.py</span><a href='https://github.com/dryman/lldb-block-helper/blob/master/blockHelper.py'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">lldb</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">commands</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">pbyref</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="err">“</span><span class="n">expr</span> <span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,(</span><span class="n">const</span> <span class="n">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">_Block_byref_dump</span><span class="p">((</span><span class="n">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="err">”</span> <span class="o">+</span> \
</span><span class='line'>    <span class="n">command</span> <span class="o">+</span> <span class="err">“</span><span class="o">-</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sizeof</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sizeof</span><span class="p">(</span><span class="n">void</span> <span class="o">*</span><span class="p">)));</span><span class="err">”</span>
</span><span class='line'>    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">pblock</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="err">“</span><span class="n">expr</span> <span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,(</span><span class="n">const</span> <span class="n">char</span><span class="o">*</span><span class="p">)</span><span class="n">_Block_dump</span><span class="p">(</span><span class="err">“</span> <span class="o">+</span> <span class="n">command</span> <span class="o">+</span> <span class="err">“</span><span class="p">));</span><span class="err">”</span>
</span><span class='line'>    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__lldb_init_module</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="err">‘</span><span class="n">command</span> <span class="n">script</span> <span class="n">add</span> <span class="o">-</span><span class="n">f</span> <span class="n">blockHelper</span><span class="o">.</span><span class="n">pbyref</span> <span class="n">pbyref</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="err">‘</span><span class="n">command</span> <span class="n">script</span> <span class="n">add</span> <span class="o">-</span><span class="n">f</span> <span class="n">blockHelper</span><span class="o">.</span><span class="n">pblock</span> <span class="n">pblock</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">‘</span><span class="n">The</span> <span class="err">“</span><span class="n">pbyref</span><span class="err">”</span> <span class="n">command</span> <span class="n">has</span> <span class="n">been</span> <span class="n">installed</span> <span class="ow">and</span> <span class="ow">is</span> <span class="n">ready</span> <span class="n">of</span> <span class="n">use</span><span class="o">.</span><span class="err">’</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">‘</span><span class="n">The</span> <span class="err">“</span><span class="n">pblock</span><span class="err">”</span> <span class="n">command</span> <span class="n">has</span> <span class="n">been</span> <span class="n">installed</span> <span class="ow">and</span> <span class="ow">is</span> <span class="n">ready</span> <span class="n">of</span> <span class="n">use</span><span class="o">.</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="install">INSTALL</h3>

<ul>
  <li>Download this git repostory to your home directory as <code>.lldb</code>.</li>
</ul>

<pre><code>git clone https://github.com/dryman/lldb-block-helper.git ~/.lldb
</code></pre>

<ul>
  <li>add this line into your <code>~/.lldbinit</code>.</li>
</ul>

<pre><code>command script import ~/.lldb/blockHelper.py 
</code></pre>

<h3 id="usage">USAGE</h3>

<pre><code>(lldb) pbyref x
&lt;no result&gt;
byref data block 0x100713f90 contents:
  forwarding: 0x100713f90
  flags: 0x1000004
  size: 32

(lldb) pblock localBlock
&lt;no result&gt;
^0x7fff5fbff480 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://lldb.llvm.org/python-reference.html">lldb python references</a></li>
  <li><a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C/ObjC block syntax explained]]></title>
    <link href="http://www.idryman.org/blog/2012/09/21/c-slash-objc-c-block-syntax-explained/"/>
    <updated>2012-09-21T20:33:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/09/21/c-slash-objc-c-block-syntax-explained</id>
    <content type="html"><![CDATA[<p>Block is heavily used in objective-c  APIs. If you want to
write concurrent and responsive interface, you will need blocks and grand
central dispatch. Blocks also bring many goods form functional programming to cocoa.
It is just awesome.</p>

<p>However, when I first learn blocks I found the syntax confuses me a lot. 
This is why I wrote this article. Hope this article can help people who have the
same problem as I did.</p>

<!-- more -->

<h2 id="declare-a-block-variable">Declare a block variable</h2>

<p>Block syntax inherited form C’s function pointers. To declare a block variable,
you write:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">multiply</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="p">};</span>
</span><span class='line'>  <span class="c1">//^^^^^^^^^^^^^^^^^^^^^^^^          ^^^^^^^^^^^  ^^^^^^^^^^^^^^^</span>
</span><span class='line'>  <span class="c1">//  declare block variable          block          block body</span>
</span><span class='line'>  <span class="c1">//  “multiply”                      argument&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">multiply</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 15   // execute a block </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>It is similar to function pointer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="kt">int</span> <span class="n">mutiply</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">functionPt</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">mutiply</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">functionPt</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 15 </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="block-literal-syntax-shortcut">Block literal syntax shortcut</h3>

<p>Block literal can be written in various ways:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="err">…</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span> <span class="p">{</span><span class="err">…</span><span class="p">};</span>   <span class="c1">// same&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{...};</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>          <span class="c1">// same</span>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>              <span class="c1">// same</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>             <span class="c1">// valid</span>
</span><span class='line'><span class="p">(</span><span class="o">^</span><span class="n">myBLock</span><span class="p">)()</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>                  <span class="c1">// invalid</span>
</span><span class='line'><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span><span class="p">{...};</span>               <span class="c1">// invalid </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="anonymous-block">Anonymous block</h3>

<p>You don’t need a block variable to use a block. A block without a block variable
is called <em>anonymous block</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="c1">// An anonymous block</span>
</span><span class='line'>    <span class="o">^</span><span class="kt">int</span> <span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">)</span> <span class="p">{</span><span class="err">…</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Many objective-c methods accepts anonymous block:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingComparator:</span>
</span><span class='line'>        <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">){</span>
</span><span class='line'>            <span class="err">…</span>
</span><span class='line'>        <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="compare-with-function-pointer">Compare with function pointer</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="k">struct</span> <span class="n">s_data</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span><span class="o">*</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSInteger</span> <span class="n">compareFunction</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">context</span><span class="p">){</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="p">)</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// do things</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">sturct</span> <span class="n">s_data</span> <span class="o">*</span><span class="n">my_data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">s_data</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">s_data</span><span class="p">));</span>
</span><span class='line'><span class="n">s_data</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">s_data</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;abc&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">s_data</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">context</span> <span class="o">=</span> <span class="n">my_data</span><span class="p">;</span>
</span><span class='line'><span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingFunction:</span> <span class="n">compareFunction</span>
</span><span class='line'>                                                       <span class="nl">context:</span><span class="n">context</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>What does above mean? Well, if you want to pass a callback function to
elsewhere, sometimes you might also need to pass data. To do that, you first
pack your data into a <code>struct</code>, and use a <code>void</code> pointer points to it. Then you
pass the callback function and the <code>void</code> pointer to the function. Finally you
dereference the <code>void</code> pointer back to the <code>struct</code>.</p>

<p>With block, all variables in it are captured. You no longer need to do that type
casting hack to pass data.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSNumber</span> <span class="o">*</span><span class="n">num</span> <span class="o">=</span> <span class="err">@</span><span class="mi">3</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">sortedArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">unsortedArray</span> <span class="nl">sortedArrayUsingComparator:</span>
</span><span class='line'>    <span class="o">^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj1</span><span class="p">,</span> <span class="kt">id</span> <span class="n">obj2</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">num</span> <span class="nl">compare:</span> <span class="n">obj1</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">// num is retained inside the block</span>
</span><span class='line'>    <span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="typedef">Typedef</h2>

<p>We can use <code>typedef</code> to define a reusable type:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="k">typedef</span> <span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlockType</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MyBlockType</span> <span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="type-cast">Type cast</h2>

<p>As other types, you can also type cast a block. The syntax is a little weired,
though.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">someContext</span><span class="p">;</span> <span class="c1">// Probably comes from a function’s argument;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span><span class="n">someContext</span><span class="p">;</span>
</span><span class='line'><span class="c1">// block</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">myFnPt</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span><span class="n">someContext</span><span class="p">;</span>
</span><span class='line'><span class="c1">// function pointer </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="block-in-objective-c-class">Block in Objective-C class</h2>

<h3 id="property">property</h3>

<p>Block in objective C is quite trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="accessors-and-method-arguments">Accessors and method arguments</h3>

<p>However, it’s strange in method declaration and accessors.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">))</span> <span class="nf">getMyBlock</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">setMyBlock:</span> <span class="p">(</span><span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">))</span> <span class="n">inputBlock</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The syntax is weird because Apple uses type cast syntax as type declaration syntax.
This is now the only way to use anonymous type in Objective-C method argument
instead of using <code>typedef</code>. This syntax won’t work in other places, either.</p>

<h2 id="other-syntaxs">Other syntaxs</h2>

<h3 id="array">Array</h3>

<p>You can define a chunk of blocks like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">int</span><span class="p">(</span><span class="o">^</span><span class="n">myBlocks</span><span class="p">[</span><span class="mi">5</span><span class="p">])(</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">myBlocks</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=^</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){...};</span>
</span><span class='line'><span class="n">myBlocks</span><span class="p">[</span><span class="mi">2</span><span class="p">](</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// excecute </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h3 id="nested-blocks">Nested blocks</h3>

<p>Nested block syntax is ugly:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">(</span><span class="o">^</span><span class="n">myNestedBlock</span><span class="p">)())();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">typedef</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">VoidBlock</span><span class="p">)();</span>
</span><span class='line'><span class="n">VoidBlock</span><span class="p">(</span><span class="o">^</span><span class="n">myNestedBlock</span><span class="p">)();</span> <span class="c1">// same, better </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Readability of nested block without <code>typedef</code> is so horrible. <code>typedef</code> is
strongly recommended.</p>

<p>That’s all for block syntax! There are still topics to discuss like memory
management and grand central dispatch. I’ll discuss them in next few posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taiwan Typhoon App (2)]]></title>
    <link href="http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-2/"/>
    <updated>2012-09-16T17:30:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-2</id>
    <content type="html"><![CDATA[<p>I start from a single view application with <strong>MKMapView</strong>. Remeber to link
<code>MapKit.framework</code> in project setting.</p>

<p>This is just a prototyping app, so everything will be handled in
<code>FCViewController</code>, including</p>

<ul>
  <li><code>NSURLConnection</code> delegate: handle request and incoming data stream.</li>
  <li>Read data as string, and process it with regular expression and JSON parsing.</li>
  <li><code>MKMapView</code> delegate: create and draw annotations and overlays.</li>
</ul>

<!-- more -->

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>https://github.com/dryman/Taiwan-Typhoon-iOS/blob/master/TyphoonTW/FCViewController.h FCViewController.h </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">    #import &amp;lt;UIKit/UIKit.h&amp;gt;</span>
</span><span class='line'><span class="cp">    #import &amp;lt;MapKit/MapKit.h&amp;gt;</span>
</span><span class='line'><span class="cp">    #import &amp;lt;CoreLocation/CoreLocation.h&amp;gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">@</span><span class="n">interface</span> <span class="n">FCViewController</span> <span class="o">:</span> <span class="n">UIViewController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">MKMapViewDelegate</span><span class="p">,</span><span class="n">CLLocationManagerDelegate</span><span class="p">,</span> <span class="n">NSURLConnectionDataDelegate</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">weak</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">MKMapView</span> <span class="o">*</span><span class="n">mapView</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">clManager</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSURLConnection</span> <span class="o">*</span><span class="n">connection</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">connectionData</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="nsurlconnection">NSURLConnection</h2>

<p>I use <em>NSURLConnection</em> for networking. There are three common ways to use it:</p>

<ol>
  <li>Synchronous request (Not recommended.)</li>
  <li>Asynchronous request using block.</li>
  <li>Asynchronous request using delegate to handle respond data.</li>
</ol>

<p>I use third method for this app. To use it, you</p>

<ol>
  <li>make sure your class support <code>NSURLConnectionDataDelegate</code> protocol.</li>
  <li>alloc <code>NSURLConnection</code> object, set <code>self</code> as delegate and start
immediately (or setup some configurations like assign custom queues, and
start manually)</li>
  <li>Finally, implement these methods: 
    <ul>
      <li><code>- (void) connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response</code> </li>
      <li><code>- (void) connection:(NSURLConnection *)connection didReceiveData:(NSData *)data</code> </li>
      <li><code>- (void) connectionDidFinishLoading:(NSURLConnection *)connection</code></li>
      <li><code>- (void) connection:(NSURLConnection *)connection didFailWithError:(NSError *)error</code></li>
    </ul>
  </li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">connection</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSURLConnection</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithRequest:</span><span class="p">[</span><span class="n">NSURLRequest</span> <span class="nl">requestWithURL:</span><span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="err">@”</span><span class="nl">http:</span><span class="c1">//www.cwb.gov.tw/V7/prevent/typhoon/Data/PTA_NEW/js/datas/ty_infos.js”]] </span>
</span><span class='line'>                                          <span class="nl">delegate:</span><span class="n">self</span>
</span><span class='line'>                                          <span class="nl">startImmediately:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="kt">id</span><span class="o">=</span><span class="s">&quot;pragma-mark-nsurlconnection-delegate&quot;</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">mark</span> <span class="n">NSURLConnection</span> <span class="n">delegate</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="n">connection</span> <span class="nl">didReceiveResponse:</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="n">response</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">connectionData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableData</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="n">connection</span> <span class="nl">didReceiveData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">connectionData</span> <span class="nl">appendData:</span><span class="n">data</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">connectionDidFinishLoading:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="n">connection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// process connection data here.</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="n">connection</span> <span class="nl">didFailWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">connectionData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></li>
</ul>

<h2 id="process-data">Process data</h2>

<ol>
  <li>Read data as string.</li>
  <li>Get JSON from JavaScript using regular expression.</li>
  <li>Use <code>NSJSONSerialization</code> to parse JSON</li>
  <li>Parsed data is combination of <code>NSArray</code>, <code>NSDictionary</code>, <code>NSString</code>,
<code>NSNumber</code>, and <code>NSNull</code>.</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">connectionDidFinishLoading:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">connection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">ty_infos</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">connectionData</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="n">connectionData</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSRegularExpression</span> <span class="o">*</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="err">@”\</span><span class="p">[.</span><span class="o">+?</span><span class="err">\</span><span class="p">];</span><span class="err">”</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range_of_match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">rangeOfFirstMatchInString:</span><span class="n">ty_infos</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ty_infos</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">ty_infos</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range_of_match</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">range_of_match</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSArray</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">typhoon</span> <span class="k">in</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Use autoreleasepool to release temporary objects</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="p">[[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;fcst&quot;</span><span class="p">]</span> <span class="n">count</span><span class="p">]</span> <span class="o">+</span> <span class="p">[[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;best_track&quot;</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span>
</span><span class='line'>        <span class="n">CLLocationCoordinate2D</span> <span class="o">*</span><span class="n">line_points</span> <span class="o">=</span> <span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">length</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="n">CLLocationCoordinate2D</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">track</span> <span class="k">in</span> <span class="p">[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;best_track&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">lat</span> <span class="o">=</span> <span class="p">[[</span><span class="n">track</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lat&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">lon</span> <span class="o">=</span> <span class="p">[[</span><span class="n">track</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lon&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CLLocationCoordinate2D</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">);</span>
</span><span class='line'>            <span class="n">line_points</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'>            <span class="n">MKPointAnnotation</span> <span class="o">*</span><span class="n">centerPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPointAnnotation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="n">centerPoint</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addAnnotation:</span><span class="n">centerPoint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSDictionary</span><span class="o">*</span> <span class="n">fcst</span> <span class="k">in</span> <span class="p">[</span><span class="n">typhoon</span> <span class="nl">valueForKey:</span><span class="s">@&quot;fcst&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">lat</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lat&quot;</span><span class="p">]</span>  <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">lon</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;lon&quot;</span><span class="p">]</span>  <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CGFloat</span> <span class="n">rad</span> <span class="o">=</span> <span class="p">[[</span><span class="n">fcst</span> <span class="nl">valueForKey:</span><span class="s">@&quot;pr70&quot;</span><span class="p">]</span> <span class="n">floatValue</span><span class="p">];</span>
</span><span class='line'>            <span class="n">CLLocationCoordinate2D</span> <span class="n">location</span> <span class="o">=</span> <span class="n">CLLocationCoordinate2DMake</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">);</span>
</span><span class='line'>            <span class="n">line_points</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">location</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">MKCircle</span> <span class="o">*</span><span class="n">cir</span> <span class="o">=</span> <span class="p">[</span><span class="n">MKCircle</span> <span class="nl">circleWithCenterCoordinate:</span> <span class="n">location</span>
</span><span class='line'>                                                          <span class="nl">radius:</span> <span class="n">rad</span><span class="o">*</span><span class="mi">1000</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addOverlay:</span><span class="n">cir</span><span class="p">];</span>
</span><span class='line'>            <span class="n">MKPointAnnotation</span> <span class="o">*</span><span class="n">centerPoint</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPointAnnotation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="n">centerPoint</span><span class="p">.</span><span class="n">coordinate</span> <span class="o">=</span> <span class="n">location</span><span class="p">;</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addAnnotation:</span><span class="n">centerPoint</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">MKPolyline</span> <span class="o">*</span><span class="n">line</span> <span class="o">=</span> <span class="p">[</span><span class="n">MKPolyline</span> <span class="nl">polylineWithCoordinates:</span><span class="n">line_points</span> <span class="nl">count:</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="nl">addOverlay:</span><span class="n">line</span><span class="p">];</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">line_points</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<h2 id="mapkit">MapKit</h2>

<p>MapKit is simular to most UI elements. You setup a MKMapView, add data
(MKAnnotation, MKOverlay, …etc.) to it, and handle drawing delegate methods.
This is a prototype app, so I only use built-in <code>MKPointAnnotation</code> and
<code>MKPolyline</code> overlay. If you want to assign custom properties to annotation or
overlays, you can subclass them and implement drawing functions in delegate.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark Map View Delegate methods</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">MKOverlayView</span><span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span> <span class="nf">viewForOverlay:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">mkoverlay</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">overlay</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">MKCircle</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">MKCircleView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKCircleView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCircle:</span><span class="n">overlay</span><span class="p">];</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">fillColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.02</span><span class="p">];</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.15</span><span class="p">];</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">MKPolyline</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">MKPolylineView</span> <span class="o">*</span><span class="n">view</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPolylineView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithPolyline:</span><span class="n">overlay</span><span class="p">];</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">strokeColor</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="n">blackColor</span><span class="p">]</span> <span class="nl">colorWithAlphaComponent:</span><span class="mf">0.2</span><span class="p">];</span>
</span><span class='line'>        <span class="n">view</span><span class="p">.</span><span class="n">lineWidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">view</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">MKAnnotationView</span><span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mView</span> <span class="nf">viewForAnnotation:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">mkannotation</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="s">@&quot;pinView&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">MKAnnotationView</span> <span class="o">*</span><span class="n">annotationView</span> <span class="o">=</span> <span class="p">(</span><span class="n">MKAnnotationView</span><span class="o">*</span><span class="p">)[</span><span class="n">mView</span> <span class="nl">dequeueReusableAnnotationViewWithIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">annotationView</span><span class="o">==</span><span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">annotationView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKAnnotationView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithAnnotation:</span><span class="n">annotation</span> <span class="nl">reuseIdentifier:</span><span class="n">identifier</span><span class="p">];</span>
</span><span class='line'>        <span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="s">@&quot;typh.png&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">annotationView</span><span class="p">.</span><span class="n">image</span> <span class="o">=</span> <span class="n">img</span><span class="p">;</span>
</span><span class='line'>        <span class="n">annotationView</span><span class="p">.</span><span class="n">canShowCallout</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">annotationView</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></mkannotation></mkoverlay></p>

<p>That’s it. Now we have a native interface to show typhoon prediction!</p>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/typhoon_tw/typhoon-09-16.png" /></p>

<h2 id="source-code">Source code</h2>

<p>The source code is on <a href="https://github.com/dryman/Taiwan-Typhoon-iOS">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taiwan Typhoon App (1)]]></title>
    <link href="http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1/"/>
    <updated>2012-09-16T16:11:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/09/16/taiwan-typhoon-app-1</id>
    <content type="html"><![CDATA[<p>Taiwan is an island next to Pacific ocean, and one kind of serious disaster in
Taiwan is typhoon. Fortunately, We have best typhoon researches in the world,
and I want to make a step further to let people read typhoon predictions on iOS.</p>

<p><img width="50%" style="margin-left:25%;" src="http://www.idryman.org/images/typhoon_tw/typhoon-08-23.png" /></p>

<!-- more -->

<p>There are two main resources that we can get typhoon prediction. One is 
<a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">Central Weather Bureau, Taiwan (CWB)</a>, and the other is 
<a href="http://jtwccdn.appspot.com/JTWC/">Joint Typhoon Warning Center (JTWC)</a>. Here I’ll focus on <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> data.</p>

<h2 id="setup-inspect-environment">Setup inspect environment</h2>

<p>At the first scene, <a href="http://www.cwb.gov.tw/V7e/prevent/typhoon/ty.htm?">CWB</a> seems hard to parse because it uses images
to show potential track area instead of using JSON API and google map.</p>

<p><img src="/images/typhoon_tw/cwb_pta.png" alt="cwb pta" title="figure 2" /></p>

<p>The html code is quite dirty and hard to inspect. The tip is to find the <code>iframe</code>
element from the inspector.</p>

<p><img src="/images/typhoon_tw/inspect_iframe.png" alt="inspect iframe" title="figure 3" /></p>

<p>Then, open the direct link in another window.</p>

<p><img src="/images/typhoon_tw/cwb_pta_iframe.png" alt="cwb iframe" title="figure 4" /></p>

<p>Now we have a relatively cleaner html to inspect.</p>

<p><img src="/images/typhoon_tw/inspector.png" alt="inspector" title="figure 5" /></p>

<h3 id="get-the-information-source">Get the information source</h3>

<p>I’m lucky. The source is right in JavaScript file.</p>

<p><img src="/images/typhoon_tw/ty_infos.png" alt="ty info" title="figure 6" /></p>

<p>Though it’s not JSON, but almost (lol). The direct link is</p>

<p><img src="/images/typhoon_tw/ty_infos_dir.png" alt="ty info dir" title="figure 7" /></p>

<p>The parameter of the link seems to be a clue that we can query history records,
but it doesn’t. With or without the parameter it always gives us the newest
information of typhoons.</p>

<h2 id="parse">Parse</h2>

<p>We only interested in <code>var typhs= [...]</code>. It’s easy to get data out using regular
expression.</p>

<p>I tested regular expression with Perl before I actually implement it in
Objective-C. If you need a tool to do text processing, Perl is always the best
choice. I strongly recommend people to learn Perl, it’s worthy.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>https://github.com/dryman/Taiwan-Typhoon-iOS/blob/master/parse.pl source </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'>    <span class="c1">#!/usr/bin/env perl</span>
</span><span class='line'>    <span class="k">use</span> <span class="mf">5.010</span><span class="p">;</span>
</span><span class='line'>    <span class="k">use</span> <span class="n">English</span><span class="p">;</span><span class="sr">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span><span class="nb">undef</span> <span class="nv">$INPUT_RECORD_SEPARATOR</span><span class="p">;</span>  <span class="c1"># disable input seprator &quot;\n&quot;</span>
</span><span class='line'><span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&quot;ty_infos.js&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$_</span> <span class="o">=</span> <span class="o">&amp;</span><span class="ow">lt</span><span class="p">;</span><span class="nv">$fh</span><span class="o">&amp;</span><span class="ow">gt</span><span class="p">;;</span>                     <span class="c1"># read endire file as string into $_</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/\[.+?\];/s</span><span class="p">;</span>                    <span class="c1"># /s modifier let &#39;.&#39; match &quot;\n&quot;</span>
</span><span class='line'>                                <span class="c1"># +? match not greedly</span>
</span><span class='line'><span class="n">say</span> <span class="nv">$MATCH</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>Beware that not to match greedly, else you won’t get what you want. Now we can
write it in much more verbose Objective-C.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>    <span class="n">NSRegularExpression</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">regex</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSRegularExpression</span> <span class="nl">regularExpressionWithPattern:</span><span class="err">@”\</span><span class="p">[.</span><span class="o">+?</span><span class="err">\</span><span class="p">];</span><span class="err">”</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">err</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range_of_match</span> <span class="o">=</span> <span class="p">[</span><span class="n">regex</span> <span class="nl">rangeOfFirstMatchInString:</span><span class="n">ty_infos</span> <span class="nl">options:</span><span class="n">NSRegularExpressionDotMatchesLineSeparators</span> <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ty_infos</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">json</span> <span class="o">=</span> <span class="p">[</span><span class="n">ty_infos</span> <span class="nl">substringWithRange:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">range_of_match</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">range_of_match</span><span class="p">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSArray</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="p">[</span><span class="n">json</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="nl">options:</span><span class="mi">0</span> <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

]]></content>
  </entry>
  
</feed>
