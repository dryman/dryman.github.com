<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2012-09-02T15:51:23+08:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handle touch events in UIWebView]]></title>
    <link href="http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview/"/>
    <updated>2012-06-18T17:53:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/18/handle-touch-events-in-uiwebview</id>
    <content type="html"><![CDATA[<p>This is an annoying problem that related to my recent project. The goal is
simple: </p>

<blockquote>
  <p>handle <strong>single touch event</strong> in <code>UIWebView</code> and let it handle other touch
events as defaults.</p>
</blockquote>

<p>However this is really hard to achive…</p>

<h3 id="edit-620">Edit: 6/20</h3>

<p>I found this post:<a href="http://mithin.in/2009/08/26/detecting-taps-and-events-on-uiwebview-the-right-way/">DETECTING TAPS AND EVENTS ON UIWEBVIEW – THE RIGHT
WAY</a>.
He handles touch event via <code>- (void) sendEvent:(UIEvent*) event</code> instead of
UIGesutreRecognizer. His approach is more general and less hacky than mine. Have
a look at it also!</p>

<!-- more -->

<h3 id="responder-chain">responder chain</h3>

<p>First we need to review cocoa event responder chain, aka event delivery paths.
According to apple <a href="http://developer.apple.com/library/ios/#documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/EventsiPhoneOS/EventsiPhoneOS.html#//apple_ref/doc/uid/TP40009541-CH2-SW1">Event Handling Guide for iOS</a>:</p>

<blockquote>
  <p>The window object uses hit-testing and the responder chain to find the view to
receive the touch event. In hit-testing, a window calls <code>hitTest:withEvent:</code> on
the top-most view of the view hierarchy; this method proceeds by recursively
calling <code>pointInside:withEvent:</code> on each view in the view hierarchy that returns
<code>YES</code>, proceeding down the hierarchy until it finds the subview within whose
bounds the touch took place. That view becomes the hit-test view.</p>
</blockquote>

<p>For example, we have a single view application with a <code>UIWebView</code> in it. The
touch event on UIWebView will be delivered in following order:</p>

<ol>
  <li>UIWebView</li>
  <li>Container view</li>
  <li>Custom view controller</li>
  <li>Singleton application delegate</li>
</ol>

<p>Even if we added a <code>UIGestureRecognizer</code> on top of <code>UIWebVIew</code> in Interface
Builder, it would not be on the event deliver path.</p>

<h3 id="add-uigesturerecognizer-programmatically">Add <code>UIGestureRecognizer</code> programmatically</h3>

<p>The standard way to add touch event listener goes as follows:</p>

<ol>
  <li>alloc and init <code>UITapGestureRecognizer</code>, setup tap count and delegate</li>
  <li>attach the recognizer to container view</li>
  <li>adopt <code>&lt;UIGestureRecognizerDelegate&gt;</code> protocol and return <code>YES</code> on method <code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGesture    Recognizer:(UIGestureRecognizer *)otherGestureRecognizer</code></li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// init your view here</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// UIGestureRecognizerDelegate</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">otherGestureRecognizer</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The last step we let cocoa event system pass the event through every possible
handler in the responder chain. Thus both <code>UIWebView</code> and
<code>UITapGestureRecognizer</code> will handle the touch event. Now we only have to make
sure it handles single tap event, not long touch, double tap, or drag event.</p>

<h3 id="problem-of-uitapgesturerecognizer">Problem of <code>UITapGestureRecognizer</code></h3>

<p>At first, I tried to implement my event handler with cocoa target action
mechanism, and use <code>requireGestureRecognizerToFail</code> to tell cocoa that I don’t
want it to trigger double tap nor triple tap events.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span>
</span><span class='line'>    <span class="c1">// Touch event handler</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">tripleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">doubleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">singleTap</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITapGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">action:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">singleTap:</span><span class="p">)];</span>
</span><span class='line'><span class="n">tripleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'><span class="n">doubleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">numberOfTapsRequired</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">tripleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">doubleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">singleTap</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">doubleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">tripleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">singleTap</span> <span class="nl">requireGestureRecognizerToFail:</span><span class="n">doubleTap</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addGestureRecognizer:</span><span class="n">singleTap</span><span class="p">];{</span> <span class="p">}</span> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">singleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="n">gesture</span> <span class="p">{</span> <span class="c1">// handle event } </span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>However, <strong>it just don’t work!!</strong> It always triggered the <code>singleTap:</code> method
when I tapped twice or more. I need to find another way to fix the problem.</p>

<h3 id="hack-on-uigesturerecognizerdelegate">Hack on <code>&lt;UIGestureRecognizerDelegate&gt;</code></h3>

<p>There are two useful instance method in <code>&lt;UIGestureRecognizerDelegate&gt;</code>:</p>

<ol>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldReceiveTouch:(UITouch *)touch</code>
  return <code>YES</code> (the default) to allow the gesture recognizer to examine the touch object,
  NO to prevent the gesture recognizer from seeing this touch object.
  This method is called before <code>touchesBegan:withEvent:</code> is called on the gesture
  recognizer for a new touch.</p>
  </li>
  <li>
    <p><code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer</code>
  return <code>YES</code> to allow both gestureRecognizer and otherGestureRecognizer to recognize
  their gestures simultaneously. The default implementation returns <code>NO</code>—-no two
  gestures can be recognized simultaneously. This method would be called
  frequently during long touch, drag, double tapped or any other kinds of
  events.</p>
  </li>
</ol>

<p>The <code>(UITouch *) touch</code> in first method has property <code>tapCount</code>, which is what
we want. Sadly this method is called immediately as user tap on the device.
That is, if we log out the message like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">gestureRecognizer</span> <span class="nf">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="nv">touch</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="err">@”</span><span class="n">gestureRecognizer</span> <span class="nl">shouldReceiveTouch:</span> <span class="n">tapCount</span> <span class="o">=</span> <span class="o">%</span><span class="n">d</span><span class="err">”</span><span class="p">,(</span><span class="kt">int</span><span class="p">)</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And tap twice, it will print out</p>

<pre><code>gestureRecognizer shouldReceiveTouch: tapCount = 1
gestureRecognizer shouldReceiveTouch: tapCount = 2
</code></pre>

<p>because <code>gestureRecognizer shouldReceiveTouch:</code> will be triggered every time
you touch the screen.</p>

<p>The way to differ single tap and others is to use a <code>NSTimer</code> that triggers the
handler later and cancel the timer if <code>tapCount &gt;= 2</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">WTViewController</span> <span class="p">()</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSTimer</span> <span class="o">*</span><span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">assign</span><span class="p">)</span> <span class="n">UIGestureRecognizerState</span> <span class="n">gestureState</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="err">@</span><span class="n">implementation</span> <span class="n">WTViewController</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">timer</span><span class="p">;</span>
</span><span class='line'><span class="k">@synthesize</span> <span class="n">gestureState</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldReceiveTouch:</span><span class="p">(</span><span class="n">UITouch</span> <span class="o">*</span><span class="p">)</span><span class="n">touch</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">timerWithTimeInterval:</span><span class="mf">0.5</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">handleSingleTap:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span> <span class="nl">addTimer:</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="nl">forMode:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">UIGestureRecognizerStateBegan</span><span class="p">;</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">touch</span><span class="p">.</span><span class="n">tapCount</span> <span class="o">==</span><span class="mi">2</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="n">timer</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">gestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">gestureRecognizer</span> <span class="nl">shouldRecognizeSimultaneouslyWithGestureRecognizer:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="n">otherGestureRecognizer</span><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">gestureState</span> <span class="o">=</span> <span class="n">gestureRecognizer</span><span class="p">.</span><span class="n">state</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Handler will be called from timer</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">handleSingleTap:</span><span class="p">(</span><span class="n">UITapGestureRecognizer</span><span class="o">*</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">gestureState</span><span class="o">==</span><span class="n">UIGestureRecognizerStateRecognized</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTitle:</span><span class="err">@”</span><span class="n">SingleTap</span><span class="err">”</span> <span class="nl">message:</span><span class="err">@”</span><span class="n">Oh</span> <span class="n">yes</span><span class="o">!</span><span class="err">”</span> <span class="nl">delegate:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle:</span><span class="err">@”</span><span class="n">OK</span><span class="err">”</span> <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">alert</span> <span class="n">show</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The timer can solve multiple taps issue, but it cannot recognize long touch. The
long touch cannot be recognized in <code>gestureRecognizer shouldReceiveTouch:</code>
method, but can be detected in
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> method. If the touch went
too long, the <code>gestureRecognizer.state</code> would be
<code>UIGestureRecognizerStateFailed</code>. Thus I record the state and check it when the
timer finished.</p>

<p>There is one more thing that I should mentioned:
<code>shouldRecognizeSimultaneouslyWithGestureRecognizer</code> may not be called as
frequently as we might expected. If we tap once, wait, and long touch the
device, <code>handleSingleTap</code> may still recognize the event to be a quick tap
because <code>self.gestureState</code> may still be <code>UIGestureRecognizerStateRecognized</code> at
the time. The way to prevent this result is to reset <code>self.gestureState</code>
every time we start the timer.</p>

<h3 id="source-code">Source code</h3>

<p>You can find the source code on my <a href="https://github.com/dryman/UIWebTouch">github page</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debug UIWebView in your iOS app]]></title>
    <link href="http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app/"/>
    <updated>2012-06-17T15:44:00+08:00</updated>
    <id>http://www.idryman.org/blog/2012/06/17/debug-uiwebview-in-your-ios-app</id>
    <content type="html"><![CDATA[<p>It is often to embed a UIWebView in an iOS app. However it doesn’t provide the
powerful webkit inspector by default. Nathan de Vries has written a
<a href="http://atnan.com/blog/2011/11/17/enabling-remote-debugging-via-private-apis-in-mobile-safari/">post</a> to solve the problem, but the solution didn’t work on my XCode
4 with Clang front end.</p>

<!-- more -->

<p>This is Nathan’s solution:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Nathan’s solution </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="n">_enableRemoteInspector</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compiler will complain that you can’t force <code>WebView</code> to perform private
method <code>_enableRemoteInspector</code>. Thus, I use <code>performSelector:@selector()</code> instead
of direct method call. Guess what? The compiler accept the hack. Awesome!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span> <span class="p">{</span>
</span><span class='line'><span class="cp">    // enable the hack only when we use simulator</span>
</span><span class='line'><span class="cp">#if (TARGET_IPHONE_SIMULATOR)</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="err">@”</span><span class="n">WebView</span><span class="err">”</span><span class="p">)</span> <span class="nl">performSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">_enableRemoteInspector</span><span class="p">)];</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>    <span class="c1">// …Snipped…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now simply run your iphone simulator and open the url <code>localhost:9999</code> to view your inspector. <strong>Voilà!</strong></p>

<h3 id="edit">Edit</h3>

<p><a href="https://github.com/brainlock">brainlock</a> shared his <a href="https://github.com/brainlock/ios-remote-inspector">remote inspector</a> that can use proxy
to debug <em>on the device</em>. Awesome!</p>

]]></content>
  </entry>
  
</feed>
