<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cocoa, | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/cocoa-/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2013-03-23T09:43:47-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C/ObjC block and debugger]]></title>
    <link href="http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger/"/>
    <updated>2012-09-30T14:32:00-07:00</updated>
    <id>http://www.idryman.org/blog/2012/09/30/c-objc-block-and-debugger</id>
    <content type="html"><![CDATA[<p>In the last post, we discussed block byref internal structures and showed the
sample code of how to <code>printf</code> it. However, we don’t want to write that much
helper functions every time! Thanks for
<a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a>, we can now load
<code>gdb</code>/<code>lldb</code> plugins and no need to do that anymore! ;D</p>

<!-- more -->

<h2 id="gdb">GDB</h2>

<p>Add these line into your <code>~.gdbinit</code> file. It was originally created by Big Nerd
Ranch Inc.
I renamed the functions from <code>dump-block-literal</code> and <code>dump-block-byref</code> to
<code>pblock</code> and <code>pbyref</code>.</p>

<pre><code>define pblock
    printf "%s", (const char*)_Block_dump($arg0)
end

document pblock
    Dumps runtime information about the supplied block reference
    Argument is the name or address of a block literal
end

define pbyref
    printf "%s", (const char*)_Block_byref_dump((char*)&amp;$arg0 - 2*sizeof(int) - 2*sizeof(void*))
end

document pbyref
    Dumps runtime information about the supplied __block variable
    Argument is a pointer to the variable embeded in a block byref structure
end
</code></pre>

<p>To use it, you just simply type <code>pbyref</code> and <code>pblock</code> followed by a variable in <code>gdb</code>.</p>

<pre><code>(gdb) pbyref x
byref data block 0x7fff5fbff480 contents:
  forwarding: 0x7fff5fbff480
  flags: 0x0
  size: 32

(gdb) pblock localBlock
^0x7fff5fbff450 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="lldb">LLDB</h2>

<p>I made a <code>lldb</code> version this weekend. You can find it on <a href="https://github.com/dryman/lldb-block-helper">Github</a>.
I tried to use <code>command alias</code> or <code>command regex</code> at first, but it just won’t
work. So I just write a python plugin for lldb and load it in <code>.lldbinit</code>. The
code is quite trivial:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>blockHelper.py</span><a href='https://github.com/dryman/lldb-block-helper/blob/master/blockHelper.py'>source </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">lldb</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">commands</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">pbyref</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="err">“</span><span class="n">expr</span> <span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,(</span><span class="n">const</span> <span class="n">char</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">_Block_byref_dump</span><span class="p">((</span><span class="n">char</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="err">”</span> <span class="o">+</span> \
</span><span class='line'>    <span class="n">command</span> <span class="o">+</span> <span class="err">“</span><span class="o">-</span> <span class="mi">2</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sizeof</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">sizeof</span><span class="p">(</span><span class="n">void</span> <span class="o">*</span><span class="p">)));</span><span class="err">”</span>
</span><span class='line'>    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">pblock</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">cmd</span> <span class="o">=</span> <span class="err">“</span><span class="n">expr</span> <span class="p">(</span><span class="n">void</span><span class="p">)</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">&quot;</span><span class="p">,(</span><span class="n">const</span> <span class="n">char</span><span class="o">*</span><span class="p">)</span><span class="n">_Block_dump</span><span class="p">(</span><span class="err">“</span> <span class="o">+</span> <span class="n">command</span> <span class="o">+</span> <span class="err">“</span><span class="p">));</span><span class="err">”</span>
</span><span class='line'>    <span class="n">lldb</span><span class="o">.</span><span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__lldb_init_module</span><span class="p">(</span><span class="n">debugger</span><span class="p">,</span> <span class="n">internal_dict</span><span class="p">):</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="err">‘</span><span class="n">command</span> <span class="n">script</span> <span class="n">add</span> <span class="o">-</span><span class="n">f</span> <span class="n">blockHelper</span><span class="o">.</span><span class="n">pbyref</span> <span class="n">pbyref</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">.</span><span class="n">HandleCommand</span><span class="p">(</span><span class="err">‘</span><span class="n">command</span> <span class="n">script</span> <span class="n">add</span> <span class="o">-</span><span class="n">f</span> <span class="n">blockHelper</span><span class="o">.</span><span class="n">pblock</span> <span class="n">pblock</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">‘</span><span class="n">The</span> <span class="err">“</span><span class="n">pbyref</span><span class="err">”</span> <span class="n">command</span> <span class="n">has</span> <span class="n">been</span> <span class="n">installed</span> <span class="ow">and</span> <span class="ow">is</span> <span class="n">ready</span> <span class="n">of</span> <span class="n">use</span><span class="o">.</span><span class="err">’</span>
</span><span class='line'>    <span class="k">print</span> <span class="err">‘</span><span class="n">The</span> <span class="err">“</span><span class="n">pblock</span><span class="err">”</span> <span class="n">command</span> <span class="n">has</span> <span class="n">been</span> <span class="n">installed</span> <span class="ow">and</span> <span class="ow">is</span> <span class="n">ready</span> <span class="n">of</span> <span class="n">use</span><span class="o">.</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="install">INSTALL</h3>

<ul>
  <li>Download this git repostory to your home directory as <code>.lldb</code>.</li>
</ul>

<pre><code>git clone https://github.com/dryman/lldb-block-helper.git ~/.lldb
</code></pre>

<ul>
  <li>add this line into your <code>~/.lldbinit</code>.</li>
</ul>

<pre><code>command script import ~/.lldb/blockHelper.py 
</code></pre>

<h3 id="usage">USAGE</h3>

<pre><code>(lldb) pbyref x
&lt;no result&gt;
byref data block 0x100713f90 contents:
  forwarding: 0x100713f90
  flags: 0x1000004
  size: 32

(lldb) pblock localBlock
&lt;no result&gt;
^0x7fff5fbff480 (new layout) =
isa: stack Block
flags: HASSIGNATURE HASHELP
refcount+deallocating: 0
invoke: 0x100001430
descriptor: 0x100002070
descriptor-&gt;reserved: 0
descriptor-&gt;size: 40
descriptor-&gt;copy helper: 0x100001470
descriptor-&gt;dispose helper: 0x1000014b0
descriptor-&gt;signature: 0x100001c29 'v8@?0'
descriptor-&gt;layout: 0x0 '(null)'
</code></pre>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://lldb.llvm.org/python-reference.html">lldb python references</a></li>
  <li><a href="http://www.informit.com/articles/article.aspx?p=1749597&amp;seqNum=12">Big Nerd Ranch: Advanced Mac OSX Programming</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
