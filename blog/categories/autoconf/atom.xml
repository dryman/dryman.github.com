<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: autoconf | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/autoconf/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2017-07-05T09:11:45-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-3]]></title>
    <link href="http://www.idryman.org/blog/2016/03/15/autoconf-tutorial-part-3/"/>
    <updated>2016-03-15T10:02:00-07:00</updated>
    <id>http://www.idryman.org/blog/2016/03/15/autoconf-tutorial-part-3</id>
    <content type="html"><![CDATA[<p>In this post I’ll show an example of how to write a cross-plaform OpenGL
program. We’ll explore more autoconf features, including <code>config.h</code>, third party
libraries, and many more.</p>

<!-- more -->

<h2 id="cross-plaform-opengl">Cross plaform OpenGL</h2>

<p>Although OpenGL API is basically the same on all platforms, their headers and
linking options are very different on different plaforms! To use OpenGL on OSX,
you must include <code>&lt;OpenGL/gl.h&gt;</code>, however on other platform you have to use
<code>&lt;GL/gl.h&gt;</code>. Sometimes you might have multiple possible OpenGL implementation on
the same platform. If you search for OpenGL tutorials, most of it can only built
on one platform.</p>

<p>And that where autoconf comes to play its role. I recently submit a new version
of <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL</a>, that can address these complicated portability issues.</p>

<p>Check out the three OpenGL checking macros: <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL</a>,
<a href="http://www.gnu.org/software/autoconf-archive/ax_check_glu.html">AX_CHECK_GLU</a>, and <a href="http://www.gnu.org/software/autoconf-archive/ax_check_glut.html">AX_CHECK_GLUT</a> on autoconf archive. The syntax
is very easy.</p>

<ul>
  <li><code>AX_CHECK_GL([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
  <li><code>AX_CHECK_GLU([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
  <li><code>AX_CHECK_GLUT([ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])</code></li>
</ul>

<p>However, it doesn’t come with the default autoconf package, you need to include
the third party <a href="http://www.gnu.org/software/autoconf-archive/">autoconf archive</a> in your build script. Here’s how to
do it.</p>

<h2 id="adding-extra-macros">Adding Extra Macros</h2>

<p>First, install third party macros by git submodule. Alternatively you can just
copy the macros you need, but be sure to include all the dependent macro it uses. </p>

<p><code>bash
git submodule add git@github.com:peti/autoconf-archive.git
</code></p>

<p>Next, in your <code>configure.ac</code> add the following line:</p>

<p><code>bash
# before invoking AM_INIT_AUTOMAKE
AC_CONFIG_MACRO_DIR([autoconf-archive/m4])
</code></p>

<p>After these two steps you are free to invoke 500+ macros in the archive package.</p>

<h2 id="c-preprocessor-macros">C Preprocessor macros</h2>

<p>Just adding the macro is not enough. You also have to pass the C preprocessor
macros to your C program. To do so, add another line to your <code>configure.ac</code>.</p>

<p><code>bash
AC_CONFIG_HEADERS([config.h])
</code></p>

<p>And now in your C program you can write the following to make it portable on all
systems. The listing is availabe in the <a href="http://www.gnu.org/software/autoconf-archive/ax_check_gl.html">AX_CHECK_GL document</a>.</p>

<p>```c
# include “config.h”</p>

<h1 id="if-definedhavewindowsh--definedwin32">if defined(HAVE_WINDOWS_H) &amp;&amp; defined(_WIN32)</h1>
<p># include <windows.h>
#endif
#ifdef HAVE_GL_GL_H
# include &lt;GL/gl.h&gt;
#elif defined(HAVE_OPENGL_GL_H)
# include &lt;OpenGL/gl.h&gt;
#else
# error no gl.h
#endif
```</windows.h></p>

<h2 id="wrapping-it-up">Wrapping it up</h2>

<p>The full working example can be <a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-3">downloaded from here</a>. Here is the
listing of each code:</p>

<p>```bash configure.ac
AC_INIT([gl-example], [1.0])</p>

<p>AC_CONFIG_SRCDIR([gl-example.c])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_MACRO_DIR([autoconf-archive/m4])
AM_INIT_AUTOMAKE([-Wall -Werror foreign])</p>

<p>AC_PROG_CC</p>

<p>AX_CHECK_GL
AX_CHECK_GLUT</p>

<h1 id="for-glew-you-can-simply-use">For glew you can simply use</h1>
<p># AC_CHECK_LIB([GLEW], [glewInit])</p>

<p>AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])</p>

<p>AC_OUTPUT
```</p>

<p>The default rule for <code>gl_example_SOURCES</code> is to look at the c program with the
same name, thus can be omitted.</p>

<p><code>make Makefile.am
bin_PROGRAMS = gl-example
</code></p>

<p>```c gl-example.c
#include “config.h”
#include <stdlib.h>
# if HAVE_WINDOWS_H &amp;&amp; defined(_WIN32)
  #include <windows.h>
# endif</windows.h></stdlib.h></p>

<h1 id="ifdef-haveglglh">ifdef HAVE_GL_GL_H</h1>
<p># include &lt;GL/gl.h&gt;
#elif defined(HAVE_OPENGL_GL_H)
# include &lt;OpenGL/gl.h&gt;
#else
# error no gl.h
#endif</p>

<h1 id="if-definedhaveglgluth">if defined(HAVE_GL_GLUT_H)</h1>
<p>#  include &lt;GL/glut.h&gt;
# elif defined(HAVE_GLUT_GLUT_H)
#  include &lt;GLUT/glut.h&gt;
# else
#  error no glut.h
# endif</p>

<p>static void render(void);</p>

<p>int main(int argc, char** argv) {
  glutInit(&amp;argc, argv);
  glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
  glutInitWindowSize(640, 640);
  glutInitWindowPosition(100, 100);
  glutCreateWindow(“Hello World!”);
  glutDisplayFunc(&amp;render);
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);</p>

<p>glutMainLoop();
  return 0;
}</p>

<p>void render(void) {
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  glBegin(GL_TRIANGLES);
  glVertex3f( 0.0f, 0.0f, 0.0f);
  glVertex3f( 0.5f, 1.0f, 0.0f);
  glVertex3f( 1.0f, 0.0f, 0.0f);
  glEnd();
  glutSwapBuffers();
}</p>

<p>```</p>

<p>Try out the configure options by invoking <code>./configure --help</code>. You’ll find it
provides rich options that is familiar to power users.</p>

<p>```bash
./configure –help
`configure’ configures gl-example 1.0 to adapt to many kinds of systems.</p>

<p>Usage: ./configure [OPTION]… [VAR=VALUE]…
…
Optional Packages:
  –with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  –without-PACKAGE       do not use PACKAGE (same as –with-PACKAGE=no)
  –with-xquartz-gl[=DIR] On Mac OSX, use opengl provided by X11/XQuartz
                          instead of the built-in framework. If enabled, the
                          default location is [DIR=/opt/X11]. This option is
                          default to false.
…
  PKG_CONFIG  path to pkg-config utility
  PKG_CONFIG_PATH
              directories to add to pkg-config’s search path
  PKG_CONFIG_LIBDIR
              path overriding pkg-config’s built-in search path
  GL_CFLAGS   C compiler flags for GL, overriding configure script defaults
  GL_LIBS     Linker flags for GL, overriding configure script defaults
  CPP         C preprocessor
  GLUT_CFLAGS C compiler flags for GLUT, overriding configure script defaults
  GLUT_LIBS   Linker flags for GLUT, overriding configure script defaults</p>

<p>```</p>

<p>So far I haven’t seen other build system that can do OpenGL cross platform
setup. (I only searched for CMake and Scons). Though autoconf is said to be
harder to learn, but by learning through these three articles, now the
syntax shouldn’t be that alien anymore, right?</p>

<p>In the next post, I’ll give another example of how to build a library, with unit
tests and debugger setup.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-2]]></title>
    <link href="http://www.idryman.org/blog/2016/03/14/autoconf-tutorial-2/"/>
    <updated>2016-03-14T16:28:00-07:00</updated>
    <id>http://www.idryman.org/blog/2016/03/14/autoconf-tutorial-2</id>
    <content type="html"><![CDATA[<p>This is the second post of the autoconf tutorial series. In this post I’ll cover
some fundamental units in autoconf and automake, and an example cross platform
X11 program that uses the concepts in this post. After reading this post, you
should be able to write your own build script for small scope projects.</p>

<!-- more -->

<h2 id="autoconf">Autoconf</h2>

<p>Autoconf is part of the GNU Autotools build system. Autotools is a collection of
three main packages: autoconf, automake, and libtools. Each of the package has
smaller sub-packages including autoheader, aclocal, autoscan etc. I won’t cover
the details of all the packages; instead I’ll only focus on how autoconf plays
its role in the build chain.</p>

<p>Autoconf is mainly used to generate the <code>configure</code> script.  <code>configure</code> is a
<strong>shell script</strong> that detects the build environment, and output proper build
flags to the Makefile, and preprocessor macros (like <code>HAVE_ALLOCA_H</code>) to
<code>config.h</code>. However, writing a good portable, extensible shell script isn’t
easy. This is where the <a href="http://www.gnu.org/software/m4/m4.html">gnu m4 macro</a> comes in. <a href="http://www.gnu.org/software/m4/m4.html">Gnu m4 macro</a> is an
implementation of the traditional UNIX macro processor. By using m4, you can
easily create portable shell script, include different pre-defined macros, and
define your own extensions easily.</p>

<p>In short, autoconf syntax is shell script wrapped by <a href="http://www.gnu.org/software/m4/m4.html">gnu m4 macro</a>.</p>

<p>In the early days, writing portable shell scripts wasn’t that easy. For example
not all the <code>mkdir</code> support <code>-p</code> option, not all the shells are bash
compatible, etc. Using the m4 macro to perform the regular shell logics, like
<code>AS_IF</code> instead if <code>if [[ ]]; then...</code>, <code>AS_MKDIR_P</code> instead of <code>mkdir -p</code>,
<code>AS_CASE</code> instead of <code>case ... esac</code> makes your configure script works better on
all unix/unix-like environment, and more conventional. Most of the time you’ll
be using macros instead of bare bone shell script, but keep in mind that behind
the scene your final output is still shell script.</p>

<h3 id="m4-macro-basics">M4 Macro Basics</h3>

<p>Though the first look at M4 macros is very alien and unfriendly, but it only
consist two basic concepts:</p>

<ul>
  <li>Macro expansion</li>
  <li>Quoting</li>
</ul>

<p>You can define a macro like so:</p>

<p>```bash
# define a macro MY_MACRO that expands to text ABC
m4_define([MY_MACRO], [ABC])
MY_MACRO =&gt; ABC</p>

<h1 id="define-a-macro-that-is-visible-to-other-m4-scripts">define a macro that is visible to other m4 scripts</h1>
<p>AC_DEFUN([MY_MACRO], [ABC])
MY_MACRO =&gt; ABC
```</p>

<p>It’s pretty much similar to C macro or Lisp macro. The macro expands at compile
time (<code>configure.ac</code> =&gt; <code>configure</code>). You can define a macro <code>MY_MACRO</code> that
expands to a snippet of shell script. Here we just expands it to <code>ABC</code>, which
doesn’t have any meaning in shell script and can trigger an error.</p>

<p>Every symbol in your script is expandable. For example if you simply write <code>ABC</code>
in your script, is it a shell symbol, or is it a m4 symbol that needs to expand?
The m4 system uses <strong>quoting</strong> to differentiate the two. The default quoting in
autoconf is square brackets <code>[</code>, <code>]</code>. Though you can change it, but it is highly
unrecommended.</p>

<p><code>bash
ABC   # m4 would try to find *macro* definition of ABC and try to expand it
[ABC] # shell symbol ABC
</code></p>

<p>Why does it matter? Consider these two examples</p>

<p>```bash
ABC=”hello world”     # m4 would try to expand ABC, hello, and world
[ABC=”hello world”]   # m4 would just produce ABC=”hello world” to the output</p>

<h1 id="m4-will-expand-mymacro-and-body-before-defining-mymacro-as-a-symbol-to">m4 will expand MY_MACRO and BODY <em>before</em> defining MY_MACRO as a symbol to</h1>
<p># BODY.
AC_DEFUN(MY_MACRO, BODY)</p>

<h1 id="safe">safe</h1>
<p>AC_DEFUN([MY_MACRO], [BODY])
```</p>

<p>This is the base of all m4 macros. To recap, <strong>always quote the arguments for
the macros, including symbols, expressions, or body statements</strong>. (I skipped
some edge cases that requires double quoting or escapes, for the curious please
check <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.69/html_node/Autoconf-Language.html">the autoconf language</a>).</p>

<h3 id="printing-messages">Printing Messages</h3>

<p>Now we know the basic syntax of m4, let’s see what are the functions it
provides. In the configure script, if you invoke <code>echo</code> directly the output
would be redirected to different places. The convention to print message in
autoconf, is to use <code>AC_MSG_*</code> macros. Here are the two macros that is most
commonly used:</p>

<p>```bash
# Printing regular message
AC_MSG_NOTICE([Greetings from Autoconf])</p>

<h1 id="prints-an-error-message-and-stops-the-configure-script">Prints an error message and stops the configure script</h1>
<p>AC_MSG_ERROR([We have an error here!]
```</p>

<p>For the more curious, check the <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.60/html_node/Printing-Messages.html">Printing Messages</a> section in autoconf
manual.</p>

<h3 id="if-condition">If-condition</h3>

<p>To write an if condition in autoconf, simply invoke 
<code>AS_IF(test-1, [run-if-true-1], ..., [run-if-false])</code>.
The best way to see how it works is by looking an example:</p>

<p>```bash
abc=”yes”
def=”no”
AS_IF([test “X$abc” = “Xyes”],             # test condition
      [AC_MSG_NOTICE([abc is yes])],       # then case
      [test “X$def” = “Xyes”],             # else if
      [AC_MSG_NOTICE([def is yes])],
      [AC_MSG_ERROR([abc check failed])]   # else case
     )</p>

<h1 id="expands-to-the-following-shell-script">expands to the following shell script</h1>
<p>abc=”yes”
def=”no”
if test “X$abc” = “Xyes”; then :
  # test condition
       $as_echo “$as_me: abc is yes” &gt;&amp;6
elif # then case
       test “X$def” = “Xyes”; then :
  # else if
       $as_echo “$as_me: def is yes” &gt;&amp;6
else
  as_fn_error $? “abc check failed”   # else case
fi
```</p>

<p>Note that we don’t use common shell test operator <code>[[</code> and <code>]]</code>, instead we use
<code>test</code> because the square bracket is preserved for macro expansion. The
recommended way to invoke test is <code>test "X$variable" = "Xvalue"</code>. This is how we
avoid null cases of the shell variable.</p>

<p>Another common branching function is <code>AS_CASE(word, [pattern1], [if-matched1], ..., [default])</code>
the logic is pretty much the same.</p>

<p>That all the basics we need to know for autoconf, let’s take a break and switch
to automake.</p>

<h2 id="automake">Automake</h2>

<p>Like autoconf, automake is additional semantics on top of another existing
language – the Makefile syntax. Unlike autoconf, it’s not using m4 to extend
the syntax. It uses a naming convention that converts to the actual logic. Most
of the time, we only need to use the following two rules, which we’ll discuss in
detail.</p>

<ul>
  <li><code>where_PRIMARY = targets</code></li>
  <li><code>target_SECONDARY = inputs</code></li>
</ul>

<h3 id="whereprimary--targets"><code>where_PRIMARY = targets</code></h3>

<p>This syntax has three parts, <code>targets</code>, type <code>PRIMARY</code>, and where to install
<code>where</code>. Some examples shown as below:</p>

<p>```make
# target “hello” is a program that will be installed in $bindir
bin_PROGRAMS = hello</p>

<h1 id="target-libabc-is-a-library-that-will-be-installed-in-libdir">target “libabc” is a library that will be installed in $libdir</h1>
<p>lib_LIBRARIES = libabc.la
```</p>

<p>The <code>targets</code> is a list of targets with the type <code>PRIMARY</code>. Depending on what
<code>PRIMARY</code> is, it can be a program, a library, a shell script, or whatever
<code>PRIMARY</code> supports. The current primary names are “PROGRAMS”, “LIBRARIES”,
“LTLIBRARIES”, “LISP”, “PYTHON”, “JAVA”, “SCRIPTS”, “DATA”, “HEADERS”, “MANS”,
and “TEXINFOS”.</p>

<p>There are three possible type of variables you can put into the <code>where</code> clause.</p>

<ul>
  <li>
    <p>GNU standard directory variables (bindir, sbindir, includedir, etc.) omitting
the suffix “dir”. See <a href="https://www.gnu.org/prep/standards/html_node/Directory-Variables.html">GNU Coding Standard - Directory Variables</a> for
list of predefined directories. Automake extends this list with <code>pkgdatadir</code>,
<code>pkgincludedir</code>, <code>pkglibdir</code>, and <code>pkglibexecdir</code> Automake will check if your
target is valid to install the directory you specified.</p>
  </li>
  <li>
    <p>Self-defined directories. You can hack around automake default type check by
defining your own directories. Do not do this unless you have a good reason!</p>
  </li>
</ul>

<p><code>make
# Work around forbidden directory combinations.  Do not use this
# without a very good reason!
my_execbindir = $(pkglibdir)
my_doclibdir = $(docdir)
my_execbin_PROGRAMS = foo
my_doclib_LIBRARIES = libquux.a
</code></p>

<ul>
  <li>Special prefixes <code>noinst_</code>, <code>check_</code>, <code>dist_</code>, <code>nodist_</code>, <code>nobase_</code>, and
 <code>notrans_</code>. <code>noinst_</code> indicates the targets that you don’t want to install;
 <code>check_</code> is used for unit tests. For the others are less common, please check
 the automake manual for detail.</li>
</ul>

<h3 id="targetsecondary--inputs"><code>target_SECONDARY = inputs</code></h3>

<p>Depending on what your <code>PRIMARY</code> type is, there are different <code>SECONDARY</code> types
you can use for further logic. The common <code>SECONDARY</code> types are</p>

<ul>
  <li><code>_SOURCES</code> defines the source for primary type <code>_PROGRAMS</code> or <code>_LIBRARIES</code></li>
  <li><code>_CFLAGS</code>, <code>_LDFLAGS</code>, etc. compiler flags used for primary type <code>_PROGRAMES</code>
 or <code>_LIBRARIES</code></li>
</ul>

<p>Note that the invalid character in <code>target</code> name will get substituted with
underscore. The following example illustrate all the above:</p>

<p><code>make
lib_LTLIBRARIES = libgettext.la
# the dot got substituted with underscore
libgettext_la_SOURCES = gettext.c gettext.h
include_HEADERS = gettext.h
</code></p>

<p>The example above requires <a href="https://www.gnu.org/software/libtool/">libtool</a>. You need to declare
<code>AC_PROG_LIBTOOL</code> in your <code>configure.ac</code> for it to work.</p>

<h2 id="wraps-it-up---a-x11-example-program">Wraps it up - A X11 example program</h2>

<p>With everything we learnt so far, let’s write a more complicated autoconf
program. This is a very simple X11 program that aims to be portable on all
existing platforms with valid X11 installed. To test if X11 is installed, we use
the macro <code>AC_PATH_XTRA</code>, the manual for this macro is defined in 
<a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/System-Services.html">autoconf existing test for system services</a>.</p>

<p>The manual says: An enhanced version of <code>AC_PATH_X</code>. It adds the C compiler flags
that X needs to output variable <code>X_CFLAGS</code>, and the X linker flags to <code>X_LIBS</code>.
Define <code>X_DISPLAY_MISSING</code> if X is not available. And in the <code>AC_PATH_X</code> it
states “If this method fails to find the X Window System … set the shell
variable no_x to ‘yes’; otherwise set it to the empty string”. We can use the
logic and write our <code>configure.ac</code> script as following:</p>

<p>```bash
AC_INIT([x11-example], [1.0])</p>

<h1 id="safety-check-in-case-user-overwritten---srcdir">safety check in case user overwritten –srcdir</h1>
<p>AC_CONFIG_SRCDIR([x11-example.c])</p>

<p>AC_CONFIG_AUX_DIR([build-aux])</p>

<p>AM_INIT_AUTOMAKE([-Wall -Werror foreign])</p>

<h1 id="check-for-c-compiler">Check for C compiler</h1>
<p>AC_PROG_CC</p>

<h1 id="check-for-x11">Check for X11</h1>
<p># It exports variable X_CFLAGS and X_LIBS
AC_PATH_XTRA</p>

<h1 id="acpathxtra-doesnt-error-out-by-default">AC_PATH_XTRA doesn’t error out by default,</h1>
<p># hence we need to do it manually
AS_IF([test “X$no_x” = “Xyes”],
  [AC_MSG_ERROR([Could not find X11])])</p>

<p>AC_CONFIG_FILES([Makefile])</p>

<p>AC_OUTPUT
```</p>

<p>Note that the <code>AC_PATH_XTRA</code> export variables <code>X_CFLAGS</code> and <code>X_LIBS</code>. To use
these variables in <code>Makefile.am</code>, just surround it with <code>@</code>.</p>

<p>```make
bin_PROGRAMS = x11-example</p>

<p>x11_example_SOURCES = x11-example.c
x11_example_CFLAGS = @X_CFLAGS@
# AX_PATH_XTRA only specify the root of X11
# we still have to include -lX11 ourselves
x11_example_LDFLAGS = @X_LIBS@ -lX11
```</p>

<p>That all we need to build a platform independent X11 program! Check the full
source on <a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-2">github</a>. The X11 example program was written by Brian Hammond
2/9/96. He generously released this to public for any use.</p>

<p>This program can easily work on Linux. I’ll use OSX as an example of how cross
platform works. Before you run the example, make sure you have
<a href="http://www.xquartz.org">XQuartz</a> installed.</p>

<p><code>bash
cd example-2
autoreconf -vif # shortcut of --verbose --install --force
./configure --with-x --x-includes=/opt/X11/include/ --x-libraries=/opt/X11/lib
make
./x11-example
</code></p>

<p>Change the <code>--x-includes</code> and <code>--x-libraries</code> to proper directory if you
installed the xquartz to a different location.</p>

<p>I only introduced very little syntax for autoconf (if-else, print message) and
automake (primary/secondary rules, use of export variables by <code>@</code>). But just
using these basic component is already very sufficient for writing conventional
build scripts. How to do it? Check the [existing tests provided by
autoconf][exsisting test]. Here are some of the most commonly used existing
checks:</p>

<ul>
  <li>Library checks: <code>AC_CHECK_LIB</code> <code>AC_SEARCH_LIBS</code>. <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Libraries.html">library documentation</a>.</li>
  <li>Header checks: <code>AC_CHECK_HEADER[S]</code>. <a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Generic-Headers.html">header documentation</a>.</li>
  <li><a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/Compilers-and-Preprocessors.html">Compiler characteristics</a>.</li>
</ul>

<p>For the checks that are not included in the default autoconf package, it
probably exists in the extended package <a href="http://www.gnu.org/software/autoconf-archive">autoconf archive</a>, which I’ll
cover in the next post.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoconf Tutorial Part-1]]></title>
    <link href="http://www.idryman.org/blog/2016/03/10/autoconf-tutorial-1/"/>
    <updated>2016-03-10T14:55:00-08:00</updated>
    <id>http://www.idryman.org/blog/2016/03/10/autoconf-tutorial-1</id>
    <content type="html"><![CDATA[<p>It’s been more than a year since my last update to my blog. I learnt a lot new
stuffs in last year, but was too busy on work to write down what I’ve learnt.
Luckily I got some breaks recently, and I’ll pick up some of the posts that
I’ve wanted to write about. First I’ll start with a autoconf tutorial series.
This is one of the difficult material to learn, but I’ll try to re-bottle it
to make it more accessible to everyone.</p>

<!-- more -->

<h2 id="what-is-autoconf">What is Autoconf?</h2>

<p>If you have ever installed third party packages, you probably already used the
result of autoconf. Autoconf, automake, and libtool are the GNU Autotools
family that generate the installation script:</p>

<p><code>bash
./configure
make
make install
</code></p>

<p>Many unix or unix-like system make use of the simplicity of these installation
steps. The linux distros usually provides custom command line options to the
<code>./configure</code> to customize the build, and further repackage it with rpm or dpkg.</p>

<p>Autoconf is not only a build system, it also does many system compatibility
checks. Does your operating system support memory-mapped file? Does your
environment has X11? The standard autoconf already support a wide variety of
checks, and there are 500 more in <a href="http://www.gnu.org/software/autoconf-archive/The-Macros.html">Autoconf Archive</a>. It’s the defacto
standard build standard for building small and large linux/unix programs.</p>

<p>Though the output of autoconf is easy for user to install, writing autoconf
build script is less intuitive, compare to other fancier solution like
<a href="https://cmake.org">CMake</a> or <a href="http://www.scons.org">Scons</a>. And that’s why I’m writing this tutorial - to
reduce the learning curve of using autoconf.</p>

<p>Through out this series, I’ll start with a minimal autoconf project, and later
introduce how to bring in debug setup, how to build a library, how to setup unit
test, how to write your own cross platform checks etc.</p>

<h2 id="hello-autoconf">Hello Autoconf</h2>

<p>The best way to learn is to practice through examples. Let’s start with a very
simple one. First create a directory holding your project, </p>

<p><code>bash
$ mkdir example-1
$ cd example-1
</code></p>

<p>Install the autoconf on your system if it wasn’t installed</p>

<p><code>bash
# OSX
$ brew install autoconf automake libtool
# Ubuntu/Debian
$ sudo apt-get install autoconf automake libtool
# RHEL/CentOS
$ sudo yum install autoconf automake libtool
</code></p>

<p>And create three files: <code>configure.ac</code>, <code>Makefile.am</code>, and the program itself
<code>hello.c</code>.</p>

<p>```bash configure.ac
# Must init the autoconf setup
# The first parameter is project name
# second is version number
# third is bug report address
AC_INIT([hello], [1.0])</p>

<h1 id="safety-checks-in-case-user-overwritten---srcdir">Safety checks in case user overwritten –srcdir</h1>
<p>AC_CONFIG_SRCDIR([hello.c])</p>

<h1 id="store-the-auxiliary-build-tools-eg-install-sh-configsub-configguess">Store the auxiliary build tools (e.g., install-sh, config.sub, config.guess)</h1>
<p># in this dir (build-aux)
AC_CONFIG_AUX_DIR([build-aux])</p>

<h1 id="init-automake-and-specify-this-program-use-relaxed-structures">Init automake, and specify this program use relaxed structures.</h1>
<p># i.e. this program doesn’t follow the gnu coding standards, and doesn’t have
# ChangeLog, COPYING, AUTHORS, INSTALL, README etc. files.
AM_INIT_AUTOMAKE([-Wall -Werror foreign])</p>

<h1 id="check-for-c-compiler">Check for C compiler</h1>
<p>AC_PROG_CC
# We can add more checks in this section</p>

<h1 id="tells-automake-to-create-a-makefile">Tells automake to create a Makefile</h1>
<p># See https://www.gnu.org/software/automake/manual/html_node/Requirements.html
AC_CONFIG_FILES([Makefile])</p>

<h1 id="generate-the-output">Generate the output</h1>
<p>AC_OUTPUT
```</p>

<p><code>make Makefile.am
bin_PROGRAMS = hello
hello_SOURCES = hello.c
</code></p>

<p><code>c hello.c
#include &lt;stdio.h&gt;
int main(int argc, char** argv) {
  printf("hello world!\n");
  return 0;
}
</code></p>

<p>That’s the minimal build script you need for your first autoconf program.
Let’s try what we’ve got with this setup. Make sure your are in the <code>example-1</code>
directory.</p>

<p><code>bash
# this creates the configure script
$ autoreconf --verbose --install --force
$ ./configure --help
$ ./configure
ecking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... build-aux/install-sh -c -d
checking for mawk... no
...
config.status: creating Makefile
config.status: executing depfiles commands
# Now try the makefile
$ make
gcc -DPACKAGE_NAME=\"hello\" -DPACKAGE_TARNAME=\"hello\" -DPACKAGE_VERSION=\"1.0\" -DPACKAGE_STRING=\"hello\ 1.0\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DPACKAGE=\"hello\" -DVERSION=\"1.0\" -I.     -g -O2 -MT hello.o -MD -MP -MF .deps/hello.Tpo -c -o hello.o hello.c
mv -f .deps/hello.Tpo .deps/hello.Po
gcc  -g -O2   -o hello hello.o  
# We now have the hello program built
$ ./hello
hello world!
# Create hello-1.0.tar.gz that contains the configure script
$ make dist
</code></p>

<p>You  might think this is overkill for a hello world program, but you can also
think in another way. Just adding the <code>configure.ac</code> and <code>Makefile.am</code> made a
simple hello world program looks like a serious production ready project (with
all these fancy configure checks and compiler flags).</p>

<p>Let’s iterate through each of the build script.</p>

<h1 id="configureac">configure.ac</h1>

<p>The syntax for <code>configure.ac</code> is <code>MACRO_NAME([param-1],[param-2]..)</code>. The
parameter passed to the macro must be quoted by square brackets, (unless it is
another macro that you want to expand BEFORE calling the outer macro, which is
very rare). The macros will expands to shell script that perform the actual
checks. You can also write shell script in your configure.ac file. Just one
difference, you should use <code>if test &lt;expression&gt;; then...</code> instead of 
<code>if [[ &lt;expression&gt; ]]; then...</code> for condition branching, because the square
brackets would get expanded by the autoconf macro system.</p>

<ul>
  <li>
    <p><code>AC_INIT(package, version, [bug-report], [tarname], [url])</code> In every autoconf
configure script, you must first initialize autoconf with this macro. The
square braket that wraps around each parameter cannot be omitted.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_SRCDIR(dir)</code> Next we specify a unique file identifying we are in
the right directory. This is a safety check in case user override the –srcdir
command line option.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_AUX_DIR(dir)</code> By default autoconf will create many auxiliary files
that help to build and distribute the programs. However we don’t want to have
these files to mess up the project home directory. In convention we call this
macro with <code>[build-aux]</code> so that it put these extra files in <code>build-aux/</code>
instead of project home.</p>
  </li>
  <li>
    <p><code>AM_INIT_AUTOMAKE([options])</code> Initializes automake. An important note here is
in early phase of your project development, you probably want to provide the
option <code>foreign</code> to init automake. If foreign wasn’t provided, automake will
complain that your project didn’t confirm to gnu coding standards, which would
require you to have README, ChangLog, AUTHORS, and many other files in your
project’s home directory.</p>
  </li>
  <li>
    <p><code>AC_PROG_CC</code> Checks for a valid C compiler. There are hundreds more checks you
can put in this section.</p>
  </li>
  <li>
    <p><code>AC_CONFIG_FILES(files)</code> Required by automake to create the output file. Here
we simply put the <code>Makefile</code> in. Checks the automake documentation for more
detail.
<a href="https://www.gnu.org/software/automake/manual/html_node/Requirements.html">automake</a>.</p>
  </li>
  <li>
    <p><code>AC_OUTPUT</code> Creates the configure script</p>
  </li>
</ul>

<h1 id="makefileam">Makefile.am</h1>

<p>The automake file <code>Makefile.am</code> is an extension to Makefile. You can write
standard make syntax, but normally you only need to define variables that
conforms to the <a href="https://www.gnu.org/software/automake/manual/html_node/Uniform.html">uniform naming scheme</a>. In this post I’ll only give
rough explanation, and dive in more detail in next post.</p>

<ul>
  <li>
    <p><code>bin_PROGRAMS = hello</code> The output is a PROGRAM (other options are LIBRARY,
HEADER, MAN, etc.) named <code>hello</code>, and will be installed in bin directory
(default to <code>/usr/local/bin</code>, but can be configured when invoking
<code>./configure</code>.</p>
  </li>
  <li>
    <p><code>hello_SOURCES = hello.c</code> The sources of hello program is hello.c</p>
  </li>
</ul>

<p>The complete program can be found in my github repository: 
<a href="https://github.com/dryman/autoconf-tutorials/tree/master/example-1">Example 1</a>.</p>

<h1 id="more-make-targets">More make targets</h1>

<p>The Makefile generated by Autoconf and automake has more commands that you can
run:</p>

<ul>
  <li>
    <p><code>make all</code>
Build programs, libraries, documentation, etc. (same as make).</p>
  </li>
  <li>
    <p><code>make install</code>
Install what needs to be installed, copying the files from the package’s tree to system-wide directories.</p>
  </li>
  <li>
    <p><code>make install-strip</code>
Same as make install, then strip debugging symbols. Some users like to trade space for useful bug reports…</p>
  </li>
  <li>
    <p><code>make uninstall</code>
The opposite of make install: erase the installed files. (This needs to be run from the same build tree that was installed.)</p>
  </li>
  <li>
    <p><code>make clean</code>
Erase from the build tree the files built by make all.</p>
  </li>
  <li>
    <p><code>make maintainer-clean</code>
Erase files that generated by autoconf.</p>
  </li>
  <li>
    <p><code>make distclean</code>
Additionally erase anything ./configure created.</p>
  </li>
  <li>
    <p><code>make check</code>
Run the test suite, if any.</p>
  </li>
  <li>
    <p><code>make installcheck</code>
Check the installed programs or libraries, if supported.</p>
  </li>
  <li>
    <p><code>make dist</code>
Recreate package-version.tar.gz from all the source files.</p>
  </li>
</ul>

<p>When I first survey what build system I should pick for my own projects, I often
see other alternatives claiming autoconf is old and hard to use. This is
partially true, but the more I dig in the more I found how powerful autoconf is.
As you see, this example can already cover many common cases, with a succinct
build script and very powerful output. The package created by <code>make dist</code>
only requires a minimal unix compatible environment (shell and make) to run.</p>

<p>In the next post I’ll cover more detail in the autoconf syntax and Automake
syntax.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="http://www.gnu.org/software/autoconf/autoconf.html">Autoconf</a></li>
  <li><a href="https://www.gnu.org/software/automake/">Automake</a></li>
  <li><a href="https://autotools.io/index.html">Autoconf myth buster</a></li>
  <li><a href="http://www.lrde.epita.fr/~adl/autotools.html">Autotools tutorials</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
