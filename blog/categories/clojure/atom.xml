<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clojure | Carpe diem (Felix's blog)]]></title>
  <link href="http://www.idryman.org/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://www.idryman.org/"/>
  <updated>2017-05-07T21:08:53-07:00</updated>
  <id>http://www.idryman.org/</id>
  <author>
    <name><![CDATA[dryman (Felix Ren-Chyan Chern)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laziness and memoization in Clojure]]></title>
    <link href="http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure/"/>
    <updated>2013-06-27T20:01:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/06/27/laziness-and-memoization-in-clojure</id>
    <content type="html"><![CDATA[<p>I’m now having a job at supplyframe Inc., and luckily I can use Clojure for work! Clojure is a young language created by Rich Hickey on 2007. It uses Lisp syntax, immutable data structures by default, and supports both strict and lazy evaluations. As Christ Okasaki suggested:</p>

<blockquote>
  <p>Strict evaluation is useful in implementing worst-case data structures and lazy evaluation is useful in implementing amortized data structures.</p>
</blockquote>

<p>It’s really cheap to define lazy or strict data structures in Clojure that has low amortized cost even in a persistent manner. Let’s dig into the source code and see how does Clojure implement it.</p>

<!--more-->

<p>Before we go into Clojure’s java source code, we can first look at the <code>memoize</code> function.</p>

<h2 id="memoize">Memoize</h2>

<p>```clj
(defn memoize
  “Returns a memoized version of a referentially transparent function. The
  memoized version of the function keeps a cache of the mapping from arguments
  to results and, when calls with the same arguments are repeated often, has
  higher performance at the expense of higher memory use.”</p>
<p>[f]
  (let [mem (atom {})]
    (fn [&amp; args]
      (if-let [e (find @mem args)]
        (val e)
        (let [ret (apply f args)]
          (swap! mem assoc args ret)
          ret)))))
```</p>

<p>The function is elegant; it captures whatever arguments that pass in the function, and pairs the arguments and the returned value to a persistent map. In order to make it thread safe, the persistent map is cast into an <code>atom</code> and can be modified via <code>swap!</code>.</p>

<p>This is nice. And since Clojure uses $\log_{32}(N)$ hash map, it is also fast enough to do a memoized lookup. For the implementation of Clojure’s persistent hash map, you can check out <a href="http://blog.higher-order.net/2009/09/08/understanding-clojures-persistenthashmap-deftwice/">this post</a>.</p>

<h2 id="lazy-seq">lazy-seq</h2>

<p>In contrast to <code>memoize</code>, which is implemented in Clojure, <code>lazy-seq</code> is implemented in java. It contains three fields:</p>

<p>```java
public final class LazySeq extends Obj implements ISeq, Sequential, List, IPending, IHashEq{</p>

<p>private IFn fn;
private Object sv;
private ISeq s;
```</p>

<p><code>fn</code> is an un-evaluated thunk (function without arguments), and <code>sv</code> is the captured value after executing the thunk. The <code>ISeq s</code> is the realized version of the sequence.</p>

<p>When the program tries to realize the lazy sequence, it calls <code>seq()</code> and <code>sval()</code> functions.</p>

<p>```java
final synchronized Object sval(){
	if(fn != null)
		{
		try
			{
			sv = fn.invoke();
			fn = null;
			}
		catch(RuntimeException e)
			{
			throw e;
			}
		catch(Exception e)
			{
			throw Util.sneakyThrow(e);
			}
		}
	if(sv != null)
		return sv;
	return s;
}</p>

<p>final synchronized public ISeq seq(){
	sval();
	if(sv != null)
		{
		Object ls = sv;
		sv = null;
		while(ls instanceof LazySeq)
			{
			ls = ((LazySeq)ls).sval();
			}
		s = RT.seq(ls);
		}
	return s;
}
```</p>

<p>In the <code>sval()</code> function, Clojure handles the caching elegantly. If <code>fn</code> is not null, execute it and stores the value to <code>sv</code>. If the <code>LazySeq</code> is dereferenced, the whole object will be recycled by the garbage collector, else the object will hold the value and is thread-safe to be accessed by other threads.</p>

<p>The <code>seq()</code> function is the wrapper around <code>sval()</code>. It realizes all <code>LazySeq</code> objects recursively, and wrap it into a <code>seq</code> object that implements <code>ISeq</code> interface.</p>

<p>With the realized <code>seq</code>, it can support common sequence functions like <code>first</code> and <code>next</code>:</p>

<p>```java
public Object first(){
	seq();
	if(s == null)
		return null;
	return s.first();
}</p>

<p>public ISeq next(){
	seq();
	if(s == null)
		return null;
	return s.next();	
}
```</p>

<h2 id="conclusion">Conclusion</h2>

<p>In Clojure’s documentation, it said that <code>lazy-seq</code> is cached after realizing it, but it didn’t document how it does it. Luckily the source code is pretty easy to understand. Clojure uses lazy sequences a lot, so knowing that it handles lazy sequence efficiently is important for all Clojure programmers. :) </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Popular Clojure Projects]]></title>
    <link href="http://www.idryman.org/blog/2013/05/25/clojure-bookmarks/"/>
    <updated>2013-05-25T08:40:00-07:00</updated>
    <id>http://www.idryman.org/blog/2013/05/25/clojure-bookmarks</id>
    <content type="html"><![CDATA[<p>When I want to learn a new programming language, the best way is always learn from the best projects in that ecosystem. I grabbed several popular repositories that has high ratings on Github.</p>

<!--more-->

<h2 id="screen-casts">Screen casts</h2>

<ul>
  <li><a href="http://www.youtube.com/user/ClojureTV">ClojureTV</a></li>
</ul>

<ul>
  <li><a href="http://vimeo.com/channels/fulldisclojure/8320428">Disclojure</a></li>
</ul>

<ul>
  <li><a href="http://disclojure.org/archive/">Disclojure official blog</a></li>
</ul>

<h2 id="editor-integration">Editor integration</h2>

<ul>
  <li>
    <p><a href="https://github.com/clojure/tools.nrepl">nREPL</a></p>
  </li>
  <li>
    <p><a href="https://github.com/kingtim/nrepl.el">nREPL with Emacs</a></p>
  </li>
  <li>
    <p><a href="https://github.com/overtone/emacs-live">Emacs-live</a></p>
  </li>
</ul>

<h2 id="puzzles">Puzzles</h2>

<ul>
  <li>
    <p><a href="http://www.4clojure.com">4clojure</a> 4Clojure is a resource to help fledgling clojurians learn the language through interactive problems.</p>
  </li>
  <li>
    <p><a href="https://github.com/dcluna/4clj-el">4clojure in Emacs</a></p>
  </li>
</ul>

<h2 id="server-monitoring">Server monitoring</h2>

<ul>
  <li><a href="http://riemann.io">Riemann</a> Riemann aggregates events from your servers and applications with a powerful stream processing language.</li>
</ul>

<iframe src="http://player.vimeo.com/video/38377415" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/38377415">Kyle Kingsbury - Riemann</a> from <a href="http://vimeo.com/user8874650">Boundary</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/andrewvc/engulf">Engulf</a> Distributed HTTP load tester, written in Clojure and Javascript.</li>
</ul>

<h2 id="networking-and-html-related-stuffs">Networking and HTML related stuffs</h2>

<ul>
  <li>
    <p><a href="https://github.com/neotyk/http.async.client">http.async.client</a> Async Http Client - Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/aleph">Aleph</a> Aleph is a Clojure framework for asynchronous communication, built on top of Netty and Lamina.</p>
  </li>
  <li>
    <p><a href="http://http-kit.org/index.html">Http-Kit</a> HTTP Kit is a minimalist, efficient, Ring-compatible HTTP client/server for Clojure. It uses a event-driven architecture to support highly concurrent a/synchronous web applications.</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/compojure">Compojure</a> A concise routing DSL for Ring/Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/aphyr/jepsen">Jepsen</a> Call Me Maybe: simulating network partitions in DBs</p>
  </li>
  <li>
    <p><a href="https://github.com/weavejester/hiccup">Hiccup</a> Fast library for rendering HTML in Clojure</p>
  </li>
  <li>
    <p><a href="https://github.com/Prismatic/plumbing">Plumbing</a> Graph is a simple and declarative way to specify a structured computation, which is easy to analyze, change, compose, and monitor</p>
  </li>
  <li>
    <p><a href="https://github.com/ztellman/lamina">Lamina</a> Lamina is for describing and analyzing streams of data. It provides a rich set of operators for dealing with these unrealized values, both individually and collectively.</p>
  </li>
</ul>

<h2 id="testing">Testing</h2>

<ul>
  <li><a href="https://github.com/marick/Midje/">Midje</a> </li>
</ul>

<h2 id="data-processing">Data processing</h2>

<ul>
  <li><a href="https://github.com/liebke/incanter">Incanter</a> Incanter is a Clojure-based, R-like statistical computing and graphics environment for the JVM.</li>
</ul>

<ul>
  <li><a href="https://github.com/r0man/svm-clj">svm-clj</a></li>
</ul>

<ul>
  <li><a href="https://github.com/dakrone/clojure-opennlp">Clojure OpenNLP</a></li>
</ul>

<h2 id="arts">Arts</h2>

<ul>
  <li><a href="http://overtone.github.io">Overtone</a> Overtone is an open source audio environment designed to explore new musical ideas from synthesis and sampling to instrument building, live-coding and collaborative jamming.</li>
</ul>

<iframe src="http://player.vimeo.com/video/22798433" width="500" height="331" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
<p><a href="http://vimeo.com/22798433">Quick Intro to Live Programming with Overtone</a> from <a href="http://vimeo.com/user568137">Sam Aaron</a> on <a href="http://vimeo.com">Vimeo</a>.</p>

<ul>
  <li><a href="https://github.com/quil/quil">Quil drawing library</a></li>
</ul>

<h2 id="misc">Misc</h2>

<ul>
  <li><a href="https://github.com/fogus/marginalia">Marginalia</a> Literate programming</li>
</ul>

<ul>
  <li><a href="http://sqlkorma.com">SQLKorma</a></li>
</ul>

<ul>
  <li><a href="https://github.com/hugoduncan/criterium">Criterium</a> Benchmarking library for Clojure</li>
</ul>

<ul>
  <li><a href="https://github.com/bbatsov/clojure-style-guide">Clojure style guide</a></li>
</ul>

<ul>
  <li><a href="https://github.com/flatland/classlojure">classlojure</a> Advanced class loading for clojure</li>
</ul>

]]></content>
  </entry>
  
</feed>
